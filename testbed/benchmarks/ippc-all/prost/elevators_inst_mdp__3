#####TASK#####
## name
elevators_inst_mdp__3
## horizon
40
## discount factor
1
## number of action fluents
8
## number of det state fluents
14
## number of prob state fluents
2
## number of preconds
0
## number of actions
25
## number of hashing functions
17
## initial state
1 0 0 1 0 0 1 1 1 1 0 0 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
7651
## number of unique states that were encountered during task analysis
1685
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
close-door(e0)
## number of values
2
## values
0 false
1 true

## index
1
## name
close-door(e1)
## number of values
2
## values
0 false
1 true

## index
2
## name
move-current-dir(e0)
## number of values
2
## values
0 false
1 true

## index
3
## name
move-current-dir(e1)
## number of values
2
## values
0 false
1 true

## index
4
## name
open-door-going-down(e0)
## number of values
2
## values
0 false
1 true

## index
5
## name
open-door-going-down(e1)
## number of values
2
## values
0 false
1 true

## index
6
## name
open-door-going-up(e0)
## number of values
2
## values
0 false
1 true

## index
7
## name
open-door-going-up(e1)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
elevator-at-floor(e0, f0)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(6)) ~($a(2))) : $s(0)) (and($a(2) ~($s(8)) $s(1)) : $c(1)) (and($a(2) $s(8) ~($s(0))) : $s(0)) (and($a(2) ~($s(8))) : $s(0)) ($c(1) : $c(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 1
3 1
4 0
5 0
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 1
19 1
20 0
21 0
22 1
23 1
24 0
25 0
26 1
27 0
28 0
29 0
30 1
31 0
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 1
17 1
18 0
19 0
20 1
21 0
22 0
23 0
24 0

## index
1
## name
elevator-at-floor(e0, f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(6)) ~($a(2))) : $s(1)) (and($a(2) $s(8) $s(0)) : $c(1)) (and($a(2) ~($s(8)) $s(2)) : $c(1)) (and($a(2) $s(8) ~($s(1))) : $s(1)) (and($a(2) ~($s(8)) ~($s(1))) : $s(1)) ($c(1) : $c(0)) )
## hash index
1
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 1
17 1
18 0
19 0
20 1
21 0
22 0
23 0
24 0

## index
2
## name
elevator-at-floor(e0, f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(6)) ~($a(2))) : $s(2)) (and($a(2) $s(8) $s(1)) : $c(1)) (and($a(2) $s(8)) : $s(2)) (and($a(2) ~($s(8)) ~($s(2))) : $s(2)) ($c(1) : $c(0)) )
## hash index
2
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 0
25 0
26 0
27 1
28 1
29 1
30 1
31 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 1
17 1
18 0
19 0
20 1
21 0
22 0
23 0
24 0

## index
3
## name
elevator-at-floor(e1, f0)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(7)) ~($a(3))) : $s(3)) (and($a(3) ~($s(9)) $s(4)) : $c(1)) (and($a(3) $s(9) ~($s(3))) : $s(3)) (and($a(3) ~($s(9))) : $s(3)) ($c(1) : $c(0)) )
## hash index
3
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 1
3 1
4 0
5 0
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 1
19 1
20 0
21 0
22 1
23 1
24 0
25 0
26 1
27 0
28 0
29 0
30 1
31 0
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 1
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 1
24 0

## index
4
## name
elevator-at-floor(e1, f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(7)) ~($a(3))) : $s(4)) (and($a(3) $s(9) $s(3)) : $c(1)) (and($a(3) ~($s(9)) $s(5)) : $c(1)) (and($a(3) $s(9) ~($s(4))) : $s(4)) (and($a(3) ~($s(9)) ~($s(4))) : $s(4)) ($c(1) : $c(0)) )
## hash index
4
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 1
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 1
24 0

## index
5
## name
elevator-at-floor(e1, f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(7)) ~($a(3))) : $s(5)) (and($a(3) $s(9) $s(4)) : $c(1)) (and($a(3) $s(9)) : $s(5)) (and($a(3) ~($s(9)) ~($s(5))) : $s(5)) ($c(1) : $c(0)) )
## hash index
5
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 0
25 0
26 0
27 1
28 1
29 1
30 1
31 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 1
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 1
24 0

## index
6
## name
elevator-closed(e0)
## number of values
2
## values
0 false
1 true
## formula
or(and($s(6) ~($a(6)) ~($a(4))) $a(0))
## hash index
6
## caching type 
VECTOR
## precomputed results
8
0 0
1 0
2 0
3 1
4 1
5 0
6 0
7 1
## kleene caching type
VECTOR
## kleene caching vec size
12
## action hash keys
0 0
1 0
2 1
3 0
4 2
5 0
6 0
7 0
8 3
9 1
10 1
11 2
12 2
13 1
14 2
15 0
16 0
17 0
18 1
19 2
20 0
21 3
22 3
23 3
24 3

## index
7
## name
elevator-closed(e1)
## number of values
2
## values
0 false
1 true
## formula
or(and($s(7) ~($a(7)) ~($a(5))) $a(1))
## hash index
7
## caching type 
VECTOR
## precomputed results
8
0 0
1 0
2 0
3 1
4 1
5 0
6 0
7 1
## kleene caching type
VECTOR
## kleene caching vec size
12
## action hash keys
0 0
1 1
2 0
3 2
4 0
5 0
6 0
7 3
8 0
9 1
10 2
11 1
12 2
13 0
14 0
15 1
16 2
17 0
18 3
19 3
20 3
21 1
22 2
23 0
24 3

## index
8
## name
elevator-dir-up(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(6) : $c(1)) ($a(4) : $c(0)) ($c(1) : $s(8)) )
## hash index
8
## caching type 
VECTOR
## precomputed results
6
0 0
1 1
2 0
3 1
4 1
5 0
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 0
2 1
3 0
4 2
5 0
6 0
7 0
8 0
9 1
10 1
11 2
12 2
13 1
14 2
15 0
16 0
17 0
18 1
19 2
20 0
21 0
22 0
23 0
24 0

## index
9
## name
elevator-dir-up(e1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(7) : $c(1)) ($a(5) : $c(0)) ($c(1) : $s(9)) )
## hash index
9
## caching type 
VECTOR
## precomputed results
6
0 0
1 1
2 0
3 1
4 1
5 0
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 1
2 0
3 2
4 0
5 0
6 0
7 0
8 0
9 1
10 2
11 1
12 2
13 0
14 0
15 1
16 2
17 0
18 0
19 0
20 0
21 1
22 2
23 0
24 0

## index
10
## name
person-in-elevator-going-down(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : ~($s(0))) ($c(1) : and($s(1) ~($s(8)) ~($s(6)) $s(14))) )
## hash index
10
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 1
17 0
18 1
19 0
20 1
21 0
22 1
23 0
24 1
25 0
26 1
27 0
28 1
29 0
30 1
31 0
32 0
33 0
34 1
35 1
36 0
37 0
38 0
39 0
40 0
41 0
42 0
43 0
44 0
45 0
46 0
47 0
48 1
49 0
50 1
51 0
52 1
53 0
54 1
55 0
56 1
57 0
58 1
59 0
60 1
61 0
62 1
63 0
## kleene caching type
VECTOR
## kleene caching vec size
729
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
11
## name
person-in-elevator-going-down(e1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(11) : ~($s(3))) ($c(1) : and($s(4) ~($s(9)) ~($s(7)) $s(14))) )
## hash index
11
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 1
17 0
18 1
19 0
20 1
21 0
22 1
23 0
24 1
25 0
26 1
27 0
28 1
29 0
30 1
31 0
32 0
33 0
34 1
35 1
36 0
37 0
38 0
39 0
40 0
41 0
42 0
43 0
44 0
45 0
46 0
47 0
48 1
49 0
50 1
51 0
52 1
53 0
54 1
55 0
56 1
57 0
58 1
59 0
60 1
61 0
62 1
63 0
## kleene caching type
VECTOR
## kleene caching vec size
729
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
12
## name
person-in-elevator-going-up(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(12) : ~($s(2))) ($c(1) : and($s(1) $s(8) ~($s(6)) $s(15))) )
## hash index
12
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 1
17 1
18 0
19 0
20 1
21 1
22 0
23 0
24 1
25 1
26 0
27 0
28 1
29 1
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 1
42 0
43 1
44 0
45 0
46 0
47 0
48 1
49 1
50 0
51 0
52 1
53 1
54 0
55 0
56 1
57 1
58 0
59 0
60 1
61 1
62 0
63 0
## kleene caching type
VECTOR
## kleene caching vec size
729
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
13
## name
person-in-elevator-going-up(e1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(13) : ~($s(5))) ($c(1) : and($s(4) $s(9) ~($s(7)) $s(15))) )
## hash index
13
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 1
17 1
18 0
19 0
20 1
21 1
22 0
23 0
24 1
25 1
26 0
27 0
28 1
29 1
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 1
42 0
43 1
44 0
45 0
46 0
47 0
48 1
49 1
50 0
51 0
52 1
53 1
54 0
55 0
56 1
57 1
58 0
59 0
60 1
61 1
62 0
63 0
## kleene caching type
VECTOR
## kleene caching vec size
729
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
person-waiting-down(f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(14) ~(or(and($s(1) ~($s(8)) ~($s(6))) and($s(4) ~($s(9)) ~($s(7)))))) : $c(1)) ($c(1) : Bernoulli($c(0.23324005))) )
## determinized formula
and($s(14) ~(or(and($s(1) ~($s(8)) ~($s(6))) and($s(4) ~($s(9)) ~($s(7))))))
## hash index
14
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.76675995 1 0.23324005
1 0 2 0 0.76675995 1 0.23324005
2 0 2 0 0.76675995 1 0.23324005
3 0 2 0 0.76675995 1 0.23324005
4 0 2 0 0.76675995 1 0.23324005
5 0 2 0 0.76675995 1 0.23324005
6 0 2 0 0.76675995 1 0.23324005
7 0 2 0 0.76675995 1 0.23324005
8 0 2 0 0.76675995 1 0.23324005
9 0 2 0 0.76675995 1 0.23324005
10 0 2 0 0.76675995 1 0.23324005
11 0 2 0 0.76675995 1 0.23324005
12 0 2 0 0.76675995 1 0.23324005
13 0 2 0 0.76675995 1 0.23324005
14 0 2 0 0.76675995 1 0.23324005
15 0 2 0 0.76675995 1 0.23324005
16 0 2 0 0.76675995 1 0.23324005
17 0 2 0 0.76675995 1 0.23324005
18 0 2 0 0.76675995 1 0.23324005
19 0 2 0 0.76675995 1 0.23324005
20 0 2 0 0.76675995 1 0.23324005
21 0 2 0 0.76675995 1 0.23324005
22 0 2 0 0.76675995 1 0.23324005
23 0 2 0 0.76675995 1 0.23324005
24 0 2 0 0.76675995 1 0.23324005
25 0 2 0 0.76675995 1 0.23324005
26 0 2 0 0.76675995 1 0.23324005
27 0 2 0 0.76675995 1 0.23324005
28 0 2 0 0.76675995 1 0.23324005
29 0 2 0 0.76675995 1 0.23324005
30 0 2 0 0.76675995 1 0.23324005
31 0 2 0 0.76675995 1 0.23324005
32 0 2 0 0.76675995 1 0.23324005
33 0 2 0 0.76675995 1 0.23324005
34 0 2 0 0.76675995 1 0.23324005
35 0 2 0 0.76675995 1 0.23324005
36 0 2 0 0.76675995 1 0.23324005
37 0 2 0 0.76675995 1 0.23324005
38 0 2 0 0.76675995 1 0.23324005
39 0 2 0 0.76675995 1 0.23324005
40 0 2 0 0.76675995 1 0.23324005
41 0 2 0 0.76675995 1 0.23324005
42 0 2 0 0.76675995 1 0.23324005
43 0 2 0 0.76675995 1 0.23324005
44 0 2 0 0.76675995 1 0.23324005
45 0 2 0 0.76675995 1 0.23324005
46 0 2 0 0.76675995 1 0.23324005
47 0 2 0 0.76675995 1 0.23324005
48 0 2 0 0.76675995 1 0.23324005
49 0 2 0 0.76675995 1 0.23324005
50 0 2 0 0.76675995 1 0.23324005
51 0 2 0 0.76675995 1 0.23324005
52 0 2 0 0.76675995 1 0.23324005
53 0 2 0 0.76675995 1 0.23324005
54 0 2 0 0.76675995 1 0.23324005
55 0 2 0 0.76675995 1 0.23324005
56 0 2 0 0.76675995 1 0.23324005
57 0 2 0 0.76675995 1 0.23324005
58 0 2 0 0.76675995 1 0.23324005
59 0 2 0 0.76675995 1 0.23324005
60 0 2 0 0.76675995 1 0.23324005
61 0 2 0 0.76675995 1 0.23324005
62 0 2 0 0.76675995 1 0.23324005
63 0 2 0 0.76675995 1 0.23324005
64 1 1 1 1
65 0 2 0 0.76675995 1 0.23324005
66 0 2 0 0.76675995 1 0.23324005
67 0 2 0 0.76675995 1 0.23324005
68 1 1 1 1
69 1 1 1 1
70 0 2 0 0.76675995 1 0.23324005
71 0 2 0 0.76675995 1 0.23324005
72 1 1 1 1
73 0 2 0 0.76675995 1 0.23324005
74 1 1 1 1
75 0 2 0 0.76675995 1 0.23324005
76 1 1 1 1
77 1 1 1 1
78 1 1 1 1
79 1 1 1 1
80 1 1 1 1
81 1 1 1 1
82 0 2 0 0.76675995 1 0.23324005
83 0 2 0 0.76675995 1 0.23324005
84 1 1 1 1
85 1 1 1 1
86 0 2 0 0.76675995 1 0.23324005
87 0 2 0 0.76675995 1 0.23324005
88 1 1 1 1
89 1 1 1 1
90 1 1 1 1
91 1 1 1 1
92 1 1 1 1
93 1 1 1 1
94 1 1 1 1
95 1 1 1 1
96 1 1 1 1
97 0 2 0 0.76675995 1 0.23324005
98 1 1 1 1
99 0 2 0 0.76675995 1 0.23324005
100 1 1 1 1
101 1 1 1 1
102 1 1 1 1
103 1 1 1 1
104 1 1 1 1
105 0 2 0 0.76675995 1 0.23324005
106 1 1 1 1
107 0 2 0 0.76675995 1 0.23324005
108 1 1 1 1
109 1 1 1 1
110 1 1 1 1
111 1 1 1 1
112 1 1 1 1
113 1 1 1 1
114 1 1 1 1
115 1 1 1 1
116 1 1 1 1
117 1 1 1 1
118 1 1 1 1
119 1 1 1 1
120 1 1 1 1
121 1 1 1 1
122 1 1 1 1
123 1 1 1 1
124 1 1 1 1
125 1 1 1 1
126 1 1 1 1
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
1
## name
person-waiting-up(f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(15) ~(or(and($s(1) $s(8) ~($s(6))) and($s(4) $s(9) ~($s(7)))))) : $c(1)) ($c(1) : Bernoulli($c(0.23324005))) )
## determinized formula
and($s(15) ~(or(and($s(1) $s(8) ~($s(6))) and($s(4) $s(9) ~($s(7))))))
## hash index
15
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.76675995 1 0.23324005
1 0 2 0 0.76675995 1 0.23324005
2 0 2 0 0.76675995 1 0.23324005
3 0 2 0 0.76675995 1 0.23324005
4 0 2 0 0.76675995 1 0.23324005
5 0 2 0 0.76675995 1 0.23324005
6 0 2 0 0.76675995 1 0.23324005
7 0 2 0 0.76675995 1 0.23324005
8 0 2 0 0.76675995 1 0.23324005
9 0 2 0 0.76675995 1 0.23324005
10 0 2 0 0.76675995 1 0.23324005
11 0 2 0 0.76675995 1 0.23324005
12 0 2 0 0.76675995 1 0.23324005
13 0 2 0 0.76675995 1 0.23324005
14 0 2 0 0.76675995 1 0.23324005
15 0 2 0 0.76675995 1 0.23324005
16 0 2 0 0.76675995 1 0.23324005
17 0 2 0 0.76675995 1 0.23324005
18 0 2 0 0.76675995 1 0.23324005
19 0 2 0 0.76675995 1 0.23324005
20 0 2 0 0.76675995 1 0.23324005
21 0 2 0 0.76675995 1 0.23324005
22 0 2 0 0.76675995 1 0.23324005
23 0 2 0 0.76675995 1 0.23324005
24 0 2 0 0.76675995 1 0.23324005
25 0 2 0 0.76675995 1 0.23324005
26 0 2 0 0.76675995 1 0.23324005
27 0 2 0 0.76675995 1 0.23324005
28 0 2 0 0.76675995 1 0.23324005
29 0 2 0 0.76675995 1 0.23324005
30 0 2 0 0.76675995 1 0.23324005
31 0 2 0 0.76675995 1 0.23324005
32 0 2 0 0.76675995 1 0.23324005
33 0 2 0 0.76675995 1 0.23324005
34 0 2 0 0.76675995 1 0.23324005
35 0 2 0 0.76675995 1 0.23324005
36 0 2 0 0.76675995 1 0.23324005
37 0 2 0 0.76675995 1 0.23324005
38 0 2 0 0.76675995 1 0.23324005
39 0 2 0 0.76675995 1 0.23324005
40 0 2 0 0.76675995 1 0.23324005
41 0 2 0 0.76675995 1 0.23324005
42 0 2 0 0.76675995 1 0.23324005
43 0 2 0 0.76675995 1 0.23324005
44 0 2 0 0.76675995 1 0.23324005
45 0 2 0 0.76675995 1 0.23324005
46 0 2 0 0.76675995 1 0.23324005
47 0 2 0 0.76675995 1 0.23324005
48 0 2 0 0.76675995 1 0.23324005
49 0 2 0 0.76675995 1 0.23324005
50 0 2 0 0.76675995 1 0.23324005
51 0 2 0 0.76675995 1 0.23324005
52 0 2 0 0.76675995 1 0.23324005
53 0 2 0 0.76675995 1 0.23324005
54 0 2 0 0.76675995 1 0.23324005
55 0 2 0 0.76675995 1 0.23324005
56 0 2 0 0.76675995 1 0.23324005
57 0 2 0 0.76675995 1 0.23324005
58 0 2 0 0.76675995 1 0.23324005
59 0 2 0 0.76675995 1 0.23324005
60 0 2 0 0.76675995 1 0.23324005
61 0 2 0 0.76675995 1 0.23324005
62 0 2 0 0.76675995 1 0.23324005
63 0 2 0 0.76675995 1 0.23324005
64 1 1 1 1
65 1 1 1 1
66 1 1 1 1
67 1 1 1 1
68 1 1 1 1
69 1 1 1 1
70 1 1 1 1
71 1 1 1 1
72 1 1 1 1
73 1 1 1 1
74 1 1 1 1
75 1 1 1 1
76 1 1 1 1
77 1 1 1 1
78 1 1 1 1
79 1 1 1 1
80 1 1 1 1
81 0 2 0 0.76675995 1 0.23324005
82 1 1 1 1
83 0 2 0 0.76675995 1 0.23324005
84 1 1 1 1
85 1 1 1 1
86 1 1 1 1
87 1 1 1 1
88 1 1 1 1
89 0 2 0 0.76675995 1 0.23324005
90 1 1 1 1
91 0 2 0 0.76675995 1 0.23324005
92 1 1 1 1
93 1 1 1 1
94 1 1 1 1
95 1 1 1 1
96 1 1 1 1
97 1 1 1 1
98 0 2 0 0.76675995 1 0.23324005
99 0 2 0 0.76675995 1 0.23324005
100 1 1 1 1
101 1 1 1 1
102 0 2 0 0.76675995 1 0.23324005
103 0 2 0 0.76675995 1 0.23324005
104 1 1 1 1
105 1 1 1 1
106 1 1 1 1
107 1 1 1 1
108 1 1 1 1
109 1 1 1 1
110 1 1 1 1
111 1 1 1 1
112 1 1 1 1
113 0 2 0 0.76675995 1 0.23324005
114 0 2 0 0.76675995 1 0.23324005
115 0 2 0 0.76675995 1 0.23324005
116 1 1 1 1
117 1 1 1 1
118 0 2 0 0.76675995 1 0.23324005
119 0 2 0 0.76675995 1 0.23324005
120 1 1 1 1
121 0 2 0 0.76675995 1 0.23324005
122 1 1 1 1
123 0 2 0 0.76675995 1 0.23324005
124 1 1 1 1
125 1 1 1 1
126 1 1 1 1
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0



#####REWARD#####
## formula
+(*(and($s(12) $s(8)) $c(-0.75)) *(and($s(13) $s(9)) $c(-0.75)) *(and($s(10) ~($s(8))) $c(-0.75)) *(and($s(11) ~($s(9))) $c(-0.75)) *(and($s(12) ~($s(8))) $c(-3)) *(and($s(13) ~($s(9))) $c(-3)) *(and($s(10) $s(8)) $c(-3)) *(and($s(11) $s(9)) $c(-3)) -(-($c(0) $s(15)) $s(14)))
## min
-9.5
## max
0
## independent from actions
1
## hash index
16
## caching type
VECTOR
## precomputed results
256
0 0
1 0
2 0
3 0
4 -0.75
5 -3
6 -0.75
7 -3
8 -0.75
9 -0.75
10 -3
11 -3
12 -1.5
13 -3.75
14 -3.75
15 -6
16 -3
17 -0.75
18 -3
19 -0.75
20 -3.75
21 -3.75
22 -3.75
23 -3.75
24 -3.75
25 -1.5
26 -6
27 -3.75
28 -4.5
29 -4.5
30 -6.75
31 -6.75
32 -3
33 -3
34 -0.75
35 -0.75
36 -3.75
37 -6
38 -1.5
39 -3.75
40 -3.75
41 -3.75
42 -3.75
43 -3.75
44 -4.5
45 -6.75
46 -4.5
47 -6.75
48 -6
49 -3.75
50 -3.75
51 -1.5
52 -6.75
53 -6.75
54 -4.5
55 -4.5
56 -6.75
57 -4.5
58 -6.75
59 -4.5
60 -7.5
61 -7.5
62 -7.5
63 -7.5
64 -1
65 -1
66 -1
67 -1
68 -1.75
69 -4
70 -1.75
71 -4
72 -1.75
73 -1.75
74 -4
75 -4
76 -2.5
77 -4.75
78 -4.75
79 -7
80 -4
81 -1.75
82 -4
83 -1.75
84 -4.75
85 -4.75
86 -4.75
87 -4.75
88 -4.75
89 -2.5
90 -7
91 -4.75
92 -5.5
93 -5.5
94 -7.75
95 -7.75
96 -4
97 -4
98 -1.75
99 -1.75
100 -4.75
101 -7
102 -2.5
103 -4.75
104 -4.75
105 -4.75
106 -4.75
107 -4.75
108 -5.5
109 -7.75
110 -5.5
111 -7.75
112 -7
113 -4.75
114 -4.75
115 -2.5
116 -7.75
117 -7.75
118 -5.5
119 -5.5
120 -7.75
121 -5.5
122 -7.75
123 -5.5
124 -8.5
125 -8.5
126 -8.5
127 -8.5
128 -1
129 -1
130 -1
131 -1
132 -1.75
133 -4
134 -1.75
135 -4
136 -1.75
137 -1.75
138 -4
139 -4
140 -2.5
141 -4.75
142 -4.75
143 -7
144 -4
145 -1.75
146 -4
147 -1.75
148 -4.75
149 -4.75
150 -4.75
151 -4.75
152 -4.75
153 -2.5
154 -7
155 -4.75
156 -5.5
157 -5.5
158 -7.75
159 -7.75
160 -4
161 -4
162 -1.75
163 -1.75
164 -4.75
165 -7
166 -2.5
167 -4.75
168 -4.75
169 -4.75
170 -4.75
171 -4.75
172 -5.5
173 -7.75
174 -5.5
175 -7.75
176 -7
177 -4.75
178 -4.75
179 -2.5
180 -7.75
181 -7.75
182 -5.5
183 -5.5
184 -7.75
185 -5.5
186 -7.75
187 -5.5
188 -8.5
189 -8.5
190 -8.5
191 -8.5
192 -2
193 -2
194 -2
195 -2
196 -2.75
197 -5
198 -2.75
199 -5
200 -2.75
201 -2.75
202 -5
203 -5
204 -3.5
205 -5.75
206 -5.75
207 -8
208 -5
209 -2.75
210 -5
211 -2.75
212 -5.75
213 -5.75
214 -5.75
215 -5.75
216 -5.75
217 -3.5
218 -8
219 -5.75
220 -6.5
221 -6.5
222 -8.75
223 -8.75
224 -5
225 -5
226 -2.75
227 -2.75
228 -5.75
229 -8
230 -3.5
231 -5.75
232 -5.75
233 -5.75
234 -5.75
235 -5.75
236 -6.5
237 -8.75
238 -6.5
239 -8.75
240 -8
241 -5.75
242 -5.75
243 -3.5
244 -8.75
245 -8.75
246 -6.5
247 -6.5
248 -8.75
249 -6.5
250 -8.75
251 -6.5
252 -9.5
253 -9.5
254 -9.5
255 -9.5
## kleene caching type
VECTOR
## kleene caching vec size
6561
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 0 0 0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
4
## state
0 0 0 0 1 0 0 0 
## relevant preconditions
0


## index
5
## state
0 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
6
## state
0 0 1 0 0 0 0 0 
## relevant preconditions
0


## index
7
## state
0 1 0 0 0 0 0 0 
## relevant preconditions
0


## index
8
## state
1 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
9
## state
0 0 0 0 0 0 1 1 
## relevant preconditions
0


## index
10
## state
0 0 0 0 0 1 1 0 
## relevant preconditions
0


## index
11
## state
0 0 0 0 1 0 0 1 
## relevant preconditions
0


## index
12
## state
0 0 0 0 1 1 0 0 
## relevant preconditions
0


## index
13
## state
0 0 0 1 0 0 1 0 
## relevant preconditions
0


## index
14
## state
0 0 0 1 1 0 0 0 
## relevant preconditions
0


## index
15
## state
0 0 1 0 0 0 0 1 
## relevant preconditions
0


## index
16
## state
0 0 1 0 0 1 0 0 
## relevant preconditions
0


## index
17
## state
0 0 1 1 0 0 0 0 
## relevant preconditions
0


## index
18
## state
0 1 0 0 0 0 1 0 
## relevant preconditions
0


## index
19
## state
0 1 0 0 1 0 0 0 
## relevant preconditions
0


## index
20
## state
0 1 1 0 0 0 0 0 
## relevant preconditions
0


## index
21
## state
1 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
22
## state
1 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
23
## state
1 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
24
## state
1 1 0 0 0 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
3
0 2
1 2
10 1
## kleene state fluent hash keys (first line is the number of keys)
3
0 2
1 2
10 1

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
7
0 4
1 4
2 2
10 2
12 1
14 1
15 1
## kleene state fluent hash keys (first line is the number of keys)
7
0 6
1 6
2 2
10 3
12 1
14 1
15 1

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
3
1 8
2 4
12 2
## kleene state fluent hash keys (first line is the number of keys)
3
1 18
2 6
12 3

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
3
3 2
4 2
11 1
## kleene state fluent hash keys (first line is the number of keys)
3
3 2
4 2
11 1

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
7
3 4
4 4
5 2
11 2
13 1
14 2
15 2
## kleene state fluent hash keys (first line is the number of keys)
7
3 6
4 6
5 2
11 3
13 1
14 3
15 3

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
3
4 8
5 4
13 2
## kleene state fluent hash keys (first line is the number of keys)
3
4 18
5 6
13 3

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
8
0 8
1 16
2 8
6 4
10 4
12 4
14 4
15 4
## kleene state fluent hash keys (first line is the number of keys)
8
0 18
1 54
2 18
6 4
10 9
12 9
14 9
15 9

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
8
3 8
4 16
5 8
7 4
11 4
13 4
14 8
15 8
## kleene state fluent hash keys (first line is the number of keys)
8
3 18
4 54
5 18
7 4
11 9
13 9
14 27
15 27

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
9
0 16
1 32
2 16
8 3
10 8
12 8
14 16
15 16
16 1
## kleene state fluent hash keys (first line is the number of keys)
9
0 54
1 162
2 54
8 3
10 27
12 27
14 81
15 81
16 1

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
9
3 16
4 32
5 16
9 3
11 8
13 8
14 32
15 32
16 2
## kleene state fluent hash keys (first line is the number of keys)
9
3 54
4 162
5 54
9 3
11 27
13 27
14 243
15 243
16 3

## index
10
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
2
10 16
16 4
## kleene state fluent hash keys (first line is the number of keys)
2
10 81
16 9

## index
11
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
2
11 16
16 8
## kleene state fluent hash keys (first line is the number of keys)
2
11 81
16 27

## index
12
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
531441
## state fluent hash keys (first line is the number of keys)
2
12 16
16 16
## kleene state fluent hash keys (first line is the number of keys)
2
12 81
16 81

## index
13
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
1594323
## state fluent hash keys (first line is the number of keys)
2
13 16
16 32
## kleene state fluent hash keys (first line is the number of keys)
2
13 81
16 243


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
4782969
## state fluent hash keys (first line is the number of keys)
4
10 32
11 32
14 64
16 64
## kleene state fluent hash keys (first line is the number of keys)
4
10 243
11 243
14 729
16 729

## index
1
## state hash key (for each value in the domain)
0 32768
## kleene state hash key base
14348907
## state fluent hash keys (first line is the number of keys)
4
12 32
13 32
15 64
16 128
## kleene state fluent hash keys (first line is the number of keys)
4
12 243
13 243
15 729
16 2187



#####TRAINING SET#####
200
1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 
1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 
0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 
0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 
0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 
0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 
1 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 
0 0 1 1 0 0 1 0 1 1 0 0 0 0 0 0 
0 1 0 1 0 0 0 1 1 1 0 0 0 0 0 0 
1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 
1 0 0 1 0 0 1 1 1 1 0 0 0 0 0 0 
1 0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 
0 1 0 0 0 1 0 1 0 1 1 0 0 0 0 0 
0 1 0 1 0 0 0 0 1 1 1 0 0 0 0 0 
0 0 1 0 1 0 1 0 1 1 0 1 0 0 0 0 
0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 0 
0 1 0 0 0 1 0 0 1 1 0 0 1 0 0 0 
0 1 0 0 0 1 1 0 1 0 1 0 1 0 0 0 
0 1 0 1 0 0 0 1 1 0 1 0 1 0 0 0 
0 1 0 1 0 0 0 0 0 1 1 0 1 0 0 0 
0 1 0 0 1 0 1 0 1 1 1 0 1 0 0 0 
0 1 0 1 0 0 0 1 1 1 1 0 1 0 0 0 
1 0 0 0 0 1 1 0 0 1 1 1 1 0 0 0 
0 1 0 0 0 1 0 1 0 1 1 1 1 0 0 0 
0 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 
0 0 1 0 1 0 1 0 0 0 0 1 0 1 0 0 
1 0 0 0 1 0 1 1 0 0 0 1 0 1 0 0 
1 0 0 0 0 1 0 1 0 1 0 1 0 1 0 0 
0 0 1 0 1 0 0 0 1 1 0 1 0 1 0 0 
1 0 0 0 1 0 0 1 1 1 0 1 0 1 0 0 
0 0 1 0 1 0 0 1 0 0 1 1 0 1 0 0 
0 1 0 0 1 0 0 1 1 1 1 1 0 1 0 0 
0 1 0 0 1 0 0 0 0 1 0 0 1 1 0 0 
0 1 0 1 0 0 0 0 0 1 1 0 1 1 0 0 
0 1 0 1 0 0 1 0 0 1 1 0 1 1 0 0 
0 1 0 0 1 0 0 0 1 0 0 1 1 1 0 0 
1 0 0 0 1 0 1 0 0 1 1 1 1 1 0 0 
1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 
1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 
0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 
0 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 
0 0 1 0 0 1 0 1 1 0 0 0 0 0 1 0 
1 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 
0 1 0 1 0 0 0 1 0 1 0 0 0 0 1 0 
1 0 0 0 1 0 0 1 1 1 0 0 0 0 1 0 
1 0 0 1 0 0 1 1 1 1 0 0 0 0 1 0 
0 0 1 0 1 0 0 1 1 0 1 0 0 0 1 0 
0 0 1 1 0 0 1 1 1 0 1 0 0 0 1 0 
0 0 1 1 0 0 1 1 1 1 1 0 0 0 1 0 
1 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 
0 0 1 0 1 0 1 0 1 0 0 1 0 0 1 0 
1 0 0 0 0 1 0 0 0 1 0 1 0 0 1 0 
0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 
0 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 
0 0 1 0 1 0 1 1 1 1 0 1 0 0 1 0 
0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 
1 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 
1 0 0 0 1 0 0 1 0 0 0 0 1 0 1 0 
1 0 0 1 0 0 1 1 0 0 0 0 1 0 1 0 
0 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 
0 1 0 0 0 1 0 1 1 0 0 0 1 0 1 0 
0 1 0 0 1 0 1 1 1 0 0 0 1 0 1 0 
0 1 0 0 0 1 1 1 1 0 0 0 1 0 1 0 
0 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 
0 1 0 0 1 0 0 0 0 1 0 0 1 0 1 0 
0 1 0 0 0 1 0 0 0 0 1 0 1 0 1 0 
0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 
0 1 0 0 0 1 0 0 1 1 1 0 1 0 1 0 
0 1 0 0 0 1 1 1 1 1 1 0 1 0 1 0 
0 1 0 0 1 0 0 1 1 0 0 1 1 0 1 0 
0 1 0 0 0 1 0 0 1 1 1 1 1 0 1 0 
1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 
0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 
1 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 
1 0 0 1 0 0 0 0 0 1 0 0 0 1 1 0 
1 0 0 0 1 0 0 0 0 1 0 0 0 1 1 0 
0 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 
0 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0 
0 0 1 0 1 0 1 1 0 0 0 1 0 1 1 0 
0 1 0 0 1 0 1 0 1 0 0 1 0 1 1 0 
0 1 0 0 1 0 0 0 0 1 0 1 0 1 1 0 
1 0 0 0 1 0 1 0 0 1 0 1 0 1 1 0 
1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 0 
0 0 1 0 1 0 1 1 0 1 0 1 0 1 1 0 
0 0 1 0 1 0 1 0 1 1 0 1 0 1 1 0 
0 0 1 0 1 0 1 0 1 1 1 1 0 1 1 0 
0 1 0 0 1 0 0 0 1 0 0 0 1 1 1 0 
0 1 0 0 1 0 1 0 1 0 0 0 1 1 1 0 
0 1 0 1 0 0 1 0 0 0 1 0 1 1 1 0 
0 1 0 0 1 0 0 1 0 1 0 1 1 1 1 0 
1 0 0 0 0 1 1 1 1 1 0 1 1 1 1 0 
0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 
0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 
0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 1 
1 0 0 0 0 1 1 0 1 0 0 0 0 0 0 1 
1 0 0 1 0 0 0 1 1 0 0 0 0 0 0 1 
1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 1 
1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 
1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 1 
1 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 
0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 
1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 
0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 
1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 1 
0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 1 
0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 1 
0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 
0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 1 
0 0 1 1 0 0 1 1 1 0 1 0 0 0 0 1 
0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 1 
1 0 0 0 0 1 1 1 0 1 1 0 0 0 0 1 
0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 1 
0 0 1 0 0 1 0 1 1 1 1 0 0 0 0 1 
0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 
0 1 0 0 1 0 1 0 1 0 0 1 0 0 0 1 
1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 1 
1 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 
1 0 0 0 1 0 0 0 1 1 0 1 0 0 0 1 
0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 1 
0 1 0 0 0 1 1 0 0 1 1 1 0 0 0 1 
0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 1 
1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 
0 1 0 1 0 0 1 0 1 0 0 0 1 0 0 1 
0 1 0 1 0 0 0 0 0 1 0 0 1 0 0 1 
0 1 0 0 0 1 0 0 1 1 0 0 1 0 0 1 
0 1 0 1 0 0 1 1 1 0 1 0 1 0 0 1 
0 1 0 0 1 0 1 1 1 0 1 0 1 0 0 1 
0 1 0 1 0 0 0 0 0 1 1 0 1 0 0 1 
0 1 0 0 0 1 0 0 0 1 1 0 1 0 0 1 
0 1 0 0 0 1 0 0 1 1 1 0 1 0 0 1 
1 0 0 0 0 1 0 0 0 0 0 1 1 0 0 1 
0 1 0 0 1 0 0 0 1 0 0 0 0 1 0 1 
1 0 0 1 0 0 1 1 0 1 0 0 0 1 0 1 
0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 1 
1 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 
0 1 0 0 1 0 0 1 1 0 0 1 0 1 0 1 
1 0 0 0 1 0 0 1 0 1 0 1 0 1 0 1 
0 0 1 0 1 0 0 0 1 1 0 1 0 1 0 1 
0 1 0 0 1 0 0 0 1 0 1 1 0 1 0 1 
0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 
0 1 0 0 1 0 0 1 1 0 1 0 1 1 0 1 
1 0 0 0 1 0 0 0 1 0 0 1 1 1 0 1 
0 1 0 0 1 0 0 1 1 0 1 1 1 1 0 1 
0 1 0 0 1 0 0 0 0 1 1 1 1 1 0 1 
1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 
1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 
1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 
1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 1 
0 0 1 0 0 1 0 0 1 0 0 0 0 0 1 1 
1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 1 
0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 
0 1 0 0 0 1 1 0 1 0 0 0 0 0 1 1 
1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 1 
1 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 
0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 1 
0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 1 
1 0 0 0 1 0 0 1 0 1 0 0 0 0 1 1 
0 1 0 0 0 1 0 0 1 1 0 0 0 0 1 1 
1 0 0 1 0 0 1 1 1 1 0 0 0 0 1 1 
0 1 0 0 1 0 1 1 1 1 0 0 0 0 1 1 
0 0 1 0 0 1 1 1 1 1 0 0 0 0 1 1 
0 0 1 0 0 1 1 1 1 0 1 0 0 0 1 1 
0 1 0 1 0 0 0 1 0 1 1 0 0 0 1 1 
0 0 1 0 1 0 0 1 0 1 1 0 0 0 1 1 
0 0 1 0 1 0 1 1 0 1 1 0 0 0 1 1 
1 0 0 0 1 0 0 0 0 0 0 1 0 0 1 1 
1 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 
0 0 1 0 0 1 1 0 0 0 0 1 0 0 1 1 
1 0 0 0 1 0 1 1 0 0 0 1 0 0 1 1 
0 0 1 0 0 1 0 1 0 1 0 1 0 0 1 1 
0 0 1 0 0 1 1 0 1 1 0 1 0 0 1 1 
0 0 1 0 1 0 0 1 1 1 0 1 0 0 1 1 
1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 
1 0 0 0 0 1 0 0 1 1 0 0 1 0 1 1 
1 0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 
1 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 
0 0 1 1 0 0 1 1 1 0 1 0 1 0 1 1 
0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 
1 0 0 1 0 0 1 0 0 1 1 0 1 0 1 1 
0 1 0 0 0 1 0 1 1 1 1 0 1 0 1 1 
1 0 0 0 0 1 0 0 0 0 0 1 1 0 1 1 
1 0 0 0 0 1 0 1 0 0 0 1 1 0 1 1 
1 0 0 0 0 1 0 1 1 0 0 1 1 0 1 1 
0 0 1 1 0 0 0 1 1 0 0 0 0 1 1 1 
1 0 0 1 0 0 1 1 1 0 0 0 0 1 1 1 
0 1 0 1 0 0 0 0 0 1 0 0 0 1 1 1 
0 0 1 0 1 0 1 0 1 1 0 0 0 1 1 1 
0 0 1 1 0 0 0 1 1 1 0 0 0 1 1 1 
0 0 1 1 0 0 1 1 1 1 0 0 0 1 1 1 
1 0 0 0 1 0 1 1 1 1 0 0 0 1 1 1 
0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 1 
0 1 0 0 1 0 0 0 0 1 1 0 0 1 1 1 
1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 1 
0 0 1 0 1 0 1 0 1 0 0 1 0 1 1 1 
0 1 0 0 0 1 0 1 0 1 0 1 0 1 1 1 
0 1 0 0 1 0 1 1 0 1 0 1 0 1 1 1 
0 0 1 0 1 0 0 1 1 1 0 1 0 1 1 1 
0 0 1 0 1 0 0 0 1 1 1 1 0 1 1 1 
1 0 0 0 1 0 1 1 1 1 0 0 1 1 1 1 
0 1 0 0 1 0 1 1 0 0 1 0 1 1 1 1 
