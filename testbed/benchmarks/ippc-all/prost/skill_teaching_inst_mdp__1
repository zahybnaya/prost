#####TASK#####
## name
skill_teaching_inst_mdp__1
## horizon
40
## discount factor
1
## number of action fluents
4
## number of det state fluents
8
## number of prob state fluents
4
## number of preconds
0
## number of actions
5
## number of hashing functions
13
## initial state
0 0 0 0 0 0 0 0 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
1
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
32371
## number of unique states that were encountered during task analysis
63
## number of states with only one applicable reasonable action that were encountered during task analysis
14145
## number of unique states with only one applicable reasonable action that were encountered during task analysis
54


#####ACTION FLUENTS#####
## index
0
## name
askProb(s0)
## number of values
2
## values
0 false
1 true

## index
1
## name
askProb(s1)
## number of values
2
## values
0 false
1 true

## index
2
## name
giveHint(s0)
## number of values
2
## values
0 false
1 true

## index
3
## name
giveHint(s1)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
hintDelayVar(s0)
## number of values
2
## values
0 false
1 true
## formula
and(~($s(6)) ~($s(7)) $a(2))
## hash index
0
## caching type 
VECTOR
## precomputed results
8
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 1
3 0
4 0

## index
1
## name
hintDelayVar(s1)
## number of values
2
## values
0 false
1 true
## formula
and(~($s(6)) ~($s(7)) $a(3))
## hash index
1
## caching type 
VECTOR
## precomputed results
8
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 1
2 0
3 0
4 0

## index
2
## name
hintedRight(s0)
## number of values
2
## values
0 false
1 true
## formula
and(~($s(6)) ~($s(7)) $a(2))
## hash index
2
## caching type 
VECTOR
## precomputed results
8
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 1
3 0
4 0

## index
3
## name
hintedRight(s1)
## number of values
2
## values
0 false
1 true
## formula
and(~($s(6)) ~($s(7)) $a(3))
## hash index
3
## caching type 
VECTOR
## precomputed results
8
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 1
2 0
3 0
4 0

## index
4
## name
proficiencyMed(s0)
## number of values
2
## values
0 false
1 true
## formula
switch( (and(~($s(6)) $s(4)) : $c(1)) (and($s(6) $s(2)) : $c(1)) (and($s(6) $s(8)) : $c(1)) ($s(10) : $c(1)) ($c(1) : and($s(4) $s(6) $s(0))) )
## hash index
4
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 1
25 1
26 1
27 1
28 1
29 1
30 1
31 1
32 1
33 1
34 1
35 1
36 1
37 1
38 1
39 1
40 1
41 1
42 1
43 1
44 1
45 1
46 1
47 1
48 1
49 1
50 1
51 1
52 1
53 1
54 1
55 1
56 1
57 1
58 1
59 1
60 1
61 1
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
729
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
5
## name
proficiencyMed(s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and(~($s(7)) $s(5)) : $c(1)) (and($s(7) $s(3)) : $c(1)) (and($s(7) $s(9)) : $c(1)) ($s(11) : $c(1)) ($c(1) : and($s(5) $s(7) $s(1))) )
## hash index
5
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 1
25 1
26 1
27 1
28 1
29 1
30 1
31 1
32 1
33 1
34 1
35 1
36 1
37 1
38 1
39 1
40 1
41 1
42 1
43 1
44 1
45 1
46 1
47 1
48 1
49 1
50 1
51 1
52 1
53 1
54 1
55 1
56 1
57 1
58 1
59 1
60 1
61 1
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
729
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
6
## name
updateTurn(s0)
## number of values
2
## values
0 false
1 true
## formula
and(~($s(6)) ~($s(7)) or($a(0) $a(2)))
## hash index
6
## caching type 
VECTOR
## precomputed results
12
0 0
1 1
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
## kleene caching type
VECTOR
## kleene caching vec size
27
## action hash keys
0 0
1 0
2 1
3 0
4 2

## index
7
## name
updateTurn(s1)
## number of values
2
## values
0 false
1 true
## formula
and(~($s(6)) ~($s(7)) or($a(1) $a(3)))
## hash index
7
## caching type 
VECTOR
## precomputed results
12
0 0
1 1
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
## kleene caching type
VECTOR
## kleene caching vec size
27
## action hash keys
0 0
1 1
2 0
3 2
4 0



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
answeredRight(s0)
## number of values
2
## values
0 false
1 true
## formula
switch( (and(~($s(6)) ~($s(7)) $a(0) $s(10)) : Bernoulli($c(0.9066789))) (and(~($s(6)) ~($s(7)) $a(0) $s(4)) : Bernoulli($c(0.71801746))) (and(~($s(6)) ~($s(7)) $a(0) $s(4) $a(0)) : $c(0)) (and(~($s(6)) ~($s(7)) $a(0)) : Bernoulli($c(0.56987906))) ($c(1) : $c(0)) )
## determinized formula
switch( (and(~($s(6)) ~($s(7)) $a(0) $s(10)) : $c(1)) (and(~($s(6)) ~($s(7)) $a(0) $s(4)) : $c(1)) (and(~($s(6)) ~($s(7)) $a(0) $s(4) $a(0)) : $c(0)) (and(~($s(6)) ~($s(7)) $a(0)) : $c(1)) ($c(1) : $c(0)) )
## hash index
8
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 1 0 1
1 1 2 0 0.43012094 1 0.56987906
2 0 1 0 1
3 1 2 0 0.28198254 1 0.71801746
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 0 1 0 1
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 0 1 0 1
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 1 2 0 0.0933211 1 0.9066789
18 0 1 0 1
19 1 2 0 0.0933211 1 0.9066789
20 0 1 0 1
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 0 1 0 1
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 0 1 0 1
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 1

## index
1
## name
answeredRight(s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and(~($s(6)) ~($s(7)) $a(1) $s(11)) : Bernoulli($c(0.9543038))) (and(~($s(6)) ~($s(7)) $a(1) $s(5)) : Bernoulli($c(0.7900833))) (and(~($s(6)) ~($s(7)) $a(1) $s(5) $a(1)) : $c(0)) (and(~($s(6)) ~($s(7)) $a(1)) : Bernoulli($c(0.7414986))) ($c(1) : $c(0)) )
## determinized formula
switch( (and(~($s(6)) ~($s(7)) $a(1) $s(11)) : $c(1)) (and(~($s(6)) ~($s(7)) $a(1) $s(5)) : $c(1)) (and(~($s(6)) ~($s(7)) $a(1) $s(5) $a(1)) : $c(0)) (and(~($s(6)) ~($s(7)) $a(1)) : $c(1)) ($c(1) : $c(0)) )
## hash index
9
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 1 0 1
1 1 2 0 0.2585014 1 0.7414986
2 0 1 0 1
3 1 2 0 0.2099167 1 0.7900833
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 0 1 0 1
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 0 1 0 1
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 1 2 0 0.0456962 1 0.9543038
18 0 1 0 1
19 1 2 0 0.0456962 1 0.9543038
20 0 1 0 1
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 0 1 0 1
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 0 1 0 1
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
2
## name
proficiencyHigh(s0)
## number of values
2
## values
0 false
1 true
## formula
switch( (and(~($s(6)) ~($s(7))) : $s(10)) (and(~($s(6)) $s(10)) : Bernoulli($c(0.95647080540657))) (and($s(4) $s(6) $s(8)) : $c(1)) ($c(1) : and($s(10) $s(6) or($s(0) $s(8)))) )
## determinized formula
switch( (and(~($s(6)) ~($s(7))) : $s(10)) (and(~($s(6)) $s(10)) : $c(1)) (and($s(4) $s(6) $s(8)) : $c(1)) ($c(1) : and($s(10) $s(6) or($s(0) $s(8)))) )
## hash index
10
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 1 0 1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 0 1 0 1
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 0 1 0 1
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 0 1 0 1
21 0 1 0 1
22 1 1 1 1
23 1 1 1 1
24 0 1 0 1
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 0 1 0 1
29 0 1 0 1
30 1 1 1 1
31 1 1 1 1
32 1 1 1 1
33 1 1 1 1
34 1 1 1 1
35 1 1 1 1
36 0 1 0 1
37 1 1 1 1
38 0 1 0 1
39 1 1 1 1
40 1 2 0 0.0435291945934295 1 0.95647080540657
41 1 2 0 0.0435291945934295 1 0.95647080540657
42 1 2 0 0.0435291945934295 1 0.95647080540657
43 1 2 0 0.0435291945934295 1 0.95647080540657
44 0 1 0 1
45 1 1 1 1
46 0 1 0 1
47 1 1 1 1
48 1 1 1 1
49 1 1 1 1
50 1 1 1 1
51 1 1 1 1
52 1 1 1 1
53 1 1 1 1
54 1 1 1 1
55 1 1 1 1
56 1 2 0 0.0435291945934295 1 0.95647080540657
57 1 2 0 0.0435291945934295 1 0.95647080540657
58 1 2 0 0.0435291945934295 1 0.95647080540657
59 1 2 0 0.0435291945934295 1 0.95647080540657
60 1 1 1 1
61 1 1 1 1
62 1 1 1 1
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
729
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
3
## name
proficiencyHigh(s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and(~($s(6)) ~($s(7))) : $s(11)) (and(~($s(7)) $s(11)) : Bernoulli($c(0.98123083114624))) (and($s(5) $s(7) $s(9)) : $c(1)) ($c(1) : and($s(11) $s(7) or($s(1) $s(9)))) )
## determinized formula
switch( (and(~($s(6)) ~($s(7))) : $s(11)) (and(~($s(7)) $s(11)) : $c(1)) (and($s(5) $s(7) $s(9)) : $c(1)) ($c(1) : and($s(11) $s(7) or($s(1) $s(9)))) )
## hash index
11
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 1 0 1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 0 1 0 1
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 0 1 0 1
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 0 1 0 1
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 0 1 0 1
25 0 1 0 1
26 1 1 1 1
27 1 1 1 1
28 0 1 0 1
29 0 1 0 1
30 1 1 1 1
31 1 1 1 1
32 1 1 1 1
33 1 1 1 1
34 1 1 1 1
35 1 1 1 1
36 1 2 0 0.0187691688537598 1 0.98123083114624
37 1 2 0 0.0187691688537598 1 0.98123083114624
38 1 2 0 0.0187691688537598 1 0.98123083114624
39 1 2 0 0.0187691688537598 1 0.98123083114624
40 0 1 0 1
41 1 1 1 1
42 0 1 0 1
43 1 1 1 1
44 0 1 0 1
45 1 1 1 1
46 0 1 0 1
47 1 1 1 1
48 1 1 1 1
49 1 1 1 1
50 1 1 1 1
51 1 1 1 1
52 1 2 0 0.0187691688537598 1 0.98123083114624
53 1 2 0 0.0187691688537598 1 0.98123083114624
54 1 2 0 0.0187691688537598 1 0.98123083114624
55 1 2 0 0.0187691688537598 1 0.98123083114624
56 1 1 1 1
57 1 1 1 1
58 1 1 1 1
59 1 1 1 1
60 1 1 1 1
61 1 1 1 1
62 1 1 1 1
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
729
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####REWARD#####
## formula
+(*($s(10) $c(1.1778302)) *($s(11) $c(1.2346091)) -($c(0) *(~($s(4)) $c(1.1778302))) -($c(0) *(~($s(5)) $c(1.2346091))))
## min
-2.4124393
## max
2.4124393
## independent from actions
1
## hash index
12
## caching type
VECTOR
## precomputed results
16
0 -2.4124393
1 -1.2346091
2 -1.1778302
3 0
4 -1.2346091
5 -0.0567788999999999
6 0
7 1.1778302
8 -1.1778302
9 0
10 0.0567788999999999
11 1.2346091
12 0
13 1.1778302
14 1.2346091
15 2.4124393
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 1 0 0 
## relevant preconditions
0


## index
4
## state
1 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
2
4 1
10 1
## kleene state fluent hash keys (first line is the number of keys)
2
4 1
10 1

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
2
5 1
11 1
## kleene state fluent hash keys (first line is the number of keys)
2
5 1
11 1

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
1
4 2
## kleene state fluent hash keys (first line is the number of keys)
1
4 3

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
1
5 2
## kleene state fluent hash keys (first line is the number of keys)
1
5 3

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
4
4 4
8 2
10 2
12 1
## kleene state fluent hash keys (first line is the number of keys)
4
4 9
8 2
10 3
12 1

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
4
5 4
9 2
11 2
12 2
## kleene state fluent hash keys (first line is the number of keys)
4
5 9
9 2
11 3
12 3

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
11
0 2
1 2
2 2
3 2
4 8
6 3
7 3
8 4
9 4
10 4
11 4
## kleene state fluent hash keys (first line is the number of keys)
11
0 2
1 2
2 2
3 2
4 27
6 3
7 3
8 6
9 6
10 9
11 9

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
11
0 4
1 4
2 4
3 4
5 8
6 6
7 6
8 8
9 8
10 8
11 8
## kleene state fluent hash keys (first line is the number of keys)
11
0 6
1 6
2 6
3 6
5 27
6 9
7 9
8 18
9 18
10 27
11 27


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
2
4 16
10 16
## kleene state fluent hash keys (first line is the number of keys)
2
4 81
10 81

## index
1
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
2
5 16
11 16
## kleene state fluent hash keys (first line is the number of keys)
2
5 81
11 81

## index
2
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
4
4 32
8 16
10 32
12 4
## kleene state fluent hash keys (first line is the number of keys)
4
4 243
8 54
10 243
12 9

## index
3
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
4
5 32
9 16
11 32
12 8
## kleene state fluent hash keys (first line is the number of keys)
4
5 243
9 54
11 243
12 27



#####TRAINING SET#####
63
0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 1 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 
1 0 1 0 0 0 1 0 0 0 0 0 
0 0 0 0 1 0 1 0 0 0 0 0 
1 0 1 0 1 0 1 0 0 0 0 0 
0 0 0 0 0 1 1 0 0 0 0 0 
1 0 1 0 0 1 1 0 0 0 0 0 
0 0 0 0 1 1 1 0 0 0 0 0 
1 0 1 0 1 1 1 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 
0 1 0 1 0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 1 0 0 0 0 
0 1 0 1 1 0 0 1 0 0 0 0 
0 0 0 0 0 1 0 1 0 0 0 0 
0 1 0 1 0 1 0 1 0 0 0 0 
0 0 0 0 1 1 0 1 0 0 0 0 
0 1 0 1 1 1 0 1 0 0 0 0 
0 0 0 0 0 0 1 0 1 0 0 0 
0 0 0 0 1 0 1 0 1 0 0 0 
0 0 0 0 0 1 1 0 1 0 0 0 
0 0 0 0 1 1 1 0 1 0 0 0 
0 0 0 0 0 0 0 1 0 1 0 0 
0 0 0 0 1 0 0 1 0 1 0 0 
0 0 0 0 0 1 0 1 0 1 0 0 
0 0 0 0 1 1 0 1 0 1 0 0 
0 0 0 0 1 0 0 0 0 0 1 0 
0 0 0 0 1 1 0 0 0 0 1 0 
0 0 0 0 1 0 1 0 0 0 1 0 
1 0 1 0 1 0 1 0 0 0 1 0 
0 0 0 0 1 1 1 0 0 0 1 0 
1 0 1 0 1 1 1 0 0 0 1 0 
0 0 0 0 1 0 0 1 0 0 1 0 
0 1 0 1 1 0 0 1 0 0 1 0 
0 0 0 0 1 1 0 1 0 0 1 0 
0 1 0 1 1 1 0 1 0 0 1 0 
0 0 0 0 1 0 1 0 1 0 1 0 
0 0 0 0 1 1 1 0 1 0 1 0 
0 0 0 0 1 0 0 1 0 1 1 0 
0 0 0 0 1 1 0 1 0 1 1 0 
0 0 0 0 0 1 0 0 0 0 0 1 
0 0 0 0 1 1 0 0 0 0 0 1 
0 0 0 0 0 1 1 0 0 0 0 1 
1 0 1 0 0 1 1 0 0 0 0 1 
0 0 0 0 1 1 1 0 0 0 0 1 
1 0 1 0 1 1 1 0 0 0 0 1 
0 0 0 0 0 1 0 1 0 0 0 1 
0 1 0 1 0 1 0 1 0 0 0 1 
0 0 0 0 1 1 0 1 0 0 0 1 
0 1 0 1 1 1 0 1 0 0 0 1 
0 0 0 0 0 1 1 0 1 0 0 1 
0 0 0 0 1 1 1 0 1 0 0 1 
0 0 0 0 0 1 0 1 0 1 0 1 
0 0 0 0 1 1 0 1 0 1 0 1 
0 0 0 0 1 1 0 0 0 0 1 1 
0 0 0 0 1 1 1 0 0 0 1 1 
1 0 1 0 1 1 1 0 0 0 1 1 
0 0 0 0 1 1 0 1 0 0 1 1 
0 1 0 1 1 1 0 1 0 0 1 1 
0 0 0 0 1 1 1 0 1 0 1 1 
0 0 0 0 1 1 0 1 0 1 1 1 
