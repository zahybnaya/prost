#####TASK#####
## name
tamarisk_inst_mdp__7
## horizon
40
## discount factor
1
## number of action fluents
14
## number of det state fluents
0
## number of prob state fluents
28
## number of preconds
0
## number of actions
15
## number of hashing functions
29
## initial state
1 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 0 0 0 1 1 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
2242
## number of unique states that were encountered during task analysis
1828
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
eradicate(r1)
## number of values
2
## values
0 false
1 true

## index
1
## name
eradicate(r2)
## number of values
2
## values
0 false
1 true

## index
2
## name
eradicate(r3)
## number of values
2
## values
0 false
1 true

## index
3
## name
eradicate(r4)
## number of values
2
## values
0 false
1 true

## index
4
## name
eradicate(r5)
## number of values
2
## values
0 false
1 true

## index
5
## name
eradicate(r6)
## number of values
2
## values
0 false
1 true

## index
6
## name
eradicate(r7)
## number of values
2
## values
0 false
1 true

## index
7
## name
restore(r1)
## number of values
2
## values
0 false
1 true

## index
8
## name
restore(r2)
## number of values
2
## values
0 false
1 true

## index
9
## name
restore(r3)
## number of values
2
## values
0 false
1 true

## index
10
## name
restore(r4)
## number of values
2
## values
0 false
1 true

## index
11
## name
restore(r5)
## number of values
2
## values
0 false
1 true

## index
12
## name
restore(r6)
## number of values
2
## values
0 false
1 true

## index
13
## name
restore(r7)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####


#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
native-at(s1s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(14) $s(0)) : Bernoulli($c(0.2))) (and(~($s(14)) $s(0) $a(7)) : $c(1)) (and(~($s(14)) ~($s(0)) $a(7)) : Bernoulli($c(0.9))) ($s(0) : Bernoulli($c(0.95))) (and(~($s(14)) ~($s(0))) : Bernoulli($c(0.1))) ($c(1) : $s(0)) )
## determinized formula
switch( (and($s(14) $s(0)) : $c(0)) (and(~($s(14)) $s(0) $a(7)) : $c(1)) (and(~($s(14)) ~($s(0)) $a(7)) : $c(1)) ($s(0) : $c(1)) (and(~($s(14)) ~($s(0))) : $c(0)) ($c(1) : $s(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
1
## name
native-at(s1s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(15) $s(1)) : Bernoulli($c(0.2))) (and(~($s(15)) $s(1) $a(7)) : $c(1)) (and(~($s(15)) ~($s(1)) $a(7)) : Bernoulli($c(0.9))) ($s(1) : Bernoulli($c(0.95))) (and(~($s(15)) ~($s(1))) : Bernoulli($c(0.1))) ($c(1) : $s(1)) )
## determinized formula
switch( (and($s(15) $s(1)) : $c(0)) (and(~($s(15)) $s(1) $a(7)) : $c(1)) (and(~($s(15)) ~($s(1)) $a(7)) : $c(1)) ($s(1) : $c(1)) (and(~($s(15)) ~($s(1))) : $c(0)) ($c(1) : $s(1)) )
## hash index
1
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
2
## name
native-at(s2s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(16) $s(2)) : Bernoulli($c(0.2))) (and(~($s(16)) $s(2) $a(8)) : $c(1)) (and(~($s(16)) ~($s(2)) $a(8)) : Bernoulli($c(0.9))) ($s(2) : Bernoulli($c(0.95))) (and(~($s(16)) ~($s(2))) : Bernoulli($c(0.1))) ($c(1) : $s(2)) )
## determinized formula
switch( (and($s(16) $s(2)) : $c(0)) (and(~($s(16)) $s(2) $a(8)) : $c(1)) (and(~($s(16)) ~($s(2)) $a(8)) : $c(1)) ($s(2) : $c(1)) (and(~($s(16)) ~($s(2))) : $c(0)) ($c(1) : $s(2)) )
## hash index
2
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
3
## name
native-at(s2s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(17) $s(3)) : Bernoulli($c(0.2))) (and(~($s(17)) $s(3) $a(8)) : $c(1)) (and(~($s(17)) ~($s(3)) $a(8)) : Bernoulli($c(0.9))) ($s(3) : Bernoulli($c(0.95))) (and(~($s(17)) ~($s(3))) : Bernoulli($c(0.1))) ($c(1) : $s(3)) )
## determinized formula
switch( (and($s(17) $s(3)) : $c(0)) (and(~($s(17)) $s(3) $a(8)) : $c(1)) (and(~($s(17)) ~($s(3)) $a(8)) : $c(1)) ($s(3) : $c(1)) (and(~($s(17)) ~($s(3))) : $c(0)) ($c(1) : $s(3)) )
## hash index
3
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
4
## name
native-at(s3s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(18) $s(4)) : Bernoulli($c(0.2))) (and(~($s(18)) $s(4) $a(9)) : $c(1)) (and(~($s(18)) ~($s(4)) $a(9)) : Bernoulli($c(0.9))) ($s(4) : Bernoulli($c(0.95))) (and(~($s(18)) ~($s(4))) : Bernoulli($c(0.1))) ($c(1) : $s(4)) )
## determinized formula
switch( (and($s(18) $s(4)) : $c(0)) (and(~($s(18)) $s(4) $a(9)) : $c(1)) (and(~($s(18)) ~($s(4)) $a(9)) : $c(1)) ($s(4) : $c(1)) (and(~($s(18)) ~($s(4))) : $c(0)) ($c(1) : $s(4)) )
## hash index
4
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
5
## name
native-at(s3s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(19) $s(5)) : Bernoulli($c(0.2))) (and(~($s(19)) $s(5) $a(9)) : $c(1)) (and(~($s(19)) ~($s(5)) $a(9)) : Bernoulli($c(0.9))) ($s(5) : Bernoulli($c(0.95))) (and(~($s(19)) ~($s(5))) : Bernoulli($c(0.1))) ($c(1) : $s(5)) )
## determinized formula
switch( (and($s(19) $s(5)) : $c(0)) (and(~($s(19)) $s(5) $a(9)) : $c(1)) (and(~($s(19)) ~($s(5)) $a(9)) : $c(1)) ($s(5) : $c(1)) (and(~($s(19)) ~($s(5))) : $c(0)) ($c(1) : $s(5)) )
## hash index
5
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
6
## name
native-at(s4s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(20) $s(6)) : Bernoulli($c(0.2))) (and(~($s(20)) $s(6) $a(10)) : $c(1)) (and(~($s(20)) ~($s(6)) $a(10)) : Bernoulli($c(0.9))) ($s(6) : Bernoulli($c(0.95))) (and(~($s(20)) ~($s(6))) : Bernoulli($c(0.1))) ($c(1) : $s(6)) )
## determinized formula
switch( (and($s(20) $s(6)) : $c(0)) (and(~($s(20)) $s(6) $a(10)) : $c(1)) (and(~($s(20)) ~($s(6)) $a(10)) : $c(1)) ($s(6) : $c(1)) (and(~($s(20)) ~($s(6))) : $c(0)) ($c(1) : $s(6)) )
## hash index
6
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
7
## name
native-at(s4s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(21) $s(7)) : Bernoulli($c(0.2))) (and(~($s(21)) $s(7) $a(10)) : $c(1)) (and(~($s(21)) ~($s(7)) $a(10)) : Bernoulli($c(0.9))) ($s(7) : Bernoulli($c(0.95))) (and(~($s(21)) ~($s(7))) : Bernoulli($c(0.1))) ($c(1) : $s(7)) )
## determinized formula
switch( (and($s(21) $s(7)) : $c(0)) (and(~($s(21)) $s(7) $a(10)) : $c(1)) (and(~($s(21)) ~($s(7)) $a(10)) : $c(1)) ($s(7) : $c(1)) (and(~($s(21)) ~($s(7))) : $c(0)) ($c(1) : $s(7)) )
## hash index
7
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
8
## name
native-at(s5s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(22) $s(8)) : Bernoulli($c(0.2))) (and(~($s(22)) $s(8) $a(11)) : $c(1)) (and(~($s(22)) ~($s(8)) $a(11)) : Bernoulli($c(0.9))) ($s(8) : Bernoulli($c(0.95))) (and(~($s(22)) ~($s(8))) : Bernoulli($c(0.1))) ($c(1) : $s(8)) )
## determinized formula
switch( (and($s(22) $s(8)) : $c(0)) (and(~($s(22)) $s(8) $a(11)) : $c(1)) (and(~($s(22)) ~($s(8)) $a(11)) : $c(1)) ($s(8) : $c(1)) (and(~($s(22)) ~($s(8))) : $c(0)) ($c(1) : $s(8)) )
## hash index
8
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
9
## name
native-at(s5s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(23) $s(9)) : Bernoulli($c(0.2))) (and(~($s(23)) $s(9) $a(11)) : $c(1)) (and(~($s(23)) ~($s(9)) $a(11)) : Bernoulli($c(0.9))) ($s(9) : Bernoulli($c(0.95))) (and(~($s(23)) ~($s(9))) : Bernoulli($c(0.1))) ($c(1) : $s(9)) )
## determinized formula
switch( (and($s(23) $s(9)) : $c(0)) (and(~($s(23)) $s(9) $a(11)) : $c(1)) (and(~($s(23)) ~($s(9)) $a(11)) : $c(1)) ($s(9) : $c(1)) (and(~($s(23)) ~($s(9))) : $c(0)) ($c(1) : $s(9)) )
## hash index
9
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
10
## name
native-at(s6s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(24) $s(10)) : Bernoulli($c(0.2))) (and(~($s(24)) $s(10) $a(12)) : $c(1)) (and(~($s(24)) ~($s(10)) $a(12)) : Bernoulli($c(0.9))) ($s(10) : Bernoulli($c(0.95))) (and(~($s(24)) ~($s(10))) : Bernoulli($c(0.1))) ($c(1) : $s(10)) )
## determinized formula
switch( (and($s(24) $s(10)) : $c(0)) (and(~($s(24)) $s(10) $a(12)) : $c(1)) (and(~($s(24)) ~($s(10)) $a(12)) : $c(1)) ($s(10) : $c(1)) (and(~($s(24)) ~($s(10))) : $c(0)) ($c(1) : $s(10)) )
## hash index
10
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
11
## name
native-at(s6s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(25) $s(11)) : Bernoulli($c(0.2))) (and(~($s(25)) $s(11) $a(12)) : $c(1)) (and(~($s(25)) ~($s(11)) $a(12)) : Bernoulli($c(0.9))) ($s(11) : Bernoulli($c(0.95))) (and(~($s(25)) ~($s(11))) : Bernoulli($c(0.1))) ($c(1) : $s(11)) )
## determinized formula
switch( (and($s(25) $s(11)) : $c(0)) (and(~($s(25)) $s(11) $a(12)) : $c(1)) (and(~($s(25)) ~($s(11)) $a(12)) : $c(1)) ($s(11) : $c(1)) (and(~($s(25)) ~($s(11))) : $c(0)) ($c(1) : $s(11)) )
## hash index
11
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
12
## name
native-at(s7s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(26) $s(12)) : Bernoulli($c(0.2))) (and(~($s(26)) $s(12) $a(13)) : $c(1)) (and(~($s(26)) ~($s(12)) $a(13)) : Bernoulli($c(0.9))) ($s(12) : Bernoulli($c(0.95))) (and(~($s(26)) ~($s(12))) : Bernoulli($c(0.1))) ($c(1) : $s(12)) )
## determinized formula
switch( (and($s(26) $s(12)) : $c(0)) (and(~($s(26)) $s(12) $a(13)) : $c(1)) (and(~($s(26)) ~($s(12)) $a(13)) : $c(1)) ($s(12) : $c(1)) (and(~($s(26)) ~($s(12))) : $c(0)) ($c(1) : $s(12)) )
## hash index
12
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
13
## name
native-at(s7s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(27) $s(13)) : Bernoulli($c(0.2))) (and(~($s(27)) $s(13) $a(13)) : $c(1)) (and(~($s(27)) ~($s(13)) $a(13)) : Bernoulli($c(0.9))) ($s(13) : Bernoulli($c(0.95))) (and(~($s(27)) ~($s(13))) : Bernoulli($c(0.1))) ($c(1) : $s(13)) )
## determinized formula
switch( (and($s(27) $s(13)) : $c(0)) (and(~($s(27)) $s(13) $a(13)) : $c(1)) (and(~($s(27)) ~($s(13)) $a(13)) : $c(1)) ($s(13) : $c(1)) (and(~($s(27)) ~($s(13))) : $c(0)) ($c(1) : $s(13)) )
## hash index
13
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.9 1 0.1
1 1 2 0 0.1 1 0.9
2 1 2 0 0.05 1 0.95
3 1 1 1 1
4 0 1 0 1
5 0 1 0 1
6 0 2 0 0.8 1 0.2
7 0 2 0 0.8 1 0.2
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0

## index
14
## name
tamarisk-at(s1s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(14) $s(0)) : Bernoulli($c(0.8))) (and(~($s(14)) $a(0)) : $c(0)) (and($s(14) $a(0)) : Bernoulli($c(0.1))) ($s(14) : Bernoulli($c(0.95))) (and(~($s(14)) ~($s(0))) : Bernoulli(+(*(-($c(1) *(switch( ($s(15) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(16) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(17) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(14)) )
## determinized formula
switch( (and($s(14) $s(0)) : $c(1)) (and(~($s(14)) $a(0)) : $c(0)) (and($s(14) $a(0)) : $c(0)) ($s(14) : $c(1)) (and(~($s(14)) ~($s(0))) : <=($c(0.5) +(*(-($c(1) *(switch( ($s(15) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(16) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(17) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(14)) )
## hash index
14
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.05 1 0.95
5 0 2 0 0.9 1 0.1
6 1 2 0 0.2 1 0.8
7 1 2 0 0.2 1 0.8
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.05 1 0.95
13 0 2 0 0.9 1 0.1
14 1 2 0 0.2 1 0.8
15 1 2 0 0.2 1 0.8
16 0 2 0 0.765 1 0.235
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 1 2 0 0.05 1 0.95
21 0 2 0 0.9 1 0.1
22 1 2 0 0.2 1 0.8
23 1 2 0 0.2 1 0.8
24 1 2 0 0.306 1 0.694
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 1 2 0 0.05 1 0.95
29 0 2 0 0.9 1 0.1
30 1 2 0 0.2 1 0.8
31 1 2 0 0.2 1 0.8
32 0 2 0 0.765 1 0.235
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 1 2 0 0.05 1 0.95
37 0 2 0 0.9 1 0.1
38 1 2 0 0.2 1 0.8
39 1 2 0 0.2 1 0.8
40 1 2 0 0.306 1 0.694
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 1 2 0 0.05 1 0.95
45 0 2 0 0.9 1 0.1
46 1 2 0 0.2 1 0.8
47 1 2 0 0.2 1 0.8
48 0 2 0 0.65025 1 0.34975
49 0 1 0 1
50 0 1 0 1
51 0 1 0 1
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.2601 1 0.7399
57 0 1 0 1
58 0 1 0 1
59 0 1 0 1
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 1

## index
15
## name
tamarisk-at(s1s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(15) $s(1)) : Bernoulli($c(0.8))) (and(~($s(15)) $a(0)) : $c(0)) (and($s(15) $a(0)) : Bernoulli($c(0.1))) ($s(15) : Bernoulli($c(0.95))) (and(~($s(15)) ~($s(1))) : Bernoulli(+(*(-($c(1) *(switch( ($s(14) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(16) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(17) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(15)) )
## determinized formula
switch( (and($s(15) $s(1)) : $c(1)) (and(~($s(15)) $a(0)) : $c(0)) (and($s(15) $a(0)) : $c(0)) ($s(15) : $c(1)) (and(~($s(15)) ~($s(1))) : <=($c(0.5) +(*(-($c(1) *(switch( ($s(14) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(16) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(17) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(15)) )
## hash index
15
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.05 1 0.95
9 0 2 0 0.9 1 0.1
10 1 2 0 0.2 1 0.8
11 1 2 0 0.2 1 0.8
12 1 2 0 0.05 1 0.95
13 0 2 0 0.9 1 0.1
14 1 2 0 0.2 1 0.8
15 1 2 0 0.2 1 0.8
16 0 2 0 0.765 1 0.235
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 1 2 0 0.306 1 0.694
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 1 2 0 0.05 1 0.95
25 0 2 0 0.9 1 0.1
26 1 2 0 0.2 1 0.8
27 1 2 0 0.2 1 0.8
28 1 2 0 0.05 1 0.95
29 0 2 0 0.9 1 0.1
30 1 2 0 0.2 1 0.8
31 1 2 0 0.2 1 0.8
32 0 2 0 0.765 1 0.235
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 1 2 0 0.306 1 0.694
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 2 0 0.05 1 0.95
41 0 2 0 0.9 1 0.1
42 1 2 0 0.2 1 0.8
43 1 2 0 0.2 1 0.8
44 1 2 0 0.05 1 0.95
45 0 2 0 0.9 1 0.1
46 1 2 0 0.2 1 0.8
47 1 2 0 0.2 1 0.8
48 0 2 0 0.65025 1 0.34975
49 0 1 0 1
50 0 1 0 1
51 0 1 0 1
52 1 2 0 0.2601 1 0.7399
53 0 1 0 1
54 0 1 0 1
55 0 1 0 1
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 1

## index
16
## name
tamarisk-at(s2s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(16) $s(2)) : Bernoulli($c(0.8))) (and(~($s(16)) $a(1)) : $c(0)) (and($s(16) $a(1)) : Bernoulli($c(0.1))) ($s(16) : Bernoulli($c(0.95))) (and(~($s(16)) ~($s(2))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(17) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(14) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(15) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(18) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(19) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(16)) )
## determinized formula
switch( (and($s(16) $s(2)) : $c(1)) (and(~($s(16)) $a(1)) : $c(0)) (and($s(16) $a(1)) : $c(0)) ($s(16) : $c(1)) (and(~($s(16)) ~($s(2))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(17) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(14) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(15) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(18) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(19) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(16)) )
## hash index
16
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.05 1 0.95
17 0 2 0 0.9 1 0.1
18 1 2 0 0.2 1 0.8
19 1 2 0 0.2 1 0.8
20 1 2 0 0.05 1 0.95
21 0 2 0 0.9 1 0.1
22 1 2 0 0.2 1 0.8
23 1 2 0 0.2 1 0.8
24 1 2 0 0.05 1 0.95
25 0 2 0 0.9 1 0.1
26 1 2 0 0.2 1 0.8
27 1 2 0 0.2 1 0.8
28 1 2 0 0.05 1 0.95
29 0 2 0 0.9 1 0.1
30 1 2 0 0.2 1 0.8
31 1 2 0 0.2 1 0.8
32 1 2 0 0.36 1 0.64
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 1 2 0 0.144 1 0.856
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 2 0 0.144 1 0.856
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 1 2 0 0.0576000000000001 1 0.9424
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.05 1 0.95
81 0 2 0 0.9 1 0.1
82 1 2 0 0.2 1 0.8
83 1 2 0 0.2 1 0.8
84 1 2 0 0.05 1 0.95
85 0 2 0 0.9 1 0.1
86 1 2 0 0.2 1 0.8
87 1 2 0 0.2 1 0.8
88 1 2 0 0.05 1 0.95
89 0 2 0 0.9 1 0.1
90 1 2 0 0.2 1 0.8
91 1 2 0 0.2 1 0.8
92 1 2 0 0.05 1 0.95
93 0 2 0 0.9 1 0.1
94 1 2 0 0.2 1 0.8
95 1 2 0 0.2 1 0.8
96 1 2 0 0.306 1 0.694
97 0 1 0 1
98 0 1 0 1
99 0 1 0 1
100 1 2 0 0.1224 1 0.8776
101 0 1 0 1
102 0 1 0 1
103 0 1 0 1
104 1 2 0 0.1224 1 0.8776
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 1 2 0 0.04896 1 0.95104
109 0 1 0 1
110 0 1 0 1
111 0 1 0 1
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.05 1 0.95
145 0 2 0 0.9 1 0.1
146 1 2 0 0.2 1 0.8
147 1 2 0 0.2 1 0.8
148 1 2 0 0.05 1 0.95
149 0 2 0 0.9 1 0.1
150 1 2 0 0.2 1 0.8
151 1 2 0 0.2 1 0.8
152 1 2 0 0.05 1 0.95
153 0 2 0 0.9 1 0.1
154 1 2 0 0.2 1 0.8
155 1 2 0 0.2 1 0.8
156 1 2 0 0.05 1 0.95
157 0 2 0 0.9 1 0.1
158 1 2 0 0.2 1 0.8
159 1 2 0 0.2 1 0.8
160 1 2 0 0.306 1 0.694
161 0 1 0 1
162 0 1 0 1
163 0 1 0 1
164 1 2 0 0.1224 1 0.8776
165 0 1 0 1
166 0 1 0 1
167 0 1 0 1
168 1 2 0 0.1224 1 0.8776
169 0 1 0 1
170 0 1 0 1
171 0 1 0 1
172 1 2 0 0.04896 1 0.95104
173 0 1 0 1
174 0 1 0 1
175 0 1 0 1
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.05 1 0.95
209 0 2 0 0.9 1 0.1
210 1 2 0 0.2 1 0.8
211 1 2 0 0.2 1 0.8
212 1 2 0 0.05 1 0.95
213 0 2 0 0.9 1 0.1
214 1 2 0 0.2 1 0.8
215 1 2 0 0.2 1 0.8
216 1 2 0 0.05 1 0.95
217 0 2 0 0.9 1 0.1
218 1 2 0 0.2 1 0.8
219 1 2 0 0.2 1 0.8
220 1 2 0 0.05 1 0.95
221 0 2 0 0.9 1 0.1
222 1 2 0 0.2 1 0.8
223 1 2 0 0.2 1 0.8
224 1 2 0 0.2601 1 0.7399
225 0 1 0 1
226 0 1 0 1
227 0 1 0 1
228 1 2 0 0.10404 1 0.89596
229 0 1 0 1
230 0 1 0 1
231 0 1 0 1
232 1 2 0 0.10404 1 0.89596
233 0 1 0 1
234 0 1 0 1
235 0 1 0 1
236 1 2 0 0.0416160000000001 1 0.958384
237 0 1 0 1
238 0 1 0 1
239 0 1 0 1
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 0

## index
17
## name
tamarisk-at(s2s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(17) $s(3)) : Bernoulli($c(0.8))) (and(~($s(17)) $a(1)) : $c(0)) (and($s(17) $a(1)) : Bernoulli($c(0.1))) ($s(17) : Bernoulli($c(0.95))) (and(~($s(17)) ~($s(3))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(16) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(14) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(15) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(18) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(19) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(17)) )
## determinized formula
switch( (and($s(17) $s(3)) : $c(1)) (and(~($s(17)) $a(1)) : $c(0)) (and($s(17) $a(1)) : $c(0)) ($s(17) : $c(1)) (and(~($s(17)) ~($s(3))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(16) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(14) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(15) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(18) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(19) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(17)) )
## hash index
17
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.36 1 0.64
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 1 2 0 0.144 1 0.856
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 1 2 0 0.144 1 0.856
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 1 2 0 0.0576000000000001 1 0.9424
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 1 2 0 0.05 1 0.95
33 0 2 0 0.9 1 0.1
34 1 2 0 0.2 1 0.8
35 1 2 0 0.2 1 0.8
36 1 2 0 0.05 1 0.95
37 0 2 0 0.9 1 0.1
38 1 2 0 0.2 1 0.8
39 1 2 0 0.2 1 0.8
40 1 2 0 0.05 1 0.95
41 0 2 0 0.9 1 0.1
42 1 2 0 0.2 1 0.8
43 1 2 0 0.2 1 0.8
44 1 2 0 0.05 1 0.95
45 0 2 0 0.9 1 0.1
46 1 2 0 0.2 1 0.8
47 1 2 0 0.2 1 0.8
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.306 1 0.694
81 0 1 0 1
82 0 1 0 1
83 0 1 0 1
84 1 2 0 0.1224 1 0.8776
85 0 1 0 1
86 0 1 0 1
87 0 1 0 1
88 1 2 0 0.1224 1 0.8776
89 0 1 0 1
90 0 1 0 1
91 0 1 0 1
92 1 2 0 0.04896 1 0.95104
93 0 1 0 1
94 0 1 0 1
95 0 1 0 1
96 1 2 0 0.05 1 0.95
97 0 2 0 0.9 1 0.1
98 1 2 0 0.2 1 0.8
99 1 2 0 0.2 1 0.8
100 1 2 0 0.05 1 0.95
101 0 2 0 0.9 1 0.1
102 1 2 0 0.2 1 0.8
103 1 2 0 0.2 1 0.8
104 1 2 0 0.05 1 0.95
105 0 2 0 0.9 1 0.1
106 1 2 0 0.2 1 0.8
107 1 2 0 0.2 1 0.8
108 1 2 0 0.05 1 0.95
109 0 2 0 0.9 1 0.1
110 1 2 0 0.2 1 0.8
111 1 2 0 0.2 1 0.8
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.306 1 0.694
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 1 2 0 0.1224 1 0.8776
149 0 1 0 1
150 0 1 0 1
151 0 1 0 1
152 1 2 0 0.1224 1 0.8776
153 0 1 0 1
154 0 1 0 1
155 0 1 0 1
156 1 2 0 0.04896 1 0.95104
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
160 1 2 0 0.05 1 0.95
161 0 2 0 0.9 1 0.1
162 1 2 0 0.2 1 0.8
163 1 2 0 0.2 1 0.8
164 1 2 0 0.05 1 0.95
165 0 2 0 0.9 1 0.1
166 1 2 0 0.2 1 0.8
167 1 2 0 0.2 1 0.8
168 1 2 0 0.05 1 0.95
169 0 2 0 0.9 1 0.1
170 1 2 0 0.2 1 0.8
171 1 2 0 0.2 1 0.8
172 1 2 0 0.05 1 0.95
173 0 2 0 0.9 1 0.1
174 1 2 0 0.2 1 0.8
175 1 2 0 0.2 1 0.8
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.2601 1 0.7399
209 0 1 0 1
210 0 1 0 1
211 0 1 0 1
212 1 2 0 0.10404 1 0.89596
213 0 1 0 1
214 0 1 0 1
215 0 1 0 1
216 1 2 0 0.10404 1 0.89596
217 0 1 0 1
218 0 1 0 1
219 0 1 0 1
220 1 2 0 0.0416160000000001 1 0.958384
221 0 1 0 1
222 0 1 0 1
223 0 1 0 1
224 1 2 0 0.05 1 0.95
225 0 2 0 0.9 1 0.1
226 1 2 0 0.2 1 0.8
227 1 2 0 0.2 1 0.8
228 1 2 0 0.05 1 0.95
229 0 2 0 0.9 1 0.1
230 1 2 0 0.2 1 0.8
231 1 2 0 0.2 1 0.8
232 1 2 0 0.05 1 0.95
233 0 2 0 0.9 1 0.1
234 1 2 0 0.2 1 0.8
235 1 2 0 0.2 1 0.8
236 1 2 0 0.05 1 0.95
237 0 2 0 0.9 1 0.1
238 1 2 0 0.2 1 0.8
239 1 2 0 0.2 1 0.8
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 0

## index
18
## name
tamarisk-at(s3s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(18) $s(4)) : Bernoulli($c(0.8))) (and(~($s(18)) $a(2)) : $c(0)) (and($s(18) $a(2)) : Bernoulli($c(0.1))) ($s(18) : Bernoulli($c(0.95))) (and(~($s(18)) ~($s(4))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(19) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(16) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(17) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(20) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(21) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(18)) )
## determinized formula
switch( (and($s(18) $s(4)) : $c(1)) (and(~($s(18)) $a(2)) : $c(0)) (and($s(18) $a(2)) : $c(0)) ($s(18) : $c(1)) (and(~($s(18)) ~($s(4))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(19) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(16) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(17) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(20) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(21) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(18)) )
## hash index
18
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.05 1 0.95
17 0 2 0 0.9 1 0.1
18 1 2 0 0.2 1 0.8
19 1 2 0 0.2 1 0.8
20 1 2 0 0.05 1 0.95
21 0 2 0 0.9 1 0.1
22 1 2 0 0.2 1 0.8
23 1 2 0 0.2 1 0.8
24 1 2 0 0.05 1 0.95
25 0 2 0 0.9 1 0.1
26 1 2 0 0.2 1 0.8
27 1 2 0 0.2 1 0.8
28 1 2 0 0.05 1 0.95
29 0 2 0 0.9 1 0.1
30 1 2 0 0.2 1 0.8
31 1 2 0 0.2 1 0.8
32 1 2 0 0.36 1 0.64
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 1 2 0 0.144 1 0.856
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 2 0 0.144 1 0.856
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 1 2 0 0.0576000000000001 1 0.9424
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.05 1 0.95
81 0 2 0 0.9 1 0.1
82 1 2 0 0.2 1 0.8
83 1 2 0 0.2 1 0.8
84 1 2 0 0.05 1 0.95
85 0 2 0 0.9 1 0.1
86 1 2 0 0.2 1 0.8
87 1 2 0 0.2 1 0.8
88 1 2 0 0.05 1 0.95
89 0 2 0 0.9 1 0.1
90 1 2 0 0.2 1 0.8
91 1 2 0 0.2 1 0.8
92 1 2 0 0.05 1 0.95
93 0 2 0 0.9 1 0.1
94 1 2 0 0.2 1 0.8
95 1 2 0 0.2 1 0.8
96 1 2 0 0.306 1 0.694
97 0 1 0 1
98 0 1 0 1
99 0 1 0 1
100 1 2 0 0.1224 1 0.8776
101 0 1 0 1
102 0 1 0 1
103 0 1 0 1
104 1 2 0 0.1224 1 0.8776
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 1 2 0 0.04896 1 0.95104
109 0 1 0 1
110 0 1 0 1
111 0 1 0 1
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.05 1 0.95
145 0 2 0 0.9 1 0.1
146 1 2 0 0.2 1 0.8
147 1 2 0 0.2 1 0.8
148 1 2 0 0.05 1 0.95
149 0 2 0 0.9 1 0.1
150 1 2 0 0.2 1 0.8
151 1 2 0 0.2 1 0.8
152 1 2 0 0.05 1 0.95
153 0 2 0 0.9 1 0.1
154 1 2 0 0.2 1 0.8
155 1 2 0 0.2 1 0.8
156 1 2 0 0.05 1 0.95
157 0 2 0 0.9 1 0.1
158 1 2 0 0.2 1 0.8
159 1 2 0 0.2 1 0.8
160 1 2 0 0.306 1 0.694
161 0 1 0 1
162 0 1 0 1
163 0 1 0 1
164 1 2 0 0.1224 1 0.8776
165 0 1 0 1
166 0 1 0 1
167 0 1 0 1
168 1 2 0 0.1224 1 0.8776
169 0 1 0 1
170 0 1 0 1
171 0 1 0 1
172 1 2 0 0.04896 1 0.95104
173 0 1 0 1
174 0 1 0 1
175 0 1 0 1
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.05 1 0.95
209 0 2 0 0.9 1 0.1
210 1 2 0 0.2 1 0.8
211 1 2 0 0.2 1 0.8
212 1 2 0 0.05 1 0.95
213 0 2 0 0.9 1 0.1
214 1 2 0 0.2 1 0.8
215 1 2 0 0.2 1 0.8
216 1 2 0 0.05 1 0.95
217 0 2 0 0.9 1 0.1
218 1 2 0 0.2 1 0.8
219 1 2 0 0.2 1 0.8
220 1 2 0 0.05 1 0.95
221 0 2 0 0.9 1 0.1
222 1 2 0 0.2 1 0.8
223 1 2 0 0.2 1 0.8
224 1 2 0 0.2601 1 0.7399
225 0 1 0 1
226 0 1 0 1
227 0 1 0 1
228 1 2 0 0.10404 1 0.89596
229 0 1 0 1
230 0 1 0 1
231 0 1 0 1
232 1 2 0 0.10404 1 0.89596
233 0 1 0 1
234 0 1 0 1
235 0 1 0 1
236 1 2 0 0.0416160000000001 1 0.958384
237 0 1 0 1
238 0 1 0 1
239 0 1 0 1
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 1
13 0
14 0

## index
19
## name
tamarisk-at(s3s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(19) $s(5)) : Bernoulli($c(0.8))) (and(~($s(19)) $a(2)) : $c(0)) (and($s(19) $a(2)) : Bernoulli($c(0.1))) ($s(19) : Bernoulli($c(0.95))) (and(~($s(19)) ~($s(5))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(18) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(16) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(17) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(20) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(21) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(19)) )
## determinized formula
switch( (and($s(19) $s(5)) : $c(1)) (and(~($s(19)) $a(2)) : $c(0)) (and($s(19) $a(2)) : $c(0)) ($s(19) : $c(1)) (and(~($s(19)) ~($s(5))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(18) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(16) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(17) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(20) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(21) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(19)) )
## hash index
19
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.36 1 0.64
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 1 2 0 0.144 1 0.856
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 1 2 0 0.144 1 0.856
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 1 2 0 0.0576000000000001 1 0.9424
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 1 2 0 0.05 1 0.95
33 0 2 0 0.9 1 0.1
34 1 2 0 0.2 1 0.8
35 1 2 0 0.2 1 0.8
36 1 2 0 0.05 1 0.95
37 0 2 0 0.9 1 0.1
38 1 2 0 0.2 1 0.8
39 1 2 0 0.2 1 0.8
40 1 2 0 0.05 1 0.95
41 0 2 0 0.9 1 0.1
42 1 2 0 0.2 1 0.8
43 1 2 0 0.2 1 0.8
44 1 2 0 0.05 1 0.95
45 0 2 0 0.9 1 0.1
46 1 2 0 0.2 1 0.8
47 1 2 0 0.2 1 0.8
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.306 1 0.694
81 0 1 0 1
82 0 1 0 1
83 0 1 0 1
84 1 2 0 0.1224 1 0.8776
85 0 1 0 1
86 0 1 0 1
87 0 1 0 1
88 1 2 0 0.1224 1 0.8776
89 0 1 0 1
90 0 1 0 1
91 0 1 0 1
92 1 2 0 0.04896 1 0.95104
93 0 1 0 1
94 0 1 0 1
95 0 1 0 1
96 1 2 0 0.05 1 0.95
97 0 2 0 0.9 1 0.1
98 1 2 0 0.2 1 0.8
99 1 2 0 0.2 1 0.8
100 1 2 0 0.05 1 0.95
101 0 2 0 0.9 1 0.1
102 1 2 0 0.2 1 0.8
103 1 2 0 0.2 1 0.8
104 1 2 0 0.05 1 0.95
105 0 2 0 0.9 1 0.1
106 1 2 0 0.2 1 0.8
107 1 2 0 0.2 1 0.8
108 1 2 0 0.05 1 0.95
109 0 2 0 0.9 1 0.1
110 1 2 0 0.2 1 0.8
111 1 2 0 0.2 1 0.8
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.306 1 0.694
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 1 2 0 0.1224 1 0.8776
149 0 1 0 1
150 0 1 0 1
151 0 1 0 1
152 1 2 0 0.1224 1 0.8776
153 0 1 0 1
154 0 1 0 1
155 0 1 0 1
156 1 2 0 0.04896 1 0.95104
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
160 1 2 0 0.05 1 0.95
161 0 2 0 0.9 1 0.1
162 1 2 0 0.2 1 0.8
163 1 2 0 0.2 1 0.8
164 1 2 0 0.05 1 0.95
165 0 2 0 0.9 1 0.1
166 1 2 0 0.2 1 0.8
167 1 2 0 0.2 1 0.8
168 1 2 0 0.05 1 0.95
169 0 2 0 0.9 1 0.1
170 1 2 0 0.2 1 0.8
171 1 2 0 0.2 1 0.8
172 1 2 0 0.05 1 0.95
173 0 2 0 0.9 1 0.1
174 1 2 0 0.2 1 0.8
175 1 2 0 0.2 1 0.8
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.2601 1 0.7399
209 0 1 0 1
210 0 1 0 1
211 0 1 0 1
212 1 2 0 0.10404 1 0.89596
213 0 1 0 1
214 0 1 0 1
215 0 1 0 1
216 1 2 0 0.10404 1 0.89596
217 0 1 0 1
218 0 1 0 1
219 0 1 0 1
220 1 2 0 0.0416160000000001 1 0.958384
221 0 1 0 1
222 0 1 0 1
223 0 1 0 1
224 1 2 0 0.05 1 0.95
225 0 2 0 0.9 1 0.1
226 1 2 0 0.2 1 0.8
227 1 2 0 0.2 1 0.8
228 1 2 0 0.05 1 0.95
229 0 2 0 0.9 1 0.1
230 1 2 0 0.2 1 0.8
231 1 2 0 0.2 1 0.8
232 1 2 0 0.05 1 0.95
233 0 2 0 0.9 1 0.1
234 1 2 0 0.2 1 0.8
235 1 2 0 0.2 1 0.8
236 1 2 0 0.05 1 0.95
237 0 2 0 0.9 1 0.1
238 1 2 0 0.2 1 0.8
239 1 2 0 0.2 1 0.8
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 1
13 0
14 0

## index
20
## name
tamarisk-at(s4s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(20) $s(6)) : Bernoulli($c(0.8))) (and(~($s(20)) $a(3)) : $c(0)) (and($s(20) $a(3)) : Bernoulli($c(0.1))) ($s(20) : Bernoulli($c(0.95))) (and(~($s(20)) ~($s(6))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(21) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(18) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(19) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(22) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(23) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(20)) )
## determinized formula
switch( (and($s(20) $s(6)) : $c(1)) (and(~($s(20)) $a(3)) : $c(0)) (and($s(20) $a(3)) : $c(0)) ($s(20) : $c(1)) (and(~($s(20)) ~($s(6))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(21) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(18) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(19) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(22) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(23) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(20)) )
## hash index
20
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.05 1 0.95
17 0 2 0 0.9 1 0.1
18 1 2 0 0.2 1 0.8
19 1 2 0 0.2 1 0.8
20 1 2 0 0.05 1 0.95
21 0 2 0 0.9 1 0.1
22 1 2 0 0.2 1 0.8
23 1 2 0 0.2 1 0.8
24 1 2 0 0.05 1 0.95
25 0 2 0 0.9 1 0.1
26 1 2 0 0.2 1 0.8
27 1 2 0 0.2 1 0.8
28 1 2 0 0.05 1 0.95
29 0 2 0 0.9 1 0.1
30 1 2 0 0.2 1 0.8
31 1 2 0 0.2 1 0.8
32 1 2 0 0.36 1 0.64
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 1 2 0 0.144 1 0.856
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 2 0 0.144 1 0.856
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 1 2 0 0.0576000000000001 1 0.9424
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.05 1 0.95
81 0 2 0 0.9 1 0.1
82 1 2 0 0.2 1 0.8
83 1 2 0 0.2 1 0.8
84 1 2 0 0.05 1 0.95
85 0 2 0 0.9 1 0.1
86 1 2 0 0.2 1 0.8
87 1 2 0 0.2 1 0.8
88 1 2 0 0.05 1 0.95
89 0 2 0 0.9 1 0.1
90 1 2 0 0.2 1 0.8
91 1 2 0 0.2 1 0.8
92 1 2 0 0.05 1 0.95
93 0 2 0 0.9 1 0.1
94 1 2 0 0.2 1 0.8
95 1 2 0 0.2 1 0.8
96 1 2 0 0.306 1 0.694
97 0 1 0 1
98 0 1 0 1
99 0 1 0 1
100 1 2 0 0.1224 1 0.8776
101 0 1 0 1
102 0 1 0 1
103 0 1 0 1
104 1 2 0 0.1224 1 0.8776
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 1 2 0 0.04896 1 0.95104
109 0 1 0 1
110 0 1 0 1
111 0 1 0 1
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.05 1 0.95
145 0 2 0 0.9 1 0.1
146 1 2 0 0.2 1 0.8
147 1 2 0 0.2 1 0.8
148 1 2 0 0.05 1 0.95
149 0 2 0 0.9 1 0.1
150 1 2 0 0.2 1 0.8
151 1 2 0 0.2 1 0.8
152 1 2 0 0.05 1 0.95
153 0 2 0 0.9 1 0.1
154 1 2 0 0.2 1 0.8
155 1 2 0 0.2 1 0.8
156 1 2 0 0.05 1 0.95
157 0 2 0 0.9 1 0.1
158 1 2 0 0.2 1 0.8
159 1 2 0 0.2 1 0.8
160 1 2 0 0.306 1 0.694
161 0 1 0 1
162 0 1 0 1
163 0 1 0 1
164 1 2 0 0.1224 1 0.8776
165 0 1 0 1
166 0 1 0 1
167 0 1 0 1
168 1 2 0 0.1224 1 0.8776
169 0 1 0 1
170 0 1 0 1
171 0 1 0 1
172 1 2 0 0.04896 1 0.95104
173 0 1 0 1
174 0 1 0 1
175 0 1 0 1
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.05 1 0.95
209 0 2 0 0.9 1 0.1
210 1 2 0 0.2 1 0.8
211 1 2 0 0.2 1 0.8
212 1 2 0 0.05 1 0.95
213 0 2 0 0.9 1 0.1
214 1 2 0 0.2 1 0.8
215 1 2 0 0.2 1 0.8
216 1 2 0 0.05 1 0.95
217 0 2 0 0.9 1 0.1
218 1 2 0 0.2 1 0.8
219 1 2 0 0.2 1 0.8
220 1 2 0 0.05 1 0.95
221 0 2 0 0.9 1 0.1
222 1 2 0 0.2 1 0.8
223 1 2 0 0.2 1 0.8
224 1 2 0 0.2601 1 0.7399
225 0 1 0 1
226 0 1 0 1
227 0 1 0 1
228 1 2 0 0.10404 1 0.89596
229 0 1 0 1
230 0 1 0 1
231 0 1 0 1
232 1 2 0 0.10404 1 0.89596
233 0 1 0 1
234 0 1 0 1
235 0 1 0 1
236 1 2 0 0.0416160000000001 1 0.958384
237 0 1 0 1
238 0 1 0 1
239 0 1 0 1
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 1
12 0
13 0
14 0

## index
21
## name
tamarisk-at(s4s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(21) $s(7)) : Bernoulli($c(0.8))) (and(~($s(21)) $a(3)) : $c(0)) (and($s(21) $a(3)) : Bernoulli($c(0.1))) ($s(21) : Bernoulli($c(0.95))) (and(~($s(21)) ~($s(7))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(20) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(18) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(19) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(22) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(23) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(21)) )
## determinized formula
switch( (and($s(21) $s(7)) : $c(1)) (and(~($s(21)) $a(3)) : $c(0)) (and($s(21) $a(3)) : $c(0)) ($s(21) : $c(1)) (and(~($s(21)) ~($s(7))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(20) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(18) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(19) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(22) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(23) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(21)) )
## hash index
21
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.36 1 0.64
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 1 2 0 0.144 1 0.856
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 1 2 0 0.144 1 0.856
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 1 2 0 0.0576000000000001 1 0.9424
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 1 2 0 0.05 1 0.95
33 0 2 0 0.9 1 0.1
34 1 2 0 0.2 1 0.8
35 1 2 0 0.2 1 0.8
36 1 2 0 0.05 1 0.95
37 0 2 0 0.9 1 0.1
38 1 2 0 0.2 1 0.8
39 1 2 0 0.2 1 0.8
40 1 2 0 0.05 1 0.95
41 0 2 0 0.9 1 0.1
42 1 2 0 0.2 1 0.8
43 1 2 0 0.2 1 0.8
44 1 2 0 0.05 1 0.95
45 0 2 0 0.9 1 0.1
46 1 2 0 0.2 1 0.8
47 1 2 0 0.2 1 0.8
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.306 1 0.694
81 0 1 0 1
82 0 1 0 1
83 0 1 0 1
84 1 2 0 0.1224 1 0.8776
85 0 1 0 1
86 0 1 0 1
87 0 1 0 1
88 1 2 0 0.1224 1 0.8776
89 0 1 0 1
90 0 1 0 1
91 0 1 0 1
92 1 2 0 0.04896 1 0.95104
93 0 1 0 1
94 0 1 0 1
95 0 1 0 1
96 1 2 0 0.05 1 0.95
97 0 2 0 0.9 1 0.1
98 1 2 0 0.2 1 0.8
99 1 2 0 0.2 1 0.8
100 1 2 0 0.05 1 0.95
101 0 2 0 0.9 1 0.1
102 1 2 0 0.2 1 0.8
103 1 2 0 0.2 1 0.8
104 1 2 0 0.05 1 0.95
105 0 2 0 0.9 1 0.1
106 1 2 0 0.2 1 0.8
107 1 2 0 0.2 1 0.8
108 1 2 0 0.05 1 0.95
109 0 2 0 0.9 1 0.1
110 1 2 0 0.2 1 0.8
111 1 2 0 0.2 1 0.8
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.306 1 0.694
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 1 2 0 0.1224 1 0.8776
149 0 1 0 1
150 0 1 0 1
151 0 1 0 1
152 1 2 0 0.1224 1 0.8776
153 0 1 0 1
154 0 1 0 1
155 0 1 0 1
156 1 2 0 0.04896 1 0.95104
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
160 1 2 0 0.05 1 0.95
161 0 2 0 0.9 1 0.1
162 1 2 0 0.2 1 0.8
163 1 2 0 0.2 1 0.8
164 1 2 0 0.05 1 0.95
165 0 2 0 0.9 1 0.1
166 1 2 0 0.2 1 0.8
167 1 2 0 0.2 1 0.8
168 1 2 0 0.05 1 0.95
169 0 2 0 0.9 1 0.1
170 1 2 0 0.2 1 0.8
171 1 2 0 0.2 1 0.8
172 1 2 0 0.05 1 0.95
173 0 2 0 0.9 1 0.1
174 1 2 0 0.2 1 0.8
175 1 2 0 0.2 1 0.8
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.2601 1 0.7399
209 0 1 0 1
210 0 1 0 1
211 0 1 0 1
212 1 2 0 0.10404 1 0.89596
213 0 1 0 1
214 0 1 0 1
215 0 1 0 1
216 1 2 0 0.10404 1 0.89596
217 0 1 0 1
218 0 1 0 1
219 0 1 0 1
220 1 2 0 0.0416160000000001 1 0.958384
221 0 1 0 1
222 0 1 0 1
223 0 1 0 1
224 1 2 0 0.05 1 0.95
225 0 2 0 0.9 1 0.1
226 1 2 0 0.2 1 0.8
227 1 2 0 0.2 1 0.8
228 1 2 0 0.05 1 0.95
229 0 2 0 0.9 1 0.1
230 1 2 0 0.2 1 0.8
231 1 2 0 0.2 1 0.8
232 1 2 0 0.05 1 0.95
233 0 2 0 0.9 1 0.1
234 1 2 0 0.2 1 0.8
235 1 2 0 0.2 1 0.8
236 1 2 0 0.05 1 0.95
237 0 2 0 0.9 1 0.1
238 1 2 0 0.2 1 0.8
239 1 2 0 0.2 1 0.8
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 1
12 0
13 0
14 0

## index
22
## name
tamarisk-at(s5s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(22) $s(8)) : Bernoulli($c(0.8))) (and(~($s(22)) $a(4)) : $c(0)) (and($s(22) $a(4)) : Bernoulli($c(0.1))) ($s(22) : Bernoulli($c(0.95))) (and(~($s(22)) ~($s(8))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(23) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(20) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(21) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(24) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(25) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(22)) )
## determinized formula
switch( (and($s(22) $s(8)) : $c(1)) (and(~($s(22)) $a(4)) : $c(0)) (and($s(22) $a(4)) : $c(0)) ($s(22) : $c(1)) (and(~($s(22)) ~($s(8))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(23) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(20) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(21) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(24) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(25) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(22)) )
## hash index
22
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.05 1 0.95
17 0 2 0 0.9 1 0.1
18 1 2 0 0.2 1 0.8
19 1 2 0 0.2 1 0.8
20 1 2 0 0.05 1 0.95
21 0 2 0 0.9 1 0.1
22 1 2 0 0.2 1 0.8
23 1 2 0 0.2 1 0.8
24 1 2 0 0.05 1 0.95
25 0 2 0 0.9 1 0.1
26 1 2 0 0.2 1 0.8
27 1 2 0 0.2 1 0.8
28 1 2 0 0.05 1 0.95
29 0 2 0 0.9 1 0.1
30 1 2 0 0.2 1 0.8
31 1 2 0 0.2 1 0.8
32 1 2 0 0.36 1 0.64
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 1 2 0 0.144 1 0.856
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 2 0 0.144 1 0.856
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 1 2 0 0.0576000000000001 1 0.9424
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.05 1 0.95
81 0 2 0 0.9 1 0.1
82 1 2 0 0.2 1 0.8
83 1 2 0 0.2 1 0.8
84 1 2 0 0.05 1 0.95
85 0 2 0 0.9 1 0.1
86 1 2 0 0.2 1 0.8
87 1 2 0 0.2 1 0.8
88 1 2 0 0.05 1 0.95
89 0 2 0 0.9 1 0.1
90 1 2 0 0.2 1 0.8
91 1 2 0 0.2 1 0.8
92 1 2 0 0.05 1 0.95
93 0 2 0 0.9 1 0.1
94 1 2 0 0.2 1 0.8
95 1 2 0 0.2 1 0.8
96 1 2 0 0.306 1 0.694
97 0 1 0 1
98 0 1 0 1
99 0 1 0 1
100 1 2 0 0.1224 1 0.8776
101 0 1 0 1
102 0 1 0 1
103 0 1 0 1
104 1 2 0 0.1224 1 0.8776
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 1 2 0 0.04896 1 0.95104
109 0 1 0 1
110 0 1 0 1
111 0 1 0 1
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.05 1 0.95
145 0 2 0 0.9 1 0.1
146 1 2 0 0.2 1 0.8
147 1 2 0 0.2 1 0.8
148 1 2 0 0.05 1 0.95
149 0 2 0 0.9 1 0.1
150 1 2 0 0.2 1 0.8
151 1 2 0 0.2 1 0.8
152 1 2 0 0.05 1 0.95
153 0 2 0 0.9 1 0.1
154 1 2 0 0.2 1 0.8
155 1 2 0 0.2 1 0.8
156 1 2 0 0.05 1 0.95
157 0 2 0 0.9 1 0.1
158 1 2 0 0.2 1 0.8
159 1 2 0 0.2 1 0.8
160 1 2 0 0.306 1 0.694
161 0 1 0 1
162 0 1 0 1
163 0 1 0 1
164 1 2 0 0.1224 1 0.8776
165 0 1 0 1
166 0 1 0 1
167 0 1 0 1
168 1 2 0 0.1224 1 0.8776
169 0 1 0 1
170 0 1 0 1
171 0 1 0 1
172 1 2 0 0.04896 1 0.95104
173 0 1 0 1
174 0 1 0 1
175 0 1 0 1
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.05 1 0.95
209 0 2 0 0.9 1 0.1
210 1 2 0 0.2 1 0.8
211 1 2 0 0.2 1 0.8
212 1 2 0 0.05 1 0.95
213 0 2 0 0.9 1 0.1
214 1 2 0 0.2 1 0.8
215 1 2 0 0.2 1 0.8
216 1 2 0 0.05 1 0.95
217 0 2 0 0.9 1 0.1
218 1 2 0 0.2 1 0.8
219 1 2 0 0.2 1 0.8
220 1 2 0 0.05 1 0.95
221 0 2 0 0.9 1 0.1
222 1 2 0 0.2 1 0.8
223 1 2 0 0.2 1 0.8
224 1 2 0 0.2601 1 0.7399
225 0 1 0 1
226 0 1 0 1
227 0 1 0 1
228 1 2 0 0.10404 1 0.89596
229 0 1 0 1
230 0 1 0 1
231 0 1 0 1
232 1 2 0 0.10404 1 0.89596
233 0 1 0 1
234 0 1 0 1
235 0 1 0 1
236 1 2 0 0.0416160000000001 1 0.958384
237 0 1 0 1
238 0 1 0 1
239 0 1 0 1
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 0
12 0
13 0
14 0

## index
23
## name
tamarisk-at(s5s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(23) $s(9)) : Bernoulli($c(0.8))) (and(~($s(23)) $a(4)) : $c(0)) (and($s(23) $a(4)) : Bernoulli($c(0.1))) ($s(23) : Bernoulli($c(0.95))) (and(~($s(23)) ~($s(9))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(22) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(20) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(21) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(24) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(25) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(23)) )
## determinized formula
switch( (and($s(23) $s(9)) : $c(1)) (and(~($s(23)) $a(4)) : $c(0)) (and($s(23) $a(4)) : $c(0)) ($s(23) : $c(1)) (and(~($s(23)) ~($s(9))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(22) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(20) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(21) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(24) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(25) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(23)) )
## hash index
23
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.36 1 0.64
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 1 2 0 0.144 1 0.856
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 1 2 0 0.144 1 0.856
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 1 2 0 0.0576000000000001 1 0.9424
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 1 2 0 0.05 1 0.95
33 0 2 0 0.9 1 0.1
34 1 2 0 0.2 1 0.8
35 1 2 0 0.2 1 0.8
36 1 2 0 0.05 1 0.95
37 0 2 0 0.9 1 0.1
38 1 2 0 0.2 1 0.8
39 1 2 0 0.2 1 0.8
40 1 2 0 0.05 1 0.95
41 0 2 0 0.9 1 0.1
42 1 2 0 0.2 1 0.8
43 1 2 0 0.2 1 0.8
44 1 2 0 0.05 1 0.95
45 0 2 0 0.9 1 0.1
46 1 2 0 0.2 1 0.8
47 1 2 0 0.2 1 0.8
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.306 1 0.694
81 0 1 0 1
82 0 1 0 1
83 0 1 0 1
84 1 2 0 0.1224 1 0.8776
85 0 1 0 1
86 0 1 0 1
87 0 1 0 1
88 1 2 0 0.1224 1 0.8776
89 0 1 0 1
90 0 1 0 1
91 0 1 0 1
92 1 2 0 0.04896 1 0.95104
93 0 1 0 1
94 0 1 0 1
95 0 1 0 1
96 1 2 0 0.05 1 0.95
97 0 2 0 0.9 1 0.1
98 1 2 0 0.2 1 0.8
99 1 2 0 0.2 1 0.8
100 1 2 0 0.05 1 0.95
101 0 2 0 0.9 1 0.1
102 1 2 0 0.2 1 0.8
103 1 2 0 0.2 1 0.8
104 1 2 0 0.05 1 0.95
105 0 2 0 0.9 1 0.1
106 1 2 0 0.2 1 0.8
107 1 2 0 0.2 1 0.8
108 1 2 0 0.05 1 0.95
109 0 2 0 0.9 1 0.1
110 1 2 0 0.2 1 0.8
111 1 2 0 0.2 1 0.8
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.306 1 0.694
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 1 2 0 0.1224 1 0.8776
149 0 1 0 1
150 0 1 0 1
151 0 1 0 1
152 1 2 0 0.1224 1 0.8776
153 0 1 0 1
154 0 1 0 1
155 0 1 0 1
156 1 2 0 0.04896 1 0.95104
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
160 1 2 0 0.05 1 0.95
161 0 2 0 0.9 1 0.1
162 1 2 0 0.2 1 0.8
163 1 2 0 0.2 1 0.8
164 1 2 0 0.05 1 0.95
165 0 2 0 0.9 1 0.1
166 1 2 0 0.2 1 0.8
167 1 2 0 0.2 1 0.8
168 1 2 0 0.05 1 0.95
169 0 2 0 0.9 1 0.1
170 1 2 0 0.2 1 0.8
171 1 2 0 0.2 1 0.8
172 1 2 0 0.05 1 0.95
173 0 2 0 0.9 1 0.1
174 1 2 0 0.2 1 0.8
175 1 2 0 0.2 1 0.8
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.2601 1 0.7399
209 0 1 0 1
210 0 1 0 1
211 0 1 0 1
212 1 2 0 0.10404 1 0.89596
213 0 1 0 1
214 0 1 0 1
215 0 1 0 1
216 1 2 0 0.10404 1 0.89596
217 0 1 0 1
218 0 1 0 1
219 0 1 0 1
220 1 2 0 0.0416160000000001 1 0.958384
221 0 1 0 1
222 0 1 0 1
223 0 1 0 1
224 1 2 0 0.05 1 0.95
225 0 2 0 0.9 1 0.1
226 1 2 0 0.2 1 0.8
227 1 2 0 0.2 1 0.8
228 1 2 0 0.05 1 0.95
229 0 2 0 0.9 1 0.1
230 1 2 0 0.2 1 0.8
231 1 2 0 0.2 1 0.8
232 1 2 0 0.05 1 0.95
233 0 2 0 0.9 1 0.1
234 1 2 0 0.2 1 0.8
235 1 2 0 0.2 1 0.8
236 1 2 0 0.05 1 0.95
237 0 2 0 0.9 1 0.1
238 1 2 0 0.2 1 0.8
239 1 2 0 0.2 1 0.8
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 0
12 0
13 0
14 0

## index
24
## name
tamarisk-at(s6s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(24) $s(10)) : Bernoulli($c(0.8))) (and(~($s(24)) $a(5)) : $c(0)) (and($s(24) $a(5)) : Bernoulli($c(0.1))) ($s(24) : Bernoulli($c(0.95))) (and(~($s(24)) ~($s(10))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(25) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(22) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(23) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(26) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(27) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(24)) )
## determinized formula
switch( (and($s(24) $s(10)) : $c(1)) (and(~($s(24)) $a(5)) : $c(0)) (and($s(24) $a(5)) : $c(0)) ($s(24) : $c(1)) (and(~($s(24)) ~($s(10))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(25) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(22) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(23) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(26) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(27) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(24)) )
## hash index
24
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.05 1 0.95
17 0 2 0 0.9 1 0.1
18 1 2 0 0.2 1 0.8
19 1 2 0 0.2 1 0.8
20 1 2 0 0.05 1 0.95
21 0 2 0 0.9 1 0.1
22 1 2 0 0.2 1 0.8
23 1 2 0 0.2 1 0.8
24 1 2 0 0.05 1 0.95
25 0 2 0 0.9 1 0.1
26 1 2 0 0.2 1 0.8
27 1 2 0 0.2 1 0.8
28 1 2 0 0.05 1 0.95
29 0 2 0 0.9 1 0.1
30 1 2 0 0.2 1 0.8
31 1 2 0 0.2 1 0.8
32 1 2 0 0.36 1 0.64
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 1 2 0 0.144 1 0.856
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 2 0 0.144 1 0.856
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 1 2 0 0.0576000000000001 1 0.9424
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.05 1 0.95
81 0 2 0 0.9 1 0.1
82 1 2 0 0.2 1 0.8
83 1 2 0 0.2 1 0.8
84 1 2 0 0.05 1 0.95
85 0 2 0 0.9 1 0.1
86 1 2 0 0.2 1 0.8
87 1 2 0 0.2 1 0.8
88 1 2 0 0.05 1 0.95
89 0 2 0 0.9 1 0.1
90 1 2 0 0.2 1 0.8
91 1 2 0 0.2 1 0.8
92 1 2 0 0.05 1 0.95
93 0 2 0 0.9 1 0.1
94 1 2 0 0.2 1 0.8
95 1 2 0 0.2 1 0.8
96 1 2 0 0.306 1 0.694
97 0 1 0 1
98 0 1 0 1
99 0 1 0 1
100 1 2 0 0.1224 1 0.8776
101 0 1 0 1
102 0 1 0 1
103 0 1 0 1
104 1 2 0 0.1224 1 0.8776
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 1 2 0 0.04896 1 0.95104
109 0 1 0 1
110 0 1 0 1
111 0 1 0 1
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.05 1 0.95
145 0 2 0 0.9 1 0.1
146 1 2 0 0.2 1 0.8
147 1 2 0 0.2 1 0.8
148 1 2 0 0.05 1 0.95
149 0 2 0 0.9 1 0.1
150 1 2 0 0.2 1 0.8
151 1 2 0 0.2 1 0.8
152 1 2 0 0.05 1 0.95
153 0 2 0 0.9 1 0.1
154 1 2 0 0.2 1 0.8
155 1 2 0 0.2 1 0.8
156 1 2 0 0.05 1 0.95
157 0 2 0 0.9 1 0.1
158 1 2 0 0.2 1 0.8
159 1 2 0 0.2 1 0.8
160 1 2 0 0.306 1 0.694
161 0 1 0 1
162 0 1 0 1
163 0 1 0 1
164 1 2 0 0.1224 1 0.8776
165 0 1 0 1
166 0 1 0 1
167 0 1 0 1
168 1 2 0 0.1224 1 0.8776
169 0 1 0 1
170 0 1 0 1
171 0 1 0 1
172 1 2 0 0.04896 1 0.95104
173 0 1 0 1
174 0 1 0 1
175 0 1 0 1
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.05 1 0.95
209 0 2 0 0.9 1 0.1
210 1 2 0 0.2 1 0.8
211 1 2 0 0.2 1 0.8
212 1 2 0 0.05 1 0.95
213 0 2 0 0.9 1 0.1
214 1 2 0 0.2 1 0.8
215 1 2 0 0.2 1 0.8
216 1 2 0 0.05 1 0.95
217 0 2 0 0.9 1 0.1
218 1 2 0 0.2 1 0.8
219 1 2 0 0.2 1 0.8
220 1 2 0 0.05 1 0.95
221 0 2 0 0.9 1 0.1
222 1 2 0 0.2 1 0.8
223 1 2 0 0.2 1 0.8
224 1 2 0 0.2601 1 0.7399
225 0 1 0 1
226 0 1 0 1
227 0 1 0 1
228 1 2 0 0.10404 1 0.89596
229 0 1 0 1
230 0 1 0 1
231 0 1 0 1
232 1 2 0 0.10404 1 0.89596
233 0 1 0 1
234 0 1 0 1
235 0 1 0 1
236 1 2 0 0.0416160000000001 1 0.958384
237 0 1 0 1
238 0 1 0 1
239 0 1 0 1
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 0
11 0
12 0
13 0
14 0

## index
25
## name
tamarisk-at(s6s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(25) $s(11)) : Bernoulli($c(0.8))) (and(~($s(25)) $a(5)) : $c(0)) (and($s(25) $a(5)) : Bernoulli($c(0.1))) ($s(25) : Bernoulli($c(0.95))) (and(~($s(25)) ~($s(11))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(24) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(22) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(23) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(26) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(27) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(25)) )
## determinized formula
switch( (and($s(25) $s(11)) : $c(1)) (and(~($s(25)) $a(5)) : $c(0)) (and($s(25) $a(5)) : $c(0)) ($s(25) : $c(1)) (and(~($s(25)) ~($s(11))) : <=($c(0.5) +(*(-($c(1) *(*(switch( ($s(24) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(22) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(23) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(26) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(27) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(25)) )
## hash index
25
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.36 1 0.64
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 1 2 0 0.144 1 0.856
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 1 2 0 0.144 1 0.856
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 1 2 0 0.0576000000000001 1 0.9424
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 1 2 0 0.05 1 0.95
33 0 2 0 0.9 1 0.1
34 1 2 0 0.2 1 0.8
35 1 2 0 0.2 1 0.8
36 1 2 0 0.05 1 0.95
37 0 2 0 0.9 1 0.1
38 1 2 0 0.2 1 0.8
39 1 2 0 0.2 1 0.8
40 1 2 0 0.05 1 0.95
41 0 2 0 0.9 1 0.1
42 1 2 0 0.2 1 0.8
43 1 2 0 0.2 1 0.8
44 1 2 0 0.05 1 0.95
45 0 2 0 0.9 1 0.1
46 1 2 0 0.2 1 0.8
47 1 2 0 0.2 1 0.8
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
64 0 2 0 0.765 1 0.235
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 1 2 0 0.306 1 0.694
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 1 2 0 0.306 1 0.694
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 1 2 0 0.1224 1 0.8776
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 2 0 0.306 1 0.694
81 0 1 0 1
82 0 1 0 1
83 0 1 0 1
84 1 2 0 0.1224 1 0.8776
85 0 1 0 1
86 0 1 0 1
87 0 1 0 1
88 1 2 0 0.1224 1 0.8776
89 0 1 0 1
90 0 1 0 1
91 0 1 0 1
92 1 2 0 0.04896 1 0.95104
93 0 1 0 1
94 0 1 0 1
95 0 1 0 1
96 1 2 0 0.05 1 0.95
97 0 2 0 0.9 1 0.1
98 1 2 0 0.2 1 0.8
99 1 2 0 0.2 1 0.8
100 1 2 0 0.05 1 0.95
101 0 2 0 0.9 1 0.1
102 1 2 0 0.2 1 0.8
103 1 2 0 0.2 1 0.8
104 1 2 0 0.05 1 0.95
105 0 2 0 0.9 1 0.1
106 1 2 0 0.2 1 0.8
107 1 2 0 0.2 1 0.8
108 1 2 0 0.05 1 0.95
109 0 2 0 0.9 1 0.1
110 1 2 0 0.2 1 0.8
111 1 2 0 0.2 1 0.8
112 1 2 0 0.05 1 0.95
113 0 2 0 0.9 1 0.1
114 1 2 0 0.2 1 0.8
115 1 2 0 0.2 1 0.8
116 1 2 0 0.05 1 0.95
117 0 2 0 0.9 1 0.1
118 1 2 0 0.2 1 0.8
119 1 2 0 0.2 1 0.8
120 1 2 0 0.05 1 0.95
121 0 2 0 0.9 1 0.1
122 1 2 0 0.2 1 0.8
123 1 2 0 0.2 1 0.8
124 1 2 0 0.05 1 0.95
125 0 2 0 0.9 1 0.1
126 1 2 0 0.2 1 0.8
127 1 2 0 0.2 1 0.8
128 0 2 0 0.765 1 0.235
129 0 1 0 1
130 0 1 0 1
131 0 1 0 1
132 1 2 0 0.306 1 0.694
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 1 2 0 0.306 1 0.694
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 2 0 0.1224 1 0.8776
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 1 2 0 0.306 1 0.694
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 1 2 0 0.1224 1 0.8776
149 0 1 0 1
150 0 1 0 1
151 0 1 0 1
152 1 2 0 0.1224 1 0.8776
153 0 1 0 1
154 0 1 0 1
155 0 1 0 1
156 1 2 0 0.04896 1 0.95104
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
160 1 2 0 0.05 1 0.95
161 0 2 0 0.9 1 0.1
162 1 2 0 0.2 1 0.8
163 1 2 0 0.2 1 0.8
164 1 2 0 0.05 1 0.95
165 0 2 0 0.9 1 0.1
166 1 2 0 0.2 1 0.8
167 1 2 0 0.2 1 0.8
168 1 2 0 0.05 1 0.95
169 0 2 0 0.9 1 0.1
170 1 2 0 0.2 1 0.8
171 1 2 0 0.2 1 0.8
172 1 2 0 0.05 1 0.95
173 0 2 0 0.9 1 0.1
174 1 2 0 0.2 1 0.8
175 1 2 0 0.2 1 0.8
176 1 2 0 0.05 1 0.95
177 0 2 0 0.9 1 0.1
178 1 2 0 0.2 1 0.8
179 1 2 0 0.2 1 0.8
180 1 2 0 0.05 1 0.95
181 0 2 0 0.9 1 0.1
182 1 2 0 0.2 1 0.8
183 1 2 0 0.2 1 0.8
184 1 2 0 0.05 1 0.95
185 0 2 0 0.9 1 0.1
186 1 2 0 0.2 1 0.8
187 1 2 0 0.2 1 0.8
188 1 2 0 0.05 1 0.95
189 0 2 0 0.9 1 0.1
190 1 2 0 0.2 1 0.8
191 1 2 0 0.2 1 0.8
192 0 2 0 0.65025 1 0.34975
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 1 2 0 0.2601 1 0.7399
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 2 0 0.2601 1 0.7399
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 1 2 0 0.10404 1 0.89596
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 1 2 0 0.2601 1 0.7399
209 0 1 0 1
210 0 1 0 1
211 0 1 0 1
212 1 2 0 0.10404 1 0.89596
213 0 1 0 1
214 0 1 0 1
215 0 1 0 1
216 1 2 0 0.10404 1 0.89596
217 0 1 0 1
218 0 1 0 1
219 0 1 0 1
220 1 2 0 0.0416160000000001 1 0.958384
221 0 1 0 1
222 0 1 0 1
223 0 1 0 1
224 1 2 0 0.05 1 0.95
225 0 2 0 0.9 1 0.1
226 1 2 0 0.2 1 0.8
227 1 2 0 0.2 1 0.8
228 1 2 0 0.05 1 0.95
229 0 2 0 0.9 1 0.1
230 1 2 0 0.2 1 0.8
231 1 2 0 0.2 1 0.8
232 1 2 0 0.05 1 0.95
233 0 2 0 0.9 1 0.1
234 1 2 0 0.2 1 0.8
235 1 2 0 0.2 1 0.8
236 1 2 0 0.05 1 0.95
237 0 2 0 0.9 1 0.1
238 1 2 0 0.2 1 0.8
239 1 2 0 0.2 1 0.8
240 1 2 0 0.05 1 0.95
241 0 2 0 0.9 1 0.1
242 1 2 0 0.2 1 0.8
243 1 2 0 0.2 1 0.8
244 1 2 0 0.05 1 0.95
245 0 2 0 0.9 1 0.1
246 1 2 0 0.2 1 0.8
247 1 2 0 0.2 1 0.8
248 1 2 0 0.05 1 0.95
249 0 2 0 0.9 1 0.1
250 1 2 0 0.2 1 0.8
251 1 2 0 0.2 1 0.8
252 1 2 0 0.05 1 0.95
253 0 2 0 0.9 1 0.1
254 1 2 0 0.2 1 0.8
255 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 0
11 0
12 0
13 0
14 0

## index
26
## name
tamarisk-at(s7s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(26) $s(12)) : Bernoulli($c(0.8))) (and(~($s(26)) $a(6)) : $c(0)) (and($s(26) $a(6)) : Bernoulli($c(0.1))) ($s(26) : Bernoulli($c(0.95))) (and(~($s(26)) ~($s(12))) : Bernoulli(+(*(-($c(1) *(switch( ($s(27) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(24) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(25) : $c(0.4)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(26)) )
## determinized formula
switch( (and($s(26) $s(12)) : $c(1)) (and(~($s(26)) $a(6)) : $c(0)) (and($s(26) $a(6)) : $c(0)) ($s(26) : $c(1)) (and(~($s(26)) ~($s(12))) : <=($c(0.5) +(*(-($c(1) *(switch( ($s(27) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(24) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(25) : $c(0.4)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(26)) )
## hash index
26
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.05 1 0.95
17 0 2 0 0.9 1 0.1
18 1 2 0 0.2 1 0.8
19 1 2 0 0.2 1 0.8
20 1 2 0 0.05 1 0.95
21 0 2 0 0.9 1 0.1
22 1 2 0 0.2 1 0.8
23 1 2 0 0.2 1 0.8
24 1 2 0 0.05 1 0.95
25 0 2 0 0.9 1 0.1
26 1 2 0 0.2 1 0.8
27 1 2 0 0.2 1 0.8
28 1 2 0 0.05 1 0.95
29 0 2 0 0.9 1 0.1
30 1 2 0 0.2 1 0.8
31 1 2 0 0.2 1 0.8
32 1 2 0 0.36 1 0.64
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 1 2 0 0.144 1 0.856
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 2 0 0.144 1 0.856
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 1 2 0 0.0576000000000001 1 0.9424
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1
9 0
10 0
11 0
12 0
13 0
14 0

## index
27
## name
tamarisk-at(s7s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(27) $s(13)) : Bernoulli($c(0.8))) (and(~($s(27)) $a(6)) : $c(0)) (and($s(27) $a(6)) : Bernoulli($c(0.1))) ($s(27) : Bernoulli($c(0.95))) (and(~($s(27)) ~($s(13))) : Bernoulli(+(*(-($c(1) *(switch( ($s(26) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(24) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(25) : $c(0.4)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(27)) )
## determinized formula
switch( (and($s(27) $s(13)) : $c(1)) (and(~($s(27)) $a(6)) : $c(0)) (and($s(27) $a(6)) : $c(0)) ($s(27) : $c(1)) (and(~($s(27)) ~($s(13))) : <=($c(0.5) +(*(-($c(1) *(switch( ($s(26) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(24) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(25) : $c(0.4)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(27)) )
## hash index
27
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.9 1 0.1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 1 2 0 0.36 1 0.64
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.36 1 0.64
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.144 1 0.856
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 1 2 0 0.36 1 0.64
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 1 2 0 0.144 1 0.856
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 1 2 0 0.144 1 0.856
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 1 2 0 0.0576000000000001 1 0.9424
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 1 2 0 0.05 1 0.95
33 0 2 0 0.9 1 0.1
34 1 2 0 0.2 1 0.8
35 1 2 0 0.2 1 0.8
36 1 2 0 0.05 1 0.95
37 0 2 0 0.9 1 0.1
38 1 2 0 0.2 1 0.8
39 1 2 0 0.2 1 0.8
40 1 2 0 0.05 1 0.95
41 0 2 0 0.9 1 0.1
42 1 2 0 0.2 1 0.8
43 1 2 0 0.2 1 0.8
44 1 2 0 0.05 1 0.95
45 0 2 0 0.9 1 0.1
46 1 2 0 0.2 1 0.8
47 1 2 0 0.2 1 0.8
48 1 2 0 0.05 1 0.95
49 0 2 0 0.9 1 0.1
50 1 2 0 0.2 1 0.8
51 1 2 0 0.2 1 0.8
52 1 2 0 0.05 1 0.95
53 0 2 0 0.9 1 0.1
54 1 2 0 0.2 1 0.8
55 1 2 0 0.2 1 0.8
56 1 2 0 0.05 1 0.95
57 0 2 0 0.9 1 0.1
58 1 2 0 0.2 1 0.8
59 1 2 0 0.2 1 0.8
60 1 2 0 0.05 1 0.95
61 0 2 0 0.9 1 0.1
62 1 2 0 0.2 1 0.8
63 1 2 0 0.2 1 0.8
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1
9 0
10 0
11 0
12 0
13 0
14 0



#####REWARD#####
## formula
+(*(or($s(14) $s(15)) $c(-5)) *(or($s(16) $s(17)) $c(-5)) *(or($s(18) $s(19)) $c(-5)) *(or($s(20) $s(21)) $c(-5)) *(or($s(22) $s(23)) $c(-5)) *(or($s(24) $s(25)) $c(-5)) *(or($s(26) $s(27)) $c(-5)) *($s(14) $c(-0.5)) *($s(15) $c(-0.5)) *($s(16) $c(-0.5)) *($s(17) $c(-0.5)) *($s(18) $c(-0.5)) *($s(19) $c(-0.5)) *($s(20) $c(-0.5)) *($s(21) $c(-0.5)) *($s(22) $c(-0.5)) *($s(23) $c(-0.5)) *($s(24) $c(-0.5)) *($s(25) $c(-0.5)) *($s(26) $c(-0.5)) *($s(27) $c(-0.5)) *(and(~($s(14)) ~($s(0))) $c(-0.25)) *(and(~($s(15)) ~($s(1))) $c(-0.25)) *(and(~($s(16)) ~($s(2))) $c(-0.25)) *(and(~($s(17)) ~($s(3))) $c(-0.25)) *(and(~($s(18)) ~($s(4))) $c(-0.25)) *(and(~($s(19)) ~($s(5))) $c(-0.25)) *(and(~($s(20)) ~($s(6))) $c(-0.25)) *(and(~($s(21)) ~($s(7))) $c(-0.25)) *(and(~($s(22)) ~($s(8))) $c(-0.25)) *(and(~($s(23)) ~($s(9))) $c(-0.25)) *(and(~($s(24)) ~($s(10))) $c(-0.25)) *(and(~($s(25)) ~($s(11))) $c(-0.25)) *(and(~($s(26)) ~($s(12))) $c(-0.25)) *(and(~($s(27)) ~($s(13))) $c(-0.25)) *($a(0) $c(-0.49)) *($a(1) $c(-0.49)) *($a(2) $c(-0.49)) *($a(3) $c(-0.49)) *($a(4) $c(-0.49)) *($a(5) $c(-0.49)) *($a(6) $c(-0.49)) *($a(7) $c(-0.9)) *($a(8) $c(-0.9)) *($a(9) $c(-0.9)) *($a(10) $c(-0.9)) *($a(11) $c(-0.9)) *($a(12) $c(-0.9)) *($a(13) $c(-0.9)) *(and($a(7) ~($s(14)) ~($s(0))) $c(-0.4)) *(and($a(7) ~($s(15)) ~($s(1))) $c(-0.4)) *(and($a(8) ~($s(16)) ~($s(2))) $c(-0.4)) *(and($a(8) ~($s(17)) ~($s(3))) $c(-0.4)) *(and($a(9) ~($s(18)) ~($s(4))) $c(-0.4)) *(and($a(9) ~($s(19)) ~($s(5))) $c(-0.4)) *(and($a(10) ~($s(20)) ~($s(6))) $c(-0.4)) *(and($a(10) ~($s(21)) ~($s(7))) $c(-0.4)) *(and($a(11) ~($s(22)) ~($s(8))) $c(-0.4)) *(and($a(11) ~($s(23)) ~($s(9))) $c(-0.4)) *(and($a(12) ~($s(24)) ~($s(10))) $c(-0.4)) *(and($a(12) ~($s(25)) ~($s(11))) $c(-0.4)) *(and($a(13) ~($s(26)) ~($s(12))) $c(-0.4)) *(and($a(13) ~($s(27)) ~($s(13))) $c(-0.4)))
## min
-47.2
## max
180.505
## independent from actions
0
## hash index
28
## caching type
MAP
## kleene caching type
MAP
## action hash keys
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
11 11
12 12
13 13
14 14


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 0 0 0 0 0 0 0 0 0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 0 0 0 0 0 0 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
4
## state
0 0 0 0 0 0 0 0 0 0 1 0 0 0 
## relevant preconditions
0


## index
5
## state
0 0 0 0 0 0 0 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
6
## state
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
## relevant preconditions
0


## index
7
## state
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
## relevant preconditions
0


## index
8
## state
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
9
## state
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
10
## state
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
11
## state
0 0 0 1 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
12
## state
0 0 1 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
13
## state
0 1 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
14
## state
1 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####

#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
3
0 2
14 2
28 15
## kleene state fluent hash keys (first line is the number of keys)
3
0 2
14 2
28 15

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
3
1 2
15 2
28 30
## kleene state fluent hash keys (first line is the number of keys)
3
1 2
15 2
28 45

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
3
2 2
16 2
28 60
## kleene state fluent hash keys (first line is the number of keys)
3
2 2
16 2
28 135

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
3
3 2
17 2
28 120
## kleene state fluent hash keys (first line is the number of keys)
3
3 2
17 2
28 405

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
3
4 2
18 2
28 240
## kleene state fluent hash keys (first line is the number of keys)
3
4 2
18 2
28 1215

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
3
5 2
19 2
28 480
## kleene state fluent hash keys (first line is the number of keys)
3
5 2
19 2
28 3645

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
3
6 2
20 2
28 960
## kleene state fluent hash keys (first line is the number of keys)
3
6 2
20 2
28 10935

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
3
7 2
21 2
28 1920
## kleene state fluent hash keys (first line is the number of keys)
3
7 2
21 2
28 32805

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
3
8 2
22 2
28 3840
## kleene state fluent hash keys (first line is the number of keys)
3
8 2
22 2
28 98415

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
3
9 2
23 2
28 7680
## kleene state fluent hash keys (first line is the number of keys)
3
9 2
23 2
28 295245

## index
10
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
3
10 2
24 2
28 15360
## kleene state fluent hash keys (first line is the number of keys)
3
10 2
24 2
28 885735

## index
11
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
3
11 2
25 2
28 30720
## kleene state fluent hash keys (first line is the number of keys)
3
11 2
25 2
28 2657205

## index
12
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
531441
## state fluent hash keys (first line is the number of keys)
3
12 2
26 2
28 61440
## kleene state fluent hash keys (first line is the number of keys)
3
12 2
26 2
28 7971615

## index
13
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
1594323
## state fluent hash keys (first line is the number of keys)
3
13 2
27 2
28 122880
## kleene state fluent hash keys (first line is the number of keys)
3
13 2
27 2
28 23914845

## index
14
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
4782969
## state fluent hash keys (first line is the number of keys)
6
0 4
14 4
15 4
16 4
17 4
28 245760
## kleene state fluent hash keys (first line is the number of keys)
6
0 6
14 6
15 6
16 6
17 6
28 71744535

## index
15
## state hash key (for each value in the domain)
0 32768
## kleene state hash key base
14348907
## state fluent hash keys (first line is the number of keys)
6
1 4
14 8
15 8
16 8
17 8
28 491520
## kleene state fluent hash keys (first line is the number of keys)
6
1 6
14 18
15 18
16 18
17 18
28 215233605

## index
16
## state hash key (for each value in the domain)
0 65536
## kleene state hash key base
43046721
## state fluent hash keys (first line is the number of keys)
8
2 4
14 16
15 16
16 16
17 16
18 4
19 4
28 983040
## kleene state fluent hash keys (first line is the number of keys)
8
2 6
14 54
15 54
16 54
17 54
18 6
19 6
28 645700815

## index
17
## state hash key (for each value in the domain)
0 131072
## kleene state hash key base
129140163
## state fluent hash keys (first line is the number of keys)
8
3 4
14 32
15 32
16 32
17 32
18 8
19 8
28 1966080
## kleene state fluent hash keys (first line is the number of keys)
8
3 6
14 162
15 162
16 162
17 162
18 18
19 18
28 1937102445

## index
18
## state hash key (for each value in the domain)
0 262144
## kleene state hash key base
387420489
## state fluent hash keys (first line is the number of keys)
8
4 4
16 64
17 64
18 16
19 16
20 4
21 4
28 3932160
## kleene state fluent hash keys (first line is the number of keys)
8
4 6
16 486
17 486
18 54
19 54
20 6
21 6
28 5811307335

## index
19
## state hash key (for each value in the domain)
0 524288
## kleene state hash key base
1162261467
## state fluent hash keys (first line is the number of keys)
8
5 4
16 128
17 128
18 32
19 32
20 8
21 8
28 7864320
## kleene state fluent hash keys (first line is the number of keys)
8
5 6
16 1458
17 1458
18 162
19 162
20 18
21 18
28 17433922005

## index
20
## state hash key (for each value in the domain)
0 1048576
## kleene state hash key base
3486784401
## state fluent hash keys (first line is the number of keys)
8
6 4
18 64
19 64
20 16
21 16
22 4
23 4
28 15728640
## kleene state fluent hash keys (first line is the number of keys)
8
6 6
18 486
19 486
20 54
21 54
22 6
23 6
28 52301766015

## index
21
## state hash key (for each value in the domain)
0 2097152
## kleene state hash key base
10460353203
## state fluent hash keys (first line is the number of keys)
8
7 4
18 128
19 128
20 32
21 32
22 8
23 8
28 31457280
## kleene state fluent hash keys (first line is the number of keys)
8
7 6
18 1458
19 1458
20 162
21 162
22 18
23 18
28 156905298045

## index
22
## state hash key (for each value in the domain)
0 4194304
## kleene state hash key base
31381059609
## state fluent hash keys (first line is the number of keys)
8
8 4
20 64
21 64
22 16
23 16
24 4
25 4
28 62914560
## kleene state fluent hash keys (first line is the number of keys)
8
8 6
20 486
21 486
22 54
23 54
24 6
25 6
28 470715894135

## index
23
## state hash key (for each value in the domain)
0 8388608
## kleene state hash key base
94143178827
## state fluent hash keys (first line is the number of keys)
8
9 4
20 128
21 128
22 32
23 32
24 8
25 8
28 125829120
## kleene state fluent hash keys (first line is the number of keys)
8
9 6
20 1458
21 1458
22 162
23 162
24 18
25 18
28 1412147682405

## index
24
## state hash key (for each value in the domain)
0 16777216
## kleene state hash key base
282429536481
## state fluent hash keys (first line is the number of keys)
8
10 4
22 64
23 64
24 16
25 16
26 4
27 4
28 251658240
## kleene state fluent hash keys (first line is the number of keys)
8
10 6
22 486
23 486
24 54
25 54
26 6
27 6
28 4236443047215

## index
25
## state hash key (for each value in the domain)
0 33554432
## kleene state hash key base
847288609443
## state fluent hash keys (first line is the number of keys)
8
11 4
22 128
23 128
24 32
25 32
26 8
27 8
28 503316480
## kleene state fluent hash keys (first line is the number of keys)
8
11 6
22 1458
23 1458
24 162
25 162
26 18
27 18
28 12709329141645

## index
26
## state hash key (for each value in the domain)
0 67108864
## kleene state hash key base
2541865828329
## state fluent hash keys (first line is the number of keys)
6
12 4
24 64
25 64
26 16
27 16
28 1006632960
## kleene state fluent hash keys (first line is the number of keys)
6
12 6
24 486
25 486
26 54
27 54
28 38127987424935

## index
27
## state hash key (for each value in the domain)
0 134217728
## kleene state hash key base
7625597484987
## state fluent hash keys (first line is the number of keys)
6
13 4
24 128
25 128
26 32
27 32
28 2013265920
## kleene state fluent hash keys (first line is the number of keys)
6
13 6
24 1458
25 1458
26 162
27 162
28 114383962274805



#####TRAINING SET#####
200
1 1 0 0 1 0 1 0 1 1 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 0 0 1 0 0 0 0 0 0 
1 1 0 0 1 0 1 0 1 1 1 0 1 0 0 0 1 1 0 1 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 0 0 0 0 0 
0 1 0 0 0 0 1 0 1 1 1 1 1 1 0 0 0 1 1 1 0 1 0 0 0 0 0 0 
1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 
1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 
1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1 0 1 1 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 1 1 1 1 0 1 1 0 0 1 0 1 1 1 0 0 0 0 
1 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0 0 0 
0 1 0 0 1 0 0 0 0 0 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 0 0 0 
1 1 0 0 0 0 1 0 1 1 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 0 0 
1 1 0 1 0 0 1 0 1 1 0 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 0 0 
1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 1 0 1 0 1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 
1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 1 0 0 0 0 0 1 0 0 
1 1 0 0 0 0 0 1 0 1 1 0 1 1 1 0 1 1 1 1 1 0 1 0 0 1 0 0 
0 0 0 0 1 0 0 0 0 1 0 1 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 0 
0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 0 0 
0 1 0 0 0 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 0 
0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 1 0 1 0 1 0 0 
1 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 0 
0 1 0 0 0 0 1 1 0 1 0 0 1 1 1 0 1 1 1 1 0 0 0 0 1 1 0 0 
0 0 1 0 1 0 1 0 0 1 0 0 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 0 
0 0 0 0 0 1 1 0 1 1 0 0 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 1 0 1 0 0 1 1 0 0 
1 1 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 0 0 
1 1 0 0 0 0 1 0 1 1 0 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 0 0 
0 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 1 0 0 
0 1 0 1 0 0 1 0 0 0 0 0 0 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 
0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 
1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 1 0 1 0 0 1 1 0 1 1 0 0 
0 1 0 0 1 0 1 0 0 1 0 0 0 1 1 0 1 1 0 1 0 1 1 0 1 1 0 0 
0 1 0 0 0 1 1 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 
0 1 0 0 0 0 1 0 0 1 1 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 1 1 0 1 1 0 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 1 1 1 0 1 1 0 1 1 0 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 0 0 
1 0 0 0 0 0 0 0 1 0 0 1 1 1 0 1 1 0 1 1 0 0 0 1 1 1 0 0 
0 0 0 0 0 0 1 0 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 1 1 1 0 0 
1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 1 1 1 0 0 
1 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 1 1 1 0 0 
0 1 0 0 0 0 1 0 0 0 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 0 
0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 0 
1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 
0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 0 0 1 0 
0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 1 1 1 1 0 0 0 1 0 
0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 0 0 1 0 
0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 1 1 0 1 1 1 0 0 1 0 
1 1 0 0 1 0 1 1 1 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 1 0 1 0 
1 1 1 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 1 0 1 0 1 0 
0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 1 1 1 0 0 1 0 1 0 1 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 1 0 
1 1 0 0 1 1 0 0 0 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 1 0 1 0 
0 0 0 1 0 0 1 1 0 0 0 0 0 1 1 1 1 0 0 1 0 1 1 1 1 0 1 0 
1 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 0 0 0 1 1 0 
0 1 0 0 0 0 1 0 1 1 0 0 0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 
0 1 1 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 1 1 0 
0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1 1 0 0 1 1 0 
0 0 0 0 0 0 1 0 0 1 1 0 0 1 1 0 1 1 1 1 0 1 1 0 0 1 1 0 
0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 1 1 0 
0 1 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 0 1 1 1 1 1 0 0 1 1 0 
1 1 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 1 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 
1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 1 1 1 1 0 0 0 0 1 1 1 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 1 0 0 1 1 0 0 0 1 0 0 1 0 0 1 1 1 0 
1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 1 0 1 1 0 1 0 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 1 1 0 1 0 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 1 1 0 1 0 0 1 1 1 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 0 
1 0 0 1 0 0 1 0 1 1 0 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 
0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 
1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 1 0 
1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 0 0 1 1 1 0 
1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 1 1 0 0 1 1 1 0 
1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 1 1 0 0 1 1 1 0 
1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0 1 1 1 0 
1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 0 
1 1 1 0 0 0 1 1 0 1 0 0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 
0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 1 1 0 0 1 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 1 0 0 1 0 1 1 1 0 
0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 1 0 
0 1 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 1 0 
0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 1 1 1 0 0 1 0 1 1 1 0 
0 0 1 0 0 1 0 1 0 0 0 0 0 1 1 1 0 1 1 0 1 0 1 0 1 1 1 0 
0 0 1 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 1 1 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 1 1 0 1 1 1 0 
1 0 0 1 0 1 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 
0 1 0 0 0 1 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 1 1 0 1 1 1 0 
1 0 0 0 0 1 1 0 0 1 0 0 0 1 0 0 1 1 1 0 0 1 1 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 0 1 0 1 1 0 1 1 1 0 
0 1 0 0 0 1 1 0 0 1 1 0 0 1 1 0 1 0 1 1 0 1 1 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 
0 1 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 1 1 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 
0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 
0 0 0 0 1 1 1 0 0 1 0 0 0 0 1 1 1 1 1 1 0 1 1 0 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 0 
0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 1 1 0 1 1 1 0 
0 1 1 0 0 0 0 0 0 1 0 0 0 1 1 0 1 1 0 0 1 1 1 0 1 1 1 0 
1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 0 1 1 1 0 1 1 1 0 
0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 1 1 0 
1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 1 1 0 0 1 1 1 1 0 
0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 
1 1 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 
0 0 1 0 0 1 0 1 0 0 0 0 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 0 
1 1 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 
1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 1 0 
0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 0 1 1 0 1 0 1 1 1 1 1 1 0 
0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 1 1 1 1 1 1 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 0 1 1 1 1 1 1 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 
0 1 0 0 0 0 1 1 0 0 0 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 1 0 
0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0 
1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 1 1 1 1 1 1 1 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 0 
1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 
0 0 0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 0 1 
1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 1 1 0 1 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 
0 0 0 0 0 0 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 0 1 
0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 1 1 1 1 1 0 1 1 1 0 1 0 1 
0 0 0 0 0 0 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 
0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 1 0 0 1 1 0 1 
0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 1 1 0 1 1 0 1 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 
0 1 0 0 1 0 1 1 1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 1 1 
0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 1 0 0 1 0 0 0 0 1 1 
1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 1 1 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 1 1 1 0 1 0 0 0 1 1 
1 0 0 0 1 0 0 1 0 1 0 1 0 0 0 1 1 1 1 1 1 0 1 0 0 0 1 1 
0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 0 1 1 0 0 0 1 1 
0 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 1 0 1 0 1 1 0 0 0 1 1 
0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 1 0 1 1 1 0 1 1 0 0 0 1 1 
0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 1 1 1 1 0 1 1 0 0 0 1 1 
0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 0 1 0 0 1 1 
0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 0 1 1 0 0 1 1 
1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 
0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 
1 1 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 
0 0 0 0 0 0 1 0 0 1 1 1 0 0 1 1 1 1 1 1 0 1 0 0 1 0 1 1 
0 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 1 1 
0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 1 1 1 0 0 1 0 1 1 
0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 1 1 0 1 1 0 1 0 1 1 
1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1 1 
0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1 1 
0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 1 1 1 
0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 1 1 
0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 1 1 1 
0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1 0 0 1 1 1 
1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 1 0 1 0 1 1 1 
0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 
1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1 
0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 1 1 0 1 1 0 0 0 1 1 1 1 
0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 0 1 1 1 1 
0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 
0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 
1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 1 1 1 
0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 1 0 0 1 1 0 1 0 0 1 1 1 1 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 1 1 1 1 
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 
0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 1 1 1 1 1 0 0 1 0 1 1 1 1 
1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 1 1 1 1 
1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 1 0 1 1 1 1 
0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 1 1 0 1 1 1 1 
0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 1 
0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 1 1 
0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 
0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 1 1 1 1 0 1 1 1 1 
0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 
0 1 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 
0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 
0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 0 1 0 1 1 1 1 1 
0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 1 1 1 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 0 1 1 1 1 1 
1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 0 1 1 1 1 1 
0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 1 1 1 1 1 
1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 1 1 1 1 1 
1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 1 1 
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 
0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 
0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 
0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 0 1 1 1 1 1 1 1 
1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 1 1 1 1 1 
0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
