#####TASK#####
## name
sysadmin_inst_mdp__6
## horizon
40
## discount factor
1
## number of action fluents
30
## number of det state fluents
0
## number of prob state fluents
30
## number of preconds
0
## number of actions
31
## number of hashing functions
31
## initial state
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
0
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
1501
## number of unique states that were encountered during task analysis
1396
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
reboot(c1)
## number of values
2
## values
0 false
1 true

## index
1
## name
reboot(c10)
## number of values
2
## values
0 false
1 true

## index
2
## name
reboot(c11)
## number of values
2
## values
0 false
1 true

## index
3
## name
reboot(c12)
## number of values
2
## values
0 false
1 true

## index
4
## name
reboot(c13)
## number of values
2
## values
0 false
1 true

## index
5
## name
reboot(c14)
## number of values
2
## values
0 false
1 true

## index
6
## name
reboot(c15)
## number of values
2
## values
0 false
1 true

## index
7
## name
reboot(c16)
## number of values
2
## values
0 false
1 true

## index
8
## name
reboot(c17)
## number of values
2
## values
0 false
1 true

## index
9
## name
reboot(c18)
## number of values
2
## values
0 false
1 true

## index
10
## name
reboot(c19)
## number of values
2
## values
0 false
1 true

## index
11
## name
reboot(c2)
## number of values
2
## values
0 false
1 true

## index
12
## name
reboot(c20)
## number of values
2
## values
0 false
1 true

## index
13
## name
reboot(c21)
## number of values
2
## values
0 false
1 true

## index
14
## name
reboot(c22)
## number of values
2
## values
0 false
1 true

## index
15
## name
reboot(c23)
## number of values
2
## values
0 false
1 true

## index
16
## name
reboot(c24)
## number of values
2
## values
0 false
1 true

## index
17
## name
reboot(c25)
## number of values
2
## values
0 false
1 true

## index
18
## name
reboot(c26)
## number of values
2
## values
0 false
1 true

## index
19
## name
reboot(c27)
## number of values
2
## values
0 false
1 true

## index
20
## name
reboot(c28)
## number of values
2
## values
0 false
1 true

## index
21
## name
reboot(c29)
## number of values
2
## values
0 false
1 true

## index
22
## name
reboot(c3)
## number of values
2
## values
0 false
1 true

## index
23
## name
reboot(c30)
## number of values
2
## values
0 false
1 true

## index
24
## name
reboot(c4)
## number of values
2
## values
0 false
1 true

## index
25
## name
reboot(c5)
## number of values
2
## values
0 false
1 true

## index
26
## name
reboot(c6)
## number of values
2
## values
0 false
1 true

## index
27
## name
reboot(c7)
## number of values
2
## values
0 false
1 true

## index
28
## name
reboot(c8)
## number of values
2
## values
0 false
1 true

## index
29
## name
reboot(c9)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####


#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
running(c1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(0) : $c(1)) ($s(0) : Bernoulli(+(/(*(+($s(17) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(0) : $c(1)) ($s(0) : <=($c(0.5) +(/(*(+($s(17) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 1

## index
1
## name
running(c10)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(1) : $c(1)) ($s(1) : Bernoulli(+(/(*(+($s(27) $s(2) $s(7) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(1) : $c(1)) ($s(1) : <=($c(0.5) +(/(*(+($s(27) $s(2) $s(7) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
1
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.425 1 0.575
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.97 1 0.03
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 0 2 0 0.97 1 0.03
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 1
30 0

## index
2
## name
running(c11)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(2) : $c(1)) ($s(2) : Bernoulli(+(/(*(+($s(24) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(2) : $c(1)) ($s(2) : <=($c(0.5) +(/(*(+($s(24) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
2
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 1
29 0
30 0

## index
3
## name
running(c12)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(3) : $c(1)) ($s(3) : Bernoulli(+(/(*(+($s(26) $s(28) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(3) : $c(1)) ($s(3) : <=($c(0.5) +(/(*(+($s(26) $s(28) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
3
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.383333333333333 1 0.616666666666667
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 1
28 0
29 0
30 0

## index
4
## name
running(c13)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(4) : $c(1)) ($s(4) : Bernoulli(+(/(*(+($s(29) $s(19) $s(23) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(4) : $c(1)) ($s(4) : <=($c(0.5) +(/(*(+($s(29) $s(19) $s(23) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
4
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.425 1 0.575
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.97 1 0.03
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 0 2 0 0.97 1 0.03
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 1
27 0
28 0
29 0
30 0

## index
5
## name
running(c14)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(5) : $c(1)) ($s(5) : Bernoulli($c(0.95))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(5) : $c(1)) ($s(5) : $c(1)) ($c(1) : $c(0)) )
## hash index
5
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
4
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.05 1 0.95
3 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 1
26 0
27 0
28 0
29 0
30 0

## index
6
## name
running(c15)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(6) : $c(1)) ($s(6) : Bernoulli(+(/(*(+($s(2) $s(3) $s(4) $s(17) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(6) : $c(1)) ($s(6) : <=($c(0.5) +(/(*(+($s(2) $s(3) $s(4) $s(17) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
6
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 0 2 0 0.97 1 0.03
15 1 1 1 1
16 1 2 0 0.45 1 0.55
17 1 1 1 1
18 1 2 0 0.35 1 0.65
19 1 1 1 1
20 1 2 0 0.35 1 0.65
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 1 2 0 0.35 1 0.65
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.97 1 0.03
33 1 1 1 1
34 0 2 0 0.97 1 0.03
35 1 1 1 1
36 0 2 0 0.97 1 0.03
37 1 1 1 1
38 0 2 0 0.97 1 0.03
39 1 1 1 1
40 0 2 0 0.97 1 0.03
41 1 1 1 1
42 0 2 0 0.97 1 0.03
43 1 1 1 1
44 0 2 0 0.97 1 0.03
45 1 1 1 1
46 0 2 0 0.97 1 0.03
47 1 1 1 1
48 1 2 0 0.35 1 0.65
49 1 1 1 1
50 1 2 0 0.25 1 0.75
51 1 1 1 1
52 1 2 0 0.25 1 0.75
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 1 2 0 0.25 1 0.75
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 1
25 0
26 0
27 0
28 0
29 0
30 0

## index
7
## name
running(c16)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(7) : $c(1)) ($s(7) : Bernoulli(+(/(*(+($s(14) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(7) : $c(1)) ($s(7) : <=($c(0.5) +(/(*(+($s(14) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
7
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 1
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
8
## name
running(c17)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(8) : $c(1)) ($s(8) : Bernoulli(+(/(*(+($s(0) $s(26) $s(21) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(8) : $c(1)) ($s(8) : <=($c(0.5) +(/(*(+($s(0) $s(26) $s(21) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
8
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 1 2 0 0.425 1 0.575
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 1 2 0 0.3 1 0.7
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 1 2 0 0.3 1 0.7
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.97 1 0.03
25 1 1 1 1
26 0 2 0 0.97 1 0.03
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 1
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
9
## name
running(c18)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(9) : $c(1)) ($s(9) : Bernoulli(+(/(*(+($s(25) $s(27) $s(1) $s(16) $s(21) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(9) : $c(1)) ($s(9) : <=($c(0.5) +(/(*(+($s(25) $s(27) $s(1) $s(16) $s(21) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
9
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 1 2 0 0.466666666666667 1 0.533333333333333
5 1 1 1 1
6 1 2 0 0.383333333333333 1 0.616666666666667
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 1 2 0 0.383333333333333 1 0.616666666666667
13 1 1 1 1
14 1 2 0 0.3 1 0.7
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 1 2 0 0.383333333333333 1 0.616666666666667
21 1 1 1 1
22 1 2 0 0.3 1 0.7
23 1 1 1 1
24 0 2 0 0.97 1 0.03
25 1 1 1 1
26 0 2 0 0.97 1 0.03
27 1 1 1 1
28 1 2 0 0.3 1 0.7
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.97 1 0.03
33 1 1 1 1
34 0 2 0 0.97 1 0.03
35 1 1 1 1
36 1 2 0 0.383333333333333 1 0.616666666666667
37 1 1 1 1
38 1 2 0 0.3 1 0.7
39 1 1 1 1
40 0 2 0 0.97 1 0.03
41 1 1 1 1
42 0 2 0 0.97 1 0.03
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 0 2 0 0.97 1 0.03
49 1 1 1 1
50 0 2 0 0.97 1 0.03
51 1 1 1 1
52 1 2 0 0.3 1 0.7
53 1 1 1 1
54 1 2 0 0.216666666666667 1 0.783333333333333
55 1 1 1 1
56 0 2 0 0.97 1 0.03
57 1 1 1 1
58 0 2 0 0.97 1 0.03
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.97 1 0.03
65 1 1 1 1
66 0 2 0 0.97 1 0.03
67 1 1 1 1
68 1 2 0 0.383333333333333 1 0.616666666666667
69 1 1 1 1
70 1 2 0 0.3 1 0.7
71 1 1 1 1
72 0 2 0 0.97 1 0.03
73 1 1 1 1
74 0 2 0 0.97 1 0.03
75 1 1 1 1
76 1 2 0 0.3 1 0.7
77 1 1 1 1
78 1 2 0 0.216666666666667 1 0.783333333333333
79 1 1 1 1
80 0 2 0 0.97 1 0.03
81 1 1 1 1
82 0 2 0 0.97 1 0.03
83 1 1 1 1
84 1 2 0 0.3 1 0.7
85 1 1 1 1
86 1 2 0 0.216666666666667 1 0.783333333333333
87 1 1 1 1
88 0 2 0 0.97 1 0.03
89 1 1 1 1
90 0 2 0 0.97 1 0.03
91 1 1 1 1
92 1 2 0 0.216666666666667 1 0.783333333333333
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.97 1 0.03
97 1 1 1 1
98 0 2 0 0.97 1 0.03
99 1 1 1 1
100 1 2 0 0.3 1 0.7
101 1 1 1 1
102 1 2 0 0.216666666666667 1 0.783333333333333
103 1 1 1 1
104 0 2 0 0.97 1 0.03
105 1 1 1 1
106 0 2 0 0.97 1 0.03
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 0 2 0 0.97 1 0.03
113 1 1 1 1
114 0 2 0 0.97 1 0.03
115 1 1 1 1
116 1 2 0 0.216666666666667 1 0.783333333333333
117 1 1 1 1
118 1 2 0 0.133333333333333 1 0.866666666666667
119 1 1 1 1
120 0 2 0 0.97 1 0.03
121 1 1 1 1
122 0 2 0 0.97 1 0.03
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 1
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
10
## name
running(c19)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(10) : $c(1)) ($s(10) : Bernoulli(+(/(*(+($s(7) $s(9) $s(18) $s(20) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(10) : $c(1)) ($s(10) : <=($c(0.5) +(/(*(+($s(7) $s(9) $s(18) $s(20) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
10
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 1 2 0 0.45 1 0.55
9 1 1 1 1
10 1 2 0 0.35 1 0.65
11 1 1 1 1
12 1 2 0 0.35 1 0.65
13 1 1 1 1
14 1 2 0 0.25 1 0.75
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 0 2 0 0.97 1 0.03
23 1 1 1 1
24 1 2 0 0.35 1 0.65
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.97 1 0.03
33 1 1 1 1
34 0 2 0 0.97 1 0.03
35 1 1 1 1
36 0 2 0 0.97 1 0.03
37 1 1 1 1
38 0 2 0 0.97 1 0.03
39 1 1 1 1
40 1 2 0 0.35 1 0.65
41 1 1 1 1
42 1 2 0 0.25 1 0.75
43 1 1 1 1
44 1 2 0 0.25 1 0.75
45 1 1 1 1
46 1 2 0 0.15 1 0.85
47 1 1 1 1
48 0 2 0 0.97 1 0.03
49 1 1 1 1
50 0 2 0 0.97 1 0.03
51 1 1 1 1
52 0 2 0 0.97 1 0.03
53 1 1 1 1
54 0 2 0 0.97 1 0.03
55 1 1 1 1
56 1 2 0 0.25 1 0.75
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 1
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
11
## name
running(c2)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(11) : $c(1)) ($s(11) : Bernoulli(+(/(*(+($s(5) $s(16) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(11) : $c(1)) ($s(11) : <=($c(0.5) +(/(*(+($s(5) $s(16) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
11
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 1 2 0 0.383333333333333 1 0.616666666666667
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 1
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
12
## name
running(c20)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(12) : $c(1)) ($s(12) : Bernoulli(+(/(*(+($s(27) $s(28) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(12) : $c(1)) ($s(12) : <=($c(0.5) +(/(*(+($s(27) $s(28) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
12
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.383333333333333 1 0.616666666666667
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 1
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
13
## name
running(c21)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(13) : $c(1)) ($s(13) : Bernoulli(+(/(*(+($s(11) $s(22) $s(3) $s(4) $s(8) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(13) : $c(1)) ($s(13) : <=($c(0.5) +(/(*(+($s(11) $s(22) $s(3) $s(4) $s(8) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
13
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 0 2 0 0.97 1 0.03
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 0 2 0 0.97 1 0.03
23 1 1 1 1
24 0 2 0 0.97 1 0.03
25 1 1 1 1
26 0 2 0 0.97 1 0.03
27 1 1 1 1
28 0 2 0 0.97 1 0.03
29 1 1 1 1
30 0 2 0 0.97 1 0.03
31 1 1 1 1
32 1 2 0 0.466666666666667 1 0.533333333333333
33 1 1 1 1
34 1 2 0 0.383333333333333 1 0.616666666666667
35 1 1 1 1
36 1 2 0 0.383333333333333 1 0.616666666666667
37 1 1 1 1
38 1 2 0 0.3 1 0.7
39 1 1 1 1
40 1 2 0 0.383333333333333 1 0.616666666666667
41 1 1 1 1
42 1 2 0 0.3 1 0.7
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 1 2 0 0.383333333333333 1 0.616666666666667
49 1 1 1 1
50 1 2 0 0.3 1 0.7
51 1 1 1 1
52 1 2 0 0.3 1 0.7
53 1 1 1 1
54 1 2 0 0.216666666666667 1 0.783333333333333
55 1 1 1 1
56 1 2 0 0.3 1 0.7
57 1 1 1 1
58 1 2 0 0.216666666666667 1 0.783333333333333
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.97 1 0.03
65 1 1 1 1
66 0 2 0 0.97 1 0.03
67 1 1 1 1
68 0 2 0 0.97 1 0.03
69 1 1 1 1
70 0 2 0 0.97 1 0.03
71 1 1 1 1
72 0 2 0 0.97 1 0.03
73 1 1 1 1
74 0 2 0 0.97 1 0.03
75 1 1 1 1
76 0 2 0 0.97 1 0.03
77 1 1 1 1
78 0 2 0 0.97 1 0.03
79 1 1 1 1
80 0 2 0 0.97 1 0.03
81 1 1 1 1
82 0 2 0 0.97 1 0.03
83 1 1 1 1
84 0 2 0 0.97 1 0.03
85 1 1 1 1
86 0 2 0 0.97 1 0.03
87 1 1 1 1
88 0 2 0 0.97 1 0.03
89 1 1 1 1
90 0 2 0 0.97 1 0.03
91 1 1 1 1
92 0 2 0 0.97 1 0.03
93 1 1 1 1
94 0 2 0 0.97 1 0.03
95 1 1 1 1
96 1 2 0 0.383333333333333 1 0.616666666666667
97 1 1 1 1
98 1 2 0 0.3 1 0.7
99 1 1 1 1
100 1 2 0 0.3 1 0.7
101 1 1 1 1
102 1 2 0 0.216666666666667 1 0.783333333333333
103 1 1 1 1
104 1 2 0 0.3 1 0.7
105 1 1 1 1
106 1 2 0 0.216666666666667 1 0.783333333333333
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 1 2 0 0.3 1 0.7
113 1 1 1 1
114 1 2 0 0.216666666666667 1 0.783333333333333
115 1 1 1 1
116 1 2 0 0.216666666666667 1 0.783333333333333
117 1 1 1 1
118 1 2 0 0.133333333333333 1 0.866666666666667
119 1 1 1 1
120 1 2 0 0.216666666666667 1 0.783333333333333
121 1 1 1 1
122 1 2 0 0.133333333333333 1 0.866666666666667
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
14
## name
running(c22)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(14) : $c(1)) ($s(14) : Bernoulli(+(/(*(+($s(20) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(14) : $c(1)) ($s(14) : <=($c(0.5) +(/(*(+($s(20) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
14
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 1
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
15
## name
running(c23)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(15) : $c(1)) ($s(15) : Bernoulli(+(/(*(+($s(8) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(15) : $c(1)) ($s(15) : <=($c(0.5) +(/(*(+($s(8) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
15
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
16
## name
running(c24)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(16) : $c(1)) ($s(16) : Bernoulli($c(0.95))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(16) : $c(1)) ($s(16) : $c(1)) ($c(1) : $c(0)) )
## hash index
16
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
4
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 1 2 0 0.05 1 0.95
3 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
17
## name
running(c25)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(17) : $c(1)) ($s(17) : Bernoulli(+(/(*(+($s(22) $s(1) $s(3) $s(6) $s(12) $s(20) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(17) : $c(1)) ($s(17) : <=($c(0.5) +(/(*(+($s(22) $s(1) $s(3) $s(6) $s(12) $s(20) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
17
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 0 2 0 0.97 1 0.03
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 0 2 0 0.97 1 0.03
23 1 1 1 1
24 0 2 0 0.97 1 0.03
25 1 1 1 1
26 0 2 0 0.97 1 0.03
27 1 1 1 1
28 0 2 0 0.97 1 0.03
29 1 1 1 1
30 0 2 0 0.97 1 0.03
31 1 1 1 1
32 1 2 0 0.478571428571429 1 0.521428571428571
33 1 1 1 1
34 1 2 0 0.407142857142857 1 0.592857142857143
35 1 1 1 1
36 1 2 0 0.407142857142857 1 0.592857142857143
37 1 1 1 1
38 1 2 0 0.335714285714286 1 0.664285714285714
39 1 1 1 1
40 1 2 0 0.407142857142857 1 0.592857142857143
41 1 1 1 1
42 1 2 0 0.335714285714286 1 0.664285714285714
43 1 1 1 1
44 1 2 0 0.335714285714286 1 0.664285714285714
45 1 1 1 1
46 1 2 0 0.264285714285714 1 0.735714285714286
47 1 1 1 1
48 1 2 0 0.407142857142857 1 0.592857142857143
49 1 1 1 1
50 1 2 0 0.335714285714286 1 0.664285714285714
51 1 1 1 1
52 1 2 0 0.335714285714286 1 0.664285714285714
53 1 1 1 1
54 1 2 0 0.264285714285714 1 0.735714285714286
55 1 1 1 1
56 1 2 0 0.335714285714286 1 0.664285714285714
57 1 1 1 1
58 1 2 0 0.264285714285714 1 0.735714285714286
59 1 1 1 1
60 1 2 0 0.264285714285714 1 0.735714285714286
61 1 1 1 1
62 1 2 0 0.192857142857143 1 0.807142857142857
63 1 1 1 1
64 0 2 0 0.97 1 0.03
65 1 1 1 1
66 0 2 0 0.97 1 0.03
67 1 1 1 1
68 0 2 0 0.97 1 0.03
69 1 1 1 1
70 0 2 0 0.97 1 0.03
71 1 1 1 1
72 0 2 0 0.97 1 0.03
73 1 1 1 1
74 0 2 0 0.97 1 0.03
75 1 1 1 1
76 0 2 0 0.97 1 0.03
77 1 1 1 1
78 0 2 0 0.97 1 0.03
79 1 1 1 1
80 0 2 0 0.97 1 0.03
81 1 1 1 1
82 0 2 0 0.97 1 0.03
83 1 1 1 1
84 0 2 0 0.97 1 0.03
85 1 1 1 1
86 0 2 0 0.97 1 0.03
87 1 1 1 1
88 0 2 0 0.97 1 0.03
89 1 1 1 1
90 0 2 0 0.97 1 0.03
91 1 1 1 1
92 0 2 0 0.97 1 0.03
93 1 1 1 1
94 0 2 0 0.97 1 0.03
95 1 1 1 1
96 1 2 0 0.407142857142857 1 0.592857142857143
97 1 1 1 1
98 1 2 0 0.335714285714286 1 0.664285714285714
99 1 1 1 1
100 1 2 0 0.335714285714286 1 0.664285714285714
101 1 1 1 1
102 1 2 0 0.264285714285714 1 0.735714285714286
103 1 1 1 1
104 1 2 0 0.335714285714286 1 0.664285714285714
105 1 1 1 1
106 1 2 0 0.264285714285714 1 0.735714285714286
107 1 1 1 1
108 1 2 0 0.264285714285714 1 0.735714285714286
109 1 1 1 1
110 1 2 0 0.192857142857143 1 0.807142857142857
111 1 1 1 1
112 1 2 0 0.335714285714286 1 0.664285714285714
113 1 1 1 1
114 1 2 0 0.264285714285714 1 0.735714285714286
115 1 1 1 1
116 1 2 0 0.264285714285714 1 0.735714285714286
117 1 1 1 1
118 1 2 0 0.192857142857143 1 0.807142857142857
119 1 1 1 1
120 1 2 0 0.264285714285714 1 0.735714285714286
121 1 1 1 1
122 1 2 0 0.192857142857143 1 0.807142857142857
123 1 1 1 1
124 1 2 0 0.192857142857143 1 0.807142857142857
125 1 1 1 1
126 1 2 0 0.121428571428571 1 0.878571428571429
127 1 1 1 1
128 0 2 0 0.97 1 0.03
129 1 1 1 1
130 0 2 0 0.97 1 0.03
131 1 1 1 1
132 0 2 0 0.97 1 0.03
133 1 1 1 1
134 0 2 0 0.97 1 0.03
135 1 1 1 1
136 0 2 0 0.97 1 0.03
137 1 1 1 1
138 0 2 0 0.97 1 0.03
139 1 1 1 1
140 0 2 0 0.97 1 0.03
141 1 1 1 1
142 0 2 0 0.97 1 0.03
143 1 1 1 1
144 0 2 0 0.97 1 0.03
145 1 1 1 1
146 0 2 0 0.97 1 0.03
147 1 1 1 1
148 0 2 0 0.97 1 0.03
149 1 1 1 1
150 0 2 0 0.97 1 0.03
151 1 1 1 1
152 0 2 0 0.97 1 0.03
153 1 1 1 1
154 0 2 0 0.97 1 0.03
155 1 1 1 1
156 0 2 0 0.97 1 0.03
157 1 1 1 1
158 0 2 0 0.97 1 0.03
159 1 1 1 1
160 1 2 0 0.407142857142857 1 0.592857142857143
161 1 1 1 1
162 1 2 0 0.335714285714286 1 0.664285714285714
163 1 1 1 1
164 1 2 0 0.335714285714286 1 0.664285714285714
165 1 1 1 1
166 1 2 0 0.264285714285714 1 0.735714285714286
167 1 1 1 1
168 1 2 0 0.335714285714286 1 0.664285714285714
169 1 1 1 1
170 1 2 0 0.264285714285714 1 0.735714285714286
171 1 1 1 1
172 1 2 0 0.264285714285714 1 0.735714285714286
173 1 1 1 1
174 1 2 0 0.192857142857143 1 0.807142857142857
175 1 1 1 1
176 1 2 0 0.335714285714286 1 0.664285714285714
177 1 1 1 1
178 1 2 0 0.264285714285714 1 0.735714285714286
179 1 1 1 1
180 1 2 0 0.264285714285714 1 0.735714285714286
181 1 1 1 1
182 1 2 0 0.192857142857143 1 0.807142857142857
183 1 1 1 1
184 1 2 0 0.264285714285714 1 0.735714285714286
185 1 1 1 1
186 1 2 0 0.192857142857143 1 0.807142857142857
187 1 1 1 1
188 1 2 0 0.192857142857143 1 0.807142857142857
189 1 1 1 1
190 1 2 0 0.121428571428571 1 0.878571428571429
191 1 1 1 1
192 0 2 0 0.97 1 0.03
193 1 1 1 1
194 0 2 0 0.97 1 0.03
195 1 1 1 1
196 0 2 0 0.97 1 0.03
197 1 1 1 1
198 0 2 0 0.97 1 0.03
199 1 1 1 1
200 0 2 0 0.97 1 0.03
201 1 1 1 1
202 0 2 0 0.97 1 0.03
203 1 1 1 1
204 0 2 0 0.97 1 0.03
205 1 1 1 1
206 0 2 0 0.97 1 0.03
207 1 1 1 1
208 0 2 0 0.97 1 0.03
209 1 1 1 1
210 0 2 0 0.97 1 0.03
211 1 1 1 1
212 0 2 0 0.97 1 0.03
213 1 1 1 1
214 0 2 0 0.97 1 0.03
215 1 1 1 1
216 0 2 0 0.97 1 0.03
217 1 1 1 1
218 0 2 0 0.97 1 0.03
219 1 1 1 1
220 0 2 0 0.97 1 0.03
221 1 1 1 1
222 0 2 0 0.97 1 0.03
223 1 1 1 1
224 1 2 0 0.335714285714286 1 0.664285714285714
225 1 1 1 1
226 1 2 0 0.264285714285714 1 0.735714285714286
227 1 1 1 1
228 1 2 0 0.264285714285714 1 0.735714285714286
229 1 1 1 1
230 1 2 0 0.192857142857143 1 0.807142857142857
231 1 1 1 1
232 1 2 0 0.264285714285714 1 0.735714285714286
233 1 1 1 1
234 1 2 0 0.192857142857143 1 0.807142857142857
235 1 1 1 1
236 1 2 0 0.192857142857143 1 0.807142857142857
237 1 1 1 1
238 1 2 0 0.121428571428571 1 0.878571428571429
239 1 1 1 1
240 1 2 0 0.264285714285714 1 0.735714285714286
241 1 1 1 1
242 1 2 0 0.192857142857143 1 0.807142857142857
243 1 1 1 1
244 1 2 0 0.192857142857143 1 0.807142857142857
245 1 1 1 1
246 1 2 0 0.121428571428571 1 0.878571428571429
247 1 1 1 1
248 1 2 0 0.192857142857143 1 0.807142857142857
249 1 1 1 1
250 1 2 0 0.121428571428571 1 0.878571428571429
251 1 1 1 1
252 1 2 0 0.121428571428571 1 0.878571428571429
253 1 1 1 1
254 1 2 0 0.05 1 0.95
255 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
18
## name
running(c26)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(18) : $c(1)) ($s(18) : Bernoulli(+(/(*(+($s(24) $s(5) $s(10) $s(13) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(18) : $c(1)) ($s(18) : <=($c(0.5) +(/(*(+($s(24) $s(5) $s(10) $s(13) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
18
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 0 2 0 0.97 1 0.03
15 1 1 1 1
16 1 2 0 0.45 1 0.55
17 1 1 1 1
18 1 2 0 0.35 1 0.65
19 1 1 1 1
20 1 2 0 0.35 1 0.65
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 1 2 0 0.35 1 0.65
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.97 1 0.03
33 1 1 1 1
34 0 2 0 0.97 1 0.03
35 1 1 1 1
36 0 2 0 0.97 1 0.03
37 1 1 1 1
38 0 2 0 0.97 1 0.03
39 1 1 1 1
40 0 2 0 0.97 1 0.03
41 1 1 1 1
42 0 2 0 0.97 1 0.03
43 1 1 1 1
44 0 2 0 0.97 1 0.03
45 1 1 1 1
46 0 2 0 0.97 1 0.03
47 1 1 1 1
48 1 2 0 0.35 1 0.65
49 1 1 1 1
50 1 2 0 0.25 1 0.75
51 1 1 1 1
52 1 2 0 0.25 1 0.75
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 1 2 0 0.25 1 0.75
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 1
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
19
## name
running(c27)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(19) : $c(1)) ($s(19) : Bernoulli(+(/(*(+($s(11) $s(26) $s(8) $s(12) $s(15) $s(18) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(19) : $c(1)) ($s(19) : <=($c(0.5) +(/(*(+($s(11) $s(26) $s(8) $s(12) $s(15) $s(18) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
19
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 0 2 0 0.97 1 0.03
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 0 2 0 0.97 1 0.03
23 1 1 1 1
24 0 2 0 0.97 1 0.03
25 1 1 1 1
26 0 2 0 0.97 1 0.03
27 1 1 1 1
28 0 2 0 0.97 1 0.03
29 1 1 1 1
30 0 2 0 0.97 1 0.03
31 1 1 1 1
32 0 2 0 0.97 1 0.03
33 1 1 1 1
34 0 2 0 0.97 1 0.03
35 1 1 1 1
36 0 2 0 0.97 1 0.03
37 1 1 1 1
38 0 2 0 0.97 1 0.03
39 1 1 1 1
40 0 2 0 0.97 1 0.03
41 1 1 1 1
42 0 2 0 0.97 1 0.03
43 1 1 1 1
44 0 2 0 0.97 1 0.03
45 1 1 1 1
46 0 2 0 0.97 1 0.03
47 1 1 1 1
48 0 2 0 0.97 1 0.03
49 1 1 1 1
50 0 2 0 0.97 1 0.03
51 1 1 1 1
52 0 2 0 0.97 1 0.03
53 1 1 1 1
54 0 2 0 0.97 1 0.03
55 1 1 1 1
56 0 2 0 0.97 1 0.03
57 1 1 1 1
58 0 2 0 0.97 1 0.03
59 1 1 1 1
60 0 2 0 0.97 1 0.03
61 1 1 1 1
62 0 2 0 0.97 1 0.03
63 1 1 1 1
64 1 2 0 0.478571428571429 1 0.521428571428571
65 1 1 1 1
66 1 2 0 0.407142857142857 1 0.592857142857143
67 1 1 1 1
68 1 2 0 0.407142857142857 1 0.592857142857143
69 1 1 1 1
70 1 2 0 0.335714285714286 1 0.664285714285714
71 1 1 1 1
72 1 2 0 0.407142857142857 1 0.592857142857143
73 1 1 1 1
74 1 2 0 0.335714285714286 1 0.664285714285714
75 1 1 1 1
76 1 2 0 0.335714285714286 1 0.664285714285714
77 1 1 1 1
78 1 2 0 0.264285714285714 1 0.735714285714286
79 1 1 1 1
80 1 2 0 0.407142857142857 1 0.592857142857143
81 1 1 1 1
82 1 2 0 0.335714285714286 1 0.664285714285714
83 1 1 1 1
84 1 2 0 0.335714285714286 1 0.664285714285714
85 1 1 1 1
86 1 2 0 0.264285714285714 1 0.735714285714286
87 1 1 1 1
88 1 2 0 0.335714285714286 1 0.664285714285714
89 1 1 1 1
90 1 2 0 0.264285714285714 1 0.735714285714286
91 1 1 1 1
92 1 2 0 0.264285714285714 1 0.735714285714286
93 1 1 1 1
94 1 2 0 0.192857142857143 1 0.807142857142857
95 1 1 1 1
96 1 2 0 0.407142857142857 1 0.592857142857143
97 1 1 1 1
98 1 2 0 0.335714285714286 1 0.664285714285714
99 1 1 1 1
100 1 2 0 0.335714285714286 1 0.664285714285714
101 1 1 1 1
102 1 2 0 0.264285714285714 1 0.735714285714286
103 1 1 1 1
104 1 2 0 0.335714285714286 1 0.664285714285714
105 1 1 1 1
106 1 2 0 0.264285714285714 1 0.735714285714286
107 1 1 1 1
108 1 2 0 0.264285714285714 1 0.735714285714286
109 1 1 1 1
110 1 2 0 0.192857142857143 1 0.807142857142857
111 1 1 1 1
112 1 2 0 0.335714285714286 1 0.664285714285714
113 1 1 1 1
114 1 2 0 0.264285714285714 1 0.735714285714286
115 1 1 1 1
116 1 2 0 0.264285714285714 1 0.735714285714286
117 1 1 1 1
118 1 2 0 0.192857142857143 1 0.807142857142857
119 1 1 1 1
120 1 2 0 0.264285714285714 1 0.735714285714286
121 1 1 1 1
122 1 2 0 0.192857142857143 1 0.807142857142857
123 1 1 1 1
124 1 2 0 0.192857142857143 1 0.807142857142857
125 1 1 1 1
126 1 2 0 0.121428571428571 1 0.878571428571429
127 1 1 1 1
128 0 2 0 0.97 1 0.03
129 1 1 1 1
130 0 2 0 0.97 1 0.03
131 1 1 1 1
132 0 2 0 0.97 1 0.03
133 1 1 1 1
134 0 2 0 0.97 1 0.03
135 1 1 1 1
136 0 2 0 0.97 1 0.03
137 1 1 1 1
138 0 2 0 0.97 1 0.03
139 1 1 1 1
140 0 2 0 0.97 1 0.03
141 1 1 1 1
142 0 2 0 0.97 1 0.03
143 1 1 1 1
144 0 2 0 0.97 1 0.03
145 1 1 1 1
146 0 2 0 0.97 1 0.03
147 1 1 1 1
148 0 2 0 0.97 1 0.03
149 1 1 1 1
150 0 2 0 0.97 1 0.03
151 1 1 1 1
152 0 2 0 0.97 1 0.03
153 1 1 1 1
154 0 2 0 0.97 1 0.03
155 1 1 1 1
156 0 2 0 0.97 1 0.03
157 1 1 1 1
158 0 2 0 0.97 1 0.03
159 1 1 1 1
160 0 2 0 0.97 1 0.03
161 1 1 1 1
162 0 2 0 0.97 1 0.03
163 1 1 1 1
164 0 2 0 0.97 1 0.03
165 1 1 1 1
166 0 2 0 0.97 1 0.03
167 1 1 1 1
168 0 2 0 0.97 1 0.03
169 1 1 1 1
170 0 2 0 0.97 1 0.03
171 1 1 1 1
172 0 2 0 0.97 1 0.03
173 1 1 1 1
174 0 2 0 0.97 1 0.03
175 1 1 1 1
176 0 2 0 0.97 1 0.03
177 1 1 1 1
178 0 2 0 0.97 1 0.03
179 1 1 1 1
180 0 2 0 0.97 1 0.03
181 1 1 1 1
182 0 2 0 0.97 1 0.03
183 1 1 1 1
184 0 2 0 0.97 1 0.03
185 1 1 1 1
186 0 2 0 0.97 1 0.03
187 1 1 1 1
188 0 2 0 0.97 1 0.03
189 1 1 1 1
190 0 2 0 0.97 1 0.03
191 1 1 1 1
192 1 2 0 0.407142857142857 1 0.592857142857143
193 1 1 1 1
194 1 2 0 0.335714285714286 1 0.664285714285714
195 1 1 1 1
196 1 2 0 0.335714285714286 1 0.664285714285714
197 1 1 1 1
198 1 2 0 0.264285714285714 1 0.735714285714286
199 1 1 1 1
200 1 2 0 0.335714285714286 1 0.664285714285714
201 1 1 1 1
202 1 2 0 0.264285714285714 1 0.735714285714286
203 1 1 1 1
204 1 2 0 0.264285714285714 1 0.735714285714286
205 1 1 1 1
206 1 2 0 0.192857142857143 1 0.807142857142857
207 1 1 1 1
208 1 2 0 0.335714285714286 1 0.664285714285714
209 1 1 1 1
210 1 2 0 0.264285714285714 1 0.735714285714286
211 1 1 1 1
212 1 2 0 0.264285714285714 1 0.735714285714286
213 1 1 1 1
214 1 2 0 0.192857142857143 1 0.807142857142857
215 1 1 1 1
216 1 2 0 0.264285714285714 1 0.735714285714286
217 1 1 1 1
218 1 2 0 0.192857142857143 1 0.807142857142857
219 1 1 1 1
220 1 2 0 0.192857142857143 1 0.807142857142857
221 1 1 1 1
222 1 2 0 0.121428571428571 1 0.878571428571429
223 1 1 1 1
224 1 2 0 0.335714285714286 1 0.664285714285714
225 1 1 1 1
226 1 2 0 0.264285714285714 1 0.735714285714286
227 1 1 1 1
228 1 2 0 0.264285714285714 1 0.735714285714286
229 1 1 1 1
230 1 2 0 0.192857142857143 1 0.807142857142857
231 1 1 1 1
232 1 2 0 0.264285714285714 1 0.735714285714286
233 1 1 1 1
234 1 2 0 0.192857142857143 1 0.807142857142857
235 1 1 1 1
236 1 2 0 0.192857142857143 1 0.807142857142857
237 1 1 1 1
238 1 2 0 0.121428571428571 1 0.878571428571429
239 1 1 1 1
240 1 2 0 0.264285714285714 1 0.735714285714286
241 1 1 1 1
242 1 2 0 0.192857142857143 1 0.807142857142857
243 1 1 1 1
244 1 2 0 0.192857142857143 1 0.807142857142857
245 1 1 1 1
246 1 2 0 0.121428571428571 1 0.878571428571429
247 1 1 1 1
248 1 2 0 0.192857142857143 1 0.807142857142857
249 1 1 1 1
250 1 2 0 0.121428571428571 1 0.878571428571429
251 1 1 1 1
252 1 2 0 0.121428571428571 1 0.878571428571429
253 1 1 1 1
254 1 2 0 0.05 1 0.95
255 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 1
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
20
## name
running(c28)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(20) : $c(1)) ($s(20) : Bernoulli(+(/(*(+($s(24) $s(4) $s(7) $s(23) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(20) : $c(1)) ($s(20) : <=($c(0.5) +(/(*(+($s(24) $s(4) $s(7) $s(23) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
20
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 1 2 0 0.45 1 0.55
9 1 1 1 1
10 1 2 0 0.35 1 0.65
11 1 1 1 1
12 1 2 0 0.35 1 0.65
13 1 1 1 1
14 1 2 0 0.25 1 0.75
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 0 2 0 0.97 1 0.03
23 1 1 1 1
24 1 2 0 0.35 1 0.65
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.97 1 0.03
33 1 1 1 1
34 0 2 0 0.97 1 0.03
35 1 1 1 1
36 0 2 0 0.97 1 0.03
37 1 1 1 1
38 0 2 0 0.97 1 0.03
39 1 1 1 1
40 1 2 0 0.35 1 0.65
41 1 1 1 1
42 1 2 0 0.25 1 0.75
43 1 1 1 1
44 1 2 0 0.25 1 0.75
45 1 1 1 1
46 1 2 0 0.15 1 0.85
47 1 1 1 1
48 0 2 0 0.97 1 0.03
49 1 1 1 1
50 0 2 0 0.97 1 0.03
51 1 1 1 1
52 0 2 0 0.97 1 0.03
53 1 1 1 1
54 0 2 0 0.97 1 0.03
55 1 1 1 1
56 1 2 0 0.25 1 0.75
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
21
## name
running(c29)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(21) : $c(1)) ($s(21) : Bernoulli(+(/(*(+($s(0) $s(25) $s(18) $s(19) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(21) : $c(1)) ($s(21) : <=($c(0.5) +(/(*(+($s(0) $s(25) $s(18) $s(19) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
21
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 0 2 0 0.97 1 0.03
15 1 1 1 1
16 1 2 0 0.45 1 0.55
17 1 1 1 1
18 1 2 0 0.35 1 0.65
19 1 1 1 1
20 1 2 0 0.35 1 0.65
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 1 2 0 0.35 1 0.65
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.97 1 0.03
33 1 1 1 1
34 0 2 0 0.97 1 0.03
35 1 1 1 1
36 0 2 0 0.97 1 0.03
37 1 1 1 1
38 0 2 0 0.97 1 0.03
39 1 1 1 1
40 0 2 0 0.97 1 0.03
41 1 1 1 1
42 0 2 0 0.97 1 0.03
43 1 1 1 1
44 0 2 0 0.97 1 0.03
45 1 1 1 1
46 0 2 0 0.97 1 0.03
47 1 1 1 1
48 1 2 0 0.35 1 0.65
49 1 1 1 1
50 1 2 0 0.25 1 0.75
51 1 1 1 1
52 1 2 0 0.25 1 0.75
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 1 2 0 0.25 1 0.75
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
22
## name
running(c3)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(22) : $c(1)) ($s(22) : Bernoulli(+(/(*(+($s(11) $s(25) $s(29) $s(2) $s(10) $s(12) $s(19) $c(1)) $c(0.5)) $c(8)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(22) : $c(1)) ($s(22) : <=($c(0.5) +(/(*(+($s(11) $s(25) $s(29) $s(2) $s(10) $s(12) $s(19) $c(1)) $c(0.5)) $c(8)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
22
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
512
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 0 2 0 0.97 1 0.03
9 1 1 1 1
10 0 2 0 0.97 1 0.03
11 1 1 1 1
12 0 2 0 0.97 1 0.03
13 1 1 1 1
14 0 2 0 0.97 1 0.03
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 0 2 0 0.97 1 0.03
23 1 1 1 1
24 0 2 0 0.97 1 0.03
25 1 1 1 1
26 0 2 0 0.97 1 0.03
27 1 1 1 1
28 0 2 0 0.97 1 0.03
29 1 1 1 1
30 0 2 0 0.97 1 0.03
31 1 1 1 1
32 0 2 0 0.97 1 0.03
33 1 1 1 1
34 0 2 0 0.97 1 0.03
35 1 1 1 1
36 0 2 0 0.97 1 0.03
37 1 1 1 1
38 0 2 0 0.97 1 0.03
39 1 1 1 1
40 0 2 0 0.97 1 0.03
41 1 1 1 1
42 0 2 0 0.97 1 0.03
43 1 1 1 1
44 0 2 0 0.97 1 0.03
45 1 1 1 1
46 0 2 0 0.97 1 0.03
47 1 1 1 1
48 0 2 0 0.97 1 0.03
49 1 1 1 1
50 0 2 0 0.97 1 0.03
51 1 1 1 1
52 0 2 0 0.97 1 0.03
53 1 1 1 1
54 0 2 0 0.97 1 0.03
55 1 1 1 1
56 0 2 0 0.97 1 0.03
57 1 1 1 1
58 0 2 0 0.97 1 0.03
59 1 1 1 1
60 0 2 0 0.97 1 0.03
61 1 1 1 1
62 0 2 0 0.97 1 0.03
63 1 1 1 1
64 1 2 0 0.4875 1 0.5125
65 1 1 1 1
66 1 2 0 0.425 1 0.575
67 1 1 1 1
68 1 2 0 0.425 1 0.575
69 1 1 1 1
70 1 2 0 0.3625 1 0.6375
71 1 1 1 1
72 1 2 0 0.425 1 0.575
73 1 1 1 1
74 1 2 0 0.3625 1 0.6375
75 1 1 1 1
76 1 2 0 0.3625 1 0.6375
77 1 1 1 1
78 1 2 0 0.3 1 0.7
79 1 1 1 1
80 1 2 0 0.425 1 0.575
81 1 1 1 1
82 1 2 0 0.3625 1 0.6375
83 1 1 1 1
84 1 2 0 0.3625 1 0.6375
85 1 1 1 1
86 1 2 0 0.3 1 0.7
87 1 1 1 1
88 1 2 0 0.3625 1 0.6375
89 1 1 1 1
90 1 2 0 0.3 1 0.7
91 1 1 1 1
92 1 2 0 0.3 1 0.7
93 1 1 1 1
94 1 2 0 0.2375 1 0.7625
95 1 1 1 1
96 1 2 0 0.425 1 0.575
97 1 1 1 1
98 1 2 0 0.3625 1 0.6375
99 1 1 1 1
100 1 2 0 0.3625 1 0.6375
101 1 1 1 1
102 1 2 0 0.3 1 0.7
103 1 1 1 1
104 1 2 0 0.3625 1 0.6375
105 1 1 1 1
106 1 2 0 0.3 1 0.7
107 1 1 1 1
108 1 2 0 0.3 1 0.7
109 1 1 1 1
110 1 2 0 0.2375 1 0.7625
111 1 1 1 1
112 1 2 0 0.3625 1 0.6375
113 1 1 1 1
114 1 2 0 0.3 1 0.7
115 1 1 1 1
116 1 2 0 0.3 1 0.7
117 1 1 1 1
118 1 2 0 0.2375 1 0.7625
119 1 1 1 1
120 1 2 0 0.3 1 0.7
121 1 1 1 1
122 1 2 0 0.2375 1 0.7625
123 1 1 1 1
124 1 2 0 0.2375 1 0.7625
125 1 1 1 1
126 1 2 0 0.175 1 0.825
127 1 1 1 1
128 0 2 0 0.97 1 0.03
129 1 1 1 1
130 0 2 0 0.97 1 0.03
131 1 1 1 1
132 0 2 0 0.97 1 0.03
133 1 1 1 1
134 0 2 0 0.97 1 0.03
135 1 1 1 1
136 0 2 0 0.97 1 0.03
137 1 1 1 1
138 0 2 0 0.97 1 0.03
139 1 1 1 1
140 0 2 0 0.97 1 0.03
141 1 1 1 1
142 0 2 0 0.97 1 0.03
143 1 1 1 1
144 0 2 0 0.97 1 0.03
145 1 1 1 1
146 0 2 0 0.97 1 0.03
147 1 1 1 1
148 0 2 0 0.97 1 0.03
149 1 1 1 1
150 0 2 0 0.97 1 0.03
151 1 1 1 1
152 0 2 0 0.97 1 0.03
153 1 1 1 1
154 0 2 0 0.97 1 0.03
155 1 1 1 1
156 0 2 0 0.97 1 0.03
157 1 1 1 1
158 0 2 0 0.97 1 0.03
159 1 1 1 1
160 0 2 0 0.97 1 0.03
161 1 1 1 1
162 0 2 0 0.97 1 0.03
163 1 1 1 1
164 0 2 0 0.97 1 0.03
165 1 1 1 1
166 0 2 0 0.97 1 0.03
167 1 1 1 1
168 0 2 0 0.97 1 0.03
169 1 1 1 1
170 0 2 0 0.97 1 0.03
171 1 1 1 1
172 0 2 0 0.97 1 0.03
173 1 1 1 1
174 0 2 0 0.97 1 0.03
175 1 1 1 1
176 0 2 0 0.97 1 0.03
177 1 1 1 1
178 0 2 0 0.97 1 0.03
179 1 1 1 1
180 0 2 0 0.97 1 0.03
181 1 1 1 1
182 0 2 0 0.97 1 0.03
183 1 1 1 1
184 0 2 0 0.97 1 0.03
185 1 1 1 1
186 0 2 0 0.97 1 0.03
187 1 1 1 1
188 0 2 0 0.97 1 0.03
189 1 1 1 1
190 0 2 0 0.97 1 0.03
191 1 1 1 1
192 1 2 0 0.425 1 0.575
193 1 1 1 1
194 1 2 0 0.3625 1 0.6375
195 1 1 1 1
196 1 2 0 0.3625 1 0.6375
197 1 1 1 1
198 1 2 0 0.3 1 0.7
199 1 1 1 1
200 1 2 0 0.3625 1 0.6375
201 1 1 1 1
202 1 2 0 0.3 1 0.7
203 1 1 1 1
204 1 2 0 0.3 1 0.7
205 1 1 1 1
206 1 2 0 0.2375 1 0.7625
207 1 1 1 1
208 1 2 0 0.3625 1 0.6375
209 1 1 1 1
210 1 2 0 0.3 1 0.7
211 1 1 1 1
212 1 2 0 0.3 1 0.7
213 1 1 1 1
214 1 2 0 0.2375 1 0.7625
215 1 1 1 1
216 1 2 0 0.3 1 0.7
217 1 1 1 1
218 1 2 0 0.2375 1 0.7625
219 1 1 1 1
220 1 2 0 0.2375 1 0.7625
221 1 1 1 1
222 1 2 0 0.175 1 0.825
223 1 1 1 1
224 1 2 0 0.3625 1 0.6375
225 1 1 1 1
226 1 2 0 0.3 1 0.7
227 1 1 1 1
228 1 2 0 0.3 1 0.7
229 1 1 1 1
230 1 2 0 0.2375 1 0.7625
231 1 1 1 1
232 1 2 0 0.3 1 0.7
233 1 1 1 1
234 1 2 0 0.2375 1 0.7625
235 1 1 1 1
236 1 2 0 0.2375 1 0.7625
237 1 1 1 1
238 1 2 0 0.175 1 0.825
239 1 1 1 1
240 1 2 0 0.3 1 0.7
241 1 1 1 1
242 1 2 0 0.2375 1 0.7625
243 1 1 1 1
244 1 2 0 0.2375 1 0.7625
245 1 1 1 1
246 1 2 0 0.175 1 0.825
247 1 1 1 1
248 1 2 0 0.2375 1 0.7625
249 1 1 1 1
250 1 2 0 0.175 1 0.825
251 1 1 1 1
252 1 2 0 0.175 1 0.825
253 1 1 1 1
254 1 2 0 0.1125 1 0.8875
255 1 1 1 1
256 0 2 0 0.97 1 0.03
257 1 1 1 1
258 0 2 0 0.97 1 0.03
259 1 1 1 1
260 0 2 0 0.97 1 0.03
261 1 1 1 1
262 0 2 0 0.97 1 0.03
263 1 1 1 1
264 0 2 0 0.97 1 0.03
265 1 1 1 1
266 0 2 0 0.97 1 0.03
267 1 1 1 1
268 0 2 0 0.97 1 0.03
269 1 1 1 1
270 0 2 0 0.97 1 0.03
271 1 1 1 1
272 0 2 0 0.97 1 0.03
273 1 1 1 1
274 0 2 0 0.97 1 0.03
275 1 1 1 1
276 0 2 0 0.97 1 0.03
277 1 1 1 1
278 0 2 0 0.97 1 0.03
279 1 1 1 1
280 0 2 0 0.97 1 0.03
281 1 1 1 1
282 0 2 0 0.97 1 0.03
283 1 1 1 1
284 0 2 0 0.97 1 0.03
285 1 1 1 1
286 0 2 0 0.97 1 0.03
287 1 1 1 1
288 0 2 0 0.97 1 0.03
289 1 1 1 1
290 0 2 0 0.97 1 0.03
291 1 1 1 1
292 0 2 0 0.97 1 0.03
293 1 1 1 1
294 0 2 0 0.97 1 0.03
295 1 1 1 1
296 0 2 0 0.97 1 0.03
297 1 1 1 1
298 0 2 0 0.97 1 0.03
299 1 1 1 1
300 0 2 0 0.97 1 0.03
301 1 1 1 1
302 0 2 0 0.97 1 0.03
303 1 1 1 1
304 0 2 0 0.97 1 0.03
305 1 1 1 1
306 0 2 0 0.97 1 0.03
307 1 1 1 1
308 0 2 0 0.97 1 0.03
309 1 1 1 1
310 0 2 0 0.97 1 0.03
311 1 1 1 1
312 0 2 0 0.97 1 0.03
313 1 1 1 1
314 0 2 0 0.97 1 0.03
315 1 1 1 1
316 0 2 0 0.97 1 0.03
317 1 1 1 1
318 0 2 0 0.97 1 0.03
319 1 1 1 1
320 1 2 0 0.425 1 0.575
321 1 1 1 1
322 1 2 0 0.3625 1 0.6375
323 1 1 1 1
324 1 2 0 0.3625 1 0.6375
325 1 1 1 1
326 1 2 0 0.3 1 0.7
327 1 1 1 1
328 1 2 0 0.3625 1 0.6375
329 1 1 1 1
330 1 2 0 0.3 1 0.7
331 1 1 1 1
332 1 2 0 0.3 1 0.7
333 1 1 1 1
334 1 2 0 0.2375 1 0.7625
335 1 1 1 1
336 1 2 0 0.3625 1 0.6375
337 1 1 1 1
338 1 2 0 0.3 1 0.7
339 1 1 1 1
340 1 2 0 0.3 1 0.7
341 1 1 1 1
342 1 2 0 0.2375 1 0.7625
343 1 1 1 1
344 1 2 0 0.3 1 0.7
345 1 1 1 1
346 1 2 0 0.2375 1 0.7625
347 1 1 1 1
348 1 2 0 0.2375 1 0.7625
349 1 1 1 1
350 1 2 0 0.175 1 0.825
351 1 1 1 1
352 1 2 0 0.3625 1 0.6375
353 1 1 1 1
354 1 2 0 0.3 1 0.7
355 1 1 1 1
356 1 2 0 0.3 1 0.7
357 1 1 1 1
358 1 2 0 0.2375 1 0.7625
359 1 1 1 1
360 1 2 0 0.3 1 0.7
361 1 1 1 1
362 1 2 0 0.2375 1 0.7625
363 1 1 1 1
364 1 2 0 0.2375 1 0.7625
365 1 1 1 1
366 1 2 0 0.175 1 0.825
367 1 1 1 1
368 1 2 0 0.3 1 0.7
369 1 1 1 1
370 1 2 0 0.2375 1 0.7625
371 1 1 1 1
372 1 2 0 0.2375 1 0.7625
373 1 1 1 1
374 1 2 0 0.175 1 0.825
375 1 1 1 1
376 1 2 0 0.2375 1 0.7625
377 1 1 1 1
378 1 2 0 0.175 1 0.825
379 1 1 1 1
380 1 2 0 0.175 1 0.825
381 1 1 1 1
382 1 2 0 0.1125 1 0.8875
383 1 1 1 1
384 0 2 0 0.97 1 0.03
385 1 1 1 1
386 0 2 0 0.97 1 0.03
387 1 1 1 1
388 0 2 0 0.97 1 0.03
389 1 1 1 1
390 0 2 0 0.97 1 0.03
391 1 1 1 1
392 0 2 0 0.97 1 0.03
393 1 1 1 1
394 0 2 0 0.97 1 0.03
395 1 1 1 1
396 0 2 0 0.97 1 0.03
397 1 1 1 1
398 0 2 0 0.97 1 0.03
399 1 1 1 1
400 0 2 0 0.97 1 0.03
401 1 1 1 1
402 0 2 0 0.97 1 0.03
403 1 1 1 1
404 0 2 0 0.97 1 0.03
405 1 1 1 1
406 0 2 0 0.97 1 0.03
407 1 1 1 1
408 0 2 0 0.97 1 0.03
409 1 1 1 1
410 0 2 0 0.97 1 0.03
411 1 1 1 1
412 0 2 0 0.97 1 0.03
413 1 1 1 1
414 0 2 0 0.97 1 0.03
415 1 1 1 1
416 0 2 0 0.97 1 0.03
417 1 1 1 1
418 0 2 0 0.97 1 0.03
419 1 1 1 1
420 0 2 0 0.97 1 0.03
421 1 1 1 1
422 0 2 0 0.97 1 0.03
423 1 1 1 1
424 0 2 0 0.97 1 0.03
425 1 1 1 1
426 0 2 0 0.97 1 0.03
427 1 1 1 1
428 0 2 0 0.97 1 0.03
429 1 1 1 1
430 0 2 0 0.97 1 0.03
431 1 1 1 1
432 0 2 0 0.97 1 0.03
433 1 1 1 1
434 0 2 0 0.97 1 0.03
435 1 1 1 1
436 0 2 0 0.97 1 0.03
437 1 1 1 1
438 0 2 0 0.97 1 0.03
439 1 1 1 1
440 0 2 0 0.97 1 0.03
441 1 1 1 1
442 0 2 0 0.97 1 0.03
443 1 1 1 1
444 0 2 0 0.97 1 0.03
445 1 1 1 1
446 0 2 0 0.97 1 0.03
447 1 1 1 1
448 1 2 0 0.3625 1 0.6375
449 1 1 1 1
450 1 2 0 0.3 1 0.7
451 1 1 1 1
452 1 2 0 0.3 1 0.7
453 1 1 1 1
454 1 2 0 0.2375 1 0.7625
455 1 1 1 1
456 1 2 0 0.3 1 0.7
457 1 1 1 1
458 1 2 0 0.2375 1 0.7625
459 1 1 1 1
460 1 2 0 0.2375 1 0.7625
461 1 1 1 1
462 1 2 0 0.175 1 0.825
463 1 1 1 1
464 1 2 0 0.3 1 0.7
465 1 1 1 1
466 1 2 0 0.2375 1 0.7625
467 1 1 1 1
468 1 2 0 0.2375 1 0.7625
469 1 1 1 1
470 1 2 0 0.175 1 0.825
471 1 1 1 1
472 1 2 0 0.2375 1 0.7625
473 1 1 1 1
474 1 2 0 0.175 1 0.825
475 1 1 1 1
476 1 2 0 0.175 1 0.825
477 1 1 1 1
478 1 2 0 0.1125 1 0.8875
479 1 1 1 1
480 1 2 0 0.3 1 0.7
481 1 1 1 1
482 1 2 0 0.2375 1 0.7625
483 1 1 1 1
484 1 2 0 0.2375 1 0.7625
485 1 1 1 1
486 1 2 0 0.175 1 0.825
487 1 1 1 1
488 1 2 0 0.2375 1 0.7625
489 1 1 1 1
490 1 2 0 0.175 1 0.825
491 1 1 1 1
492 1 2 0 0.175 1 0.825
493 1 1 1 1
494 1 2 0 0.1125 1 0.8875
495 1 1 1 1
496 1 2 0 0.2375 1 0.7625
497 1 1 1 1
498 1 2 0 0.175 1 0.825
499 1 1 1 1
500 1 2 0 0.175 1 0.825
501 1 1 1 1
502 1 2 0 0.1125 1 0.8875
503 1 1 1 1
504 1 2 0 0.175 1 0.825
505 1 1 1 1
506 1 2 0 0.1125 1 0.8875
507 1 1 1 1
508 1 2 0 0.1125 1 0.8875
509 1 1 1 1
510 1 2 0 0.05 1 0.95
511 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
13122
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
23
## name
running(c30)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(23) : $c(1)) ($s(23) : Bernoulli(+(/(*(+($s(9) $s(21) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(23) : $c(1)) ($s(23) : <=($c(0.5) +(/(*(+($s(9) $s(21) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
23
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
24
## name
running(c4)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(24) : $c(1)) ($s(24) : Bernoulli(+(/(*(+($s(9) $s(14) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(24) : $c(1)) ($s(24) : <=($c(0.5) +(/(*(+($s(9) $s(14) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
24
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
25
## name
running(c5)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(25) : $c(1)) ($s(25) : Bernoulli(+(/(*(+($s(15) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(25) : $c(1)) ($s(25) : <=($c(0.5) +(/(*(+($s(15) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
25
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
26
## name
running(c6)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(26) : $c(1)) ($s(26) : Bernoulli(+(/(*(+($s(14) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(26) : $c(1)) ($s(26) : <=($c(0.5) +(/(*(+($s(14) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
26
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
27
## name
running(c7)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(27) : $c(1)) ($s(27) : Bernoulli(+(/(*(+($s(28) $s(15) $s(23) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(27) : $c(1)) ($s(27) : <=($c(0.5) +(/(*(+($s(28) $s(15) $s(23) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
27
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 1 2 0 0.425 1 0.575
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 1 2 0 0.3 1 0.7
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.97 1 0.03
17 1 1 1 1
18 0 2 0 0.97 1 0.03
19 1 1 1 1
20 0 2 0 0.97 1 0.03
21 1 1 1 1
22 0 2 0 0.97 1 0.03
23 1 1 1 1
24 1 2 0 0.3 1 0.7
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
28
## name
running(c8)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(28) : $c(1)) ($s(28) : Bernoulli(+(/(*(+($s(0) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(28) : $c(1)) ($s(28) : <=($c(0.5) +(/(*(+($s(0) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
28
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0

## index
29
## name
running(c9)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(29) : $c(1)) ($s(29) : Bernoulli(+(/(*(+($s(1) $s(10) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.03))) )
## determinized formula
switch( ($a(29) : $c(1)) ($s(29) : <=($c(0.5) +(/(*(+($s(1) $s(10) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
29
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.97 1 0.03
1 1 1 1 1
2 0 2 0 0.97 1 0.03
3 1 1 1 1
4 0 2 0 0.97 1 0.03
5 1 1 1 1
6 0 2 0 0.97 1 0.03
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0



#####REWARD#####
## formula
+(-($s(0) *($a(0) $c(0.75))) -($s(11) *($a(11) $c(0.75))) -($s(22) *($a(22) $c(0.75))) -($s(24) *($a(24) $c(0.75))) -($s(25) *($a(25) $c(0.75))) -($s(26) *($a(26) $c(0.75))) -($s(27) *($a(27) $c(0.75))) -($s(28) *($a(28) $c(0.75))) -($s(29) *($a(29) $c(0.75))) -($s(1) *($a(1) $c(0.75))) -($s(2) *($a(2) $c(0.75))) -($s(3) *($a(3) $c(0.75))) -($s(4) *($a(4) $c(0.75))) -($s(5) *($a(5) $c(0.75))) -($s(6) *($a(6) $c(0.75))) -($s(7) *($a(7) $c(0.75))) -($s(8) *($a(8) $c(0.75))) -($s(9) *($a(9) $c(0.75))) -($s(10) *($a(10) $c(0.75))) -($s(12) *($a(12) $c(0.75))) -($s(13) *($a(13) $c(0.75))) -($s(14) *($a(14) $c(0.75))) -($s(15) *($a(15) $c(0.75))) -($s(16) *($a(16) $c(0.75))) -($s(17) *($a(17) $c(0.75))) -($s(18) *($a(18) $c(0.75))) -($s(19) *($a(19) $c(0.75))) -($s(20) *($a(20) $c(0.75))) -($s(21) *($a(21) $c(0.75))) -($s(23) *($a(23) $c(0.75))))
## min
-0.75
## max
30
## independent from actions
0
## hash index
30
## caching type
MAP
## kleene caching type
MAP
## action hash keys
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
11 11
12 12
13 13
14 14
15 15
16 16
17 17
18 18
19 19
20 20
21 21
22 22
23 23
24 24
25 25
26 26
27 27
28 28
29 29
30 30


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
4
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
## relevant preconditions
0


## index
5
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
6
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
## relevant preconditions
0


## index
7
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
## relevant preconditions
0


## index
8
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
9
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
10
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
11
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
12
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
13
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
14
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
15
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
16
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
17
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
18
## state
0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
19
## state
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
20
## state
0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
21
## state
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
22
## state
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
23
## state
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
24
## state
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
25
## state
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
26
## state
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
27
## state
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
28
## state
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
29
## state
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
30
## state
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####

#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
5
0 2
8 2
21 2
28 2
30 31
## kleene state fluent hash keys (first line is the number of keys)
5
0 2
8 2
21 2
28 2
30 31

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
5
1 2
9 2
17 2
29 2
30 62
## kleene state fluent hash keys (first line is the number of keys)
5
1 2
9 2
17 2
29 2
30 93

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
5
1 4
2 2
6 2
22 2
30 124
## kleene state fluent hash keys (first line is the number of keys)
5
1 6
2 2
6 2
22 2
30 279

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
5
3 2
6 4
13 2
17 4
30 248
## kleene state fluent hash keys (first line is the number of keys)
5
3 2
6 6
13 2
17 6
30 837

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
5
4 2
6 8
13 4
20 2
30 496
## kleene state fluent hash keys (first line is the number of keys)
5
4 2
6 18
13 6
20 2
30 2511

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
4
5 2
11 2
18 2
30 992
## kleene state fluent hash keys (first line is the number of keys)
4
5 2
11 2
18 2
30 7533

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
3
6 16
17 8
30 1984
## kleene state fluent hash keys (first line is the number of keys)
3
6 54
17 18
30 22599

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
5
1 8
7 2
10 2
20 4
30 3968
## kleene state fluent hash keys (first line is the number of keys)
5
1 18
7 2
10 2
20 6
30 67797

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
5
8 4
13 8
15 2
19 2
30 7936
## kleene state fluent hash keys (first line is the number of keys)
5
8 6
13 18
15 2
19 2
30 203391

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
5
9 4
10 4
23 2
24 2
30 15872
## kleene state fluent hash keys (first line is the number of keys)
5
9 6
10 6
23 2
24 2
30 610173

## index
10
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
5
10 8
18 4
22 4
29 4
30 31744
## kleene state fluent hash keys (first line is the number of keys)
5
10 18
18 6
22 6
29 6
30 1830519

## index
11
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
5
11 4
13 16
19 4
22 8
30 63488
## kleene state fluent hash keys (first line is the number of keys)
5
11 6
13 54
19 6
22 18
30 5491557

## index
12
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
531441
## state fluent hash keys (first line is the number of keys)
5
12 2
17 16
19 8
22 16
30 126976
## kleene state fluent hash keys (first line is the number of keys)
5
12 2
17 54
19 18
22 54
30 16474671

## index
13
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
1594323
## state fluent hash keys (first line is the number of keys)
3
13 32
18 8
30 253952
## kleene state fluent hash keys (first line is the number of keys)
3
13 162
18 18
30 49424013

## index
14
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
4782969
## state fluent hash keys (first line is the number of keys)
5
7 4
14 2
24 4
26 2
30 507904
## kleene state fluent hash keys (first line is the number of keys)
5
7 6
14 2
24 6
26 2
30 148272039

## index
15
## state hash key (for each value in the domain)
0 32768
## kleene state hash key base
14348907
## state fluent hash keys (first line is the number of keys)
5
15 4
19 16
25 2
27 2
30 1015808
## kleene state fluent hash keys (first line is the number of keys)
5
15 6
19 54
25 2
27 2
30 444816117

## index
16
## state hash key (for each value in the domain)
0 65536
## kleene state hash key base
43046721
## state fluent hash keys (first line is the number of keys)
4
9 8
11 8
16 2
30 2031616
## kleene state fluent hash keys (first line is the number of keys)
4
9 18
11 18
16 2
30 1334448351

## index
17
## state hash key (for each value in the domain)
0 131072
## kleene state hash key base
129140163
## state fluent hash keys (first line is the number of keys)
4
0 4
6 32
17 32
30 4063232
## kleene state fluent hash keys (first line is the number of keys)
4
0 6
6 162
17 162
30 4003345053

## index
18
## state hash key (for each value in the domain)
0 262144
## kleene state hash key base
387420489
## state fluent hash keys (first line is the number of keys)
5
10 16
18 16
19 32
21 4
30 8126464
## kleene state fluent hash keys (first line is the number of keys)
5
10 54
18 54
19 162
21 6
30 12010035159

## index
19
## state hash key (for each value in the domain)
0 524288
## kleene state hash key base
1162261467
## state fluent hash keys (first line is the number of keys)
5
4 4
19 64
21 8
22 32
30 16252928
## kleene state fluent hash keys (first line is the number of keys)
5
4 6
19 486
21 18
22 162
30 36030105477

## index
20
## state hash key (for each value in the domain)
0 1048576
## kleene state hash key base
3486784401
## state fluent hash keys (first line is the number of keys)
5
10 32
14 4
17 64
20 8
30 32505856
## kleene state fluent hash keys (first line is the number of keys)
5
10 162
14 6
17 486
20 18
30 108090316431

## index
21
## state hash key (for each value in the domain)
0 2097152
## kleene state hash key base
10460353203
## state fluent hash keys (first line is the number of keys)
5
8 8
9 16
21 16
23 4
30 65011712
## kleene state fluent hash keys (first line is the number of keys)
5
8 18
9 54
21 54
23 6
30 324270949293

## index
22
## state hash key (for each value in the domain)
0 4194304
## kleene state hash key base
31381059609
## state fluent hash keys (first line is the number of keys)
4
13 64
17 128
22 64
30 130023424
## kleene state fluent hash keys (first line is the number of keys)
4
13 486
17 1458
22 486
30 972812847879

## index
23
## state hash key (for each value in the domain)
0 8388608
## kleene state hash key base
94143178827
## state fluent hash keys (first line is the number of keys)
5
4 8
20 16
23 8
27 4
30 260046848
## kleene state fluent hash keys (first line is the number of keys)
5
4 18
20 54
23 18
27 6
30 2918438543637

## index
24
## state hash key (for each value in the domain)
0 16777216
## kleene state hash key base
282429536481
## state fluent hash keys (first line is the number of keys)
5
2 4
18 32
20 32
24 8
30 520093696
## kleene state fluent hash keys (first line is the number of keys)
5
2 6
18 162
20 162
24 18
30 8755315630911

## index
25
## state hash key (for each value in the domain)
0 33554432
## kleene state hash key base
847288609443
## state fluent hash keys (first line is the number of keys)
5
9 32
21 32
22 128
25 4
30 1040187392
## kleene state fluent hash keys (first line is the number of keys)
5
9 162
21 162
22 1458
25 6
30 26265946892733

## index
26
## state hash key (for each value in the domain)
0 67108864
## kleene state hash key base
2541865828329
## state fluent hash keys (first line is the number of keys)
5
3 4
8 16
19 128
26 4
30 2080374784
## kleene state fluent hash keys (first line is the number of keys)
5
3 6
8 54
19 1458
26 6
30 78797840678199

## index
27
## state hash key (for each value in the domain)
0 134217728
## kleene state hash key base
7625597484987
## state fluent hash keys (first line is the number of keys)
5
1 16
9 64
12 4
27 8
30 4160749568
## kleene state fluent hash keys (first line is the number of keys)
5
1 54
9 486
12 6
27 18
30 236393522034597

## index
28
## state hash key (for each value in the domain)
0 268435456
## kleene state hash key base
22876792454961
## state fluent hash keys (first line is the number of keys)
5
3 8
12 8
27 16
28 4
30 8321499136
## kleene state fluent hash keys (first line is the number of keys)
5
3 18
12 18
27 54
28 6
30 709180566103791

## index
29
## state hash key (for each value in the domain)
0 536870912
## kleene state hash key base
68630377364883
## state fluent hash keys (first line is the number of keys)
4
4 16
22 256
29 8
30 16642998272
## kleene state fluent hash keys (first line is the number of keys)
4
4 54
22 4374
29 18
30 2127541698311373



#####TRAINING SET#####
200
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 0 1 0 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 1 0 0 0 1 1 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 0 1 0 1 1 1 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
0 1 0 1 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
0 1 1 0 1 1 0 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 
1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
1 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 1 0 1 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 
1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 
0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 
0 0 1 0 0 1 1 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 
0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 
0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 
0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 
1 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 1 0 0 1 1 0 1 0 0 0 0 0 
0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
1 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 
0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 
0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 1 0 1 0 0 1 0 0 0 1 0 0 0 0 
0 0 1 0 1 1 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 
0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 
0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 
0 0 0 0 1 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
1 0 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 
0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 
0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 
0 0 0 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 
0 1 0 0 0 1 1 0 0 1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0 
1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 0 1 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 1 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 
0 1 1 1 1 1 0 0 1 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 0 
0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 1 1 0 0 0 
0 1 0 0 1 0 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 1 0 1 1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 0 0 0 0 1 0 1 1 0 0 0 
1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 0 0 0 
1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 0 1 1 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 1 0 1 0 1 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 
0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 
0 0 0 0 1 1 0 1 1 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 1 0 0 
0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 
0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 0 0 1 1 0 0 
0 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 
0 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 
0 0 0 0 0 1 0 1 1 0 0 1 1 0 1 0 1 0 0 0 1 0 0 0 0 1 1 1 0 0 
0 1 0 1 0 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 1 1 0 0 
0 0 0 0 0 1 0 0 0 0 1 0 1 1 1 0 1 0 1 1 0 0 0 1 0 1 1 1 0 0 
0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 0 1 0 1 1 1 0 0 
0 0 1 0 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1 0 0 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 
1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 
1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 
0 1 1 1 0 1 1 1 0 0 0 1 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 1 0 
0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 
0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 
1 0 0 0 0 1 1 1 0 0 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 1 0 
0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 
1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 
1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 0 
0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 
0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 
0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 
1 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 1 0 1 1 0 1 0 0 1 0 0 0 1 0 
1 0 0 1 0 1 0 0 0 0 1 0 1 0 0 1 0 1 1 1 0 1 0 0 1 0 0 0 1 0 
0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 
0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 
0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 1 0 1 0 0 1 0 
0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 
1 0 0 0 0 1 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 
1 0 0 0 0 1 1 1 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 
0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 
0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 
0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 1 0 0 1 1 0 1 0 1 0 
1 0 0 0 1 0 1 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 1 0 1 0 
1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 
1 0 1 1 1 1 1 0 1 0 0 1 0 1 0 1 1 1 0 1 0 0 0 1 1 1 1 0 1 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 
0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 1 0 
0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 1 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 
0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 
0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 1 0 
0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 0 1 0 0 0 1 1 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 1 1 0 
1 0 1 0 0 0 0 0 1 1 0 1 1 0 1 1 1 0 0 1 0 1 1 0 0 1 0 1 1 0 
0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 0 0 1 1 0 1 0 1 1 0 
0 0 0 1 0 0 0 1 1 1 1 0 1 0 0 1 1 1 0 0 0 0 1 1 1 1 0 1 1 0 
1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 1 1 1 1 0 
1 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 1 0 
1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 1 1 1 1 1 0 
1 1 1 1 0 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 1 0 
1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 0 
1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 
0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 
0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 
0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 
1 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 0 0 1 
0 0 1 1 1 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 
1 1 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 0 0 0 0 1 0 0 0 1 
1 0 0 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 0 1 1 1 0 0 0 1 
1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 
0 0 1 1 1 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 
0 0 0 1 0 1 1 0 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 
1 0 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 1 1 1 1 1 0 0 1 
0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 
1 0 1 0 1 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 
0 1 1 0 1 0 1 1 1 0 0 1 0 1 0 0 1 0 0 0 1 0 0 1 0 0 1 1 0 1 
0 1 1 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 
0 1 1 0 1 1 1 1 0 0 1 1 1 0 0 0 1 1 1 0 0 1 0 1 0 1 1 1 0 1 
1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 0 1 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 
0 0 0 0 1 1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 
0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 1 
0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 
1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 
0 0 0 1 0 1 0 0 0 0 1 1 1 0 0 0 1 1 0 0 1 1 0 0 0 0 0 0 1 1 
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 1 1 
0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 1 0 1 1 0 1 0 0 1 0 0 0 1 1 
0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 
0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 1 1 
0 0 1 1 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 1 
0 0 0 1 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 1 1 
0 0 1 1 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 
0 0 0 1 0 1 0 1 1 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 
0 0 1 1 0 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 1 
1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 1 1 
1 0 1 0 0 1 1 0 1 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 0 1 0 1 1 1 
1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 
0 0 0 1 1 0 1 0 1 1 1 0 1 0 0 1 1 1 0 0 0 0 1 1 1 1 0 1 1 1 
1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 0 1 1 1 
1 1 0 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1 1 1 0 1 0 0 0 0 1 1 1 1 
1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 
1 1 1 1 1 1 0 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 1 1 1 1 1 
1 0 1 0 0 0 0 0 1 1 0 1 1 1 0 1 1 0 0 1 0 1 1 0 0 1 1 1 1 1 
1 0 0 0 0 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 
1 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 
1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 
0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 
0 1 0 0 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
0 1 0 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
