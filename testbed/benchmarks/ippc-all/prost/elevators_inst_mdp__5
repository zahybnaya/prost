#####TASK#####
## name
elevators_inst_mdp__5
## horizon
40
## discount factor
1
## number of action fluents
8
## number of det state fluents
16
## number of prob state fluents
4
## number of preconds
0
## number of actions
25
## number of hashing functions
21
## initial state
1 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
5619
## number of unique states that were encountered during task analysis
3109
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
close-door(e0)
## number of values
2
## values
0 false
1 true

## index
1
## name
close-door(e1)
## number of values
2
## values
0 false
1 true

## index
2
## name
move-current-dir(e0)
## number of values
2
## values
0 false
1 true

## index
3
## name
move-current-dir(e1)
## number of values
2
## values
0 false
1 true

## index
4
## name
open-door-going-down(e0)
## number of values
2
## values
0 false
1 true

## index
5
## name
open-door-going-down(e1)
## number of values
2
## values
0 false
1 true

## index
6
## name
open-door-going-up(e0)
## number of values
2
## values
0 false
1 true

## index
7
## name
open-door-going-up(e1)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
elevator-at-floor(e0, f0)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(8)) ~($a(2))) : $s(0)) (and($a(2) ~($s(10)) $s(1)) : $c(1)) (and($a(2) $s(10) ~($s(0))) : $s(0)) (and($a(2) ~($s(10))) : $s(0)) ($c(1) : $c(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 1
3 1
4 0
5 0
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 1
19 1
20 0
21 0
22 1
23 1
24 0
25 0
26 1
27 0
28 0
29 0
30 1
31 0
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 1
17 1
18 0
19 0
20 1
21 0
22 0
23 0
24 0

## index
1
## name
elevator-at-floor(e0, f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(8)) ~($a(2))) : $s(1)) (and($a(2) $s(10) $s(0)) : $c(1)) (and($a(2) ~($s(10)) $s(2)) : $c(1)) (and($a(2) $s(10) ~($s(1))) : $s(1)) (and($a(2) ~($s(10)) ~($s(1))) : $s(1)) ($c(1) : $c(0)) )
## hash index
1
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 1
17 1
18 0
19 0
20 1
21 0
22 0
23 0
24 0

## index
2
## name
elevator-at-floor(e0, f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(8)) ~($a(2))) : $s(2)) (and($a(2) $s(10) $s(1)) : $c(1)) (and($a(2) ~($s(10)) $s(3)) : $c(1)) (and($a(2) $s(10) ~($s(2))) : $s(2)) (and($a(2) ~($s(10)) ~($s(2))) : $s(2)) ($c(1) : $c(0)) )
## hash index
2
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 1
17 1
18 0
19 0
20 1
21 0
22 0
23 0
24 0

## index
3
## name
elevator-at-floor(e0, f3)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(8)) ~($a(2))) : $s(3)) (and($a(2) $s(10) $s(2)) : $c(1)) (and($a(2) $s(10)) : $s(3)) (and($a(2) ~($s(10)) ~($s(3))) : $s(3)) ($c(1) : $c(0)) )
## hash index
3
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 0
25 0
26 0
27 1
28 1
29 1
30 1
31 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 1
17 1
18 0
19 0
20 1
21 0
22 0
23 0
24 0

## index
4
## name
elevator-at-floor(e1, f0)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(9)) ~($a(3))) : $s(4)) (and($a(3) ~($s(11)) $s(5)) : $c(1)) (and($a(3) $s(11) ~($s(4))) : $s(4)) (and($a(3) ~($s(11))) : $s(4)) ($c(1) : $c(0)) )
## hash index
4
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 1
3 1
4 0
5 0
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 1
19 1
20 0
21 0
22 1
23 1
24 0
25 0
26 1
27 0
28 0
29 0
30 1
31 0
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 1
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 1
24 0

## index
5
## name
elevator-at-floor(e1, f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(9)) ~($a(3))) : $s(5)) (and($a(3) $s(11) $s(4)) : $c(1)) (and($a(3) ~($s(11)) $s(6)) : $c(1)) (and($a(3) $s(11) ~($s(5))) : $s(5)) (and($a(3) ~($s(11)) ~($s(5))) : $s(5)) ($c(1) : $c(0)) )
## hash index
5
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 1
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 1
24 0

## index
6
## name
elevator-at-floor(e1, f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(9)) ~($a(3))) : $s(6)) (and($a(3) $s(11) $s(5)) : $c(1)) (and($a(3) ~($s(11)) $s(7)) : $c(1)) (and($a(3) $s(11) ~($s(6))) : $s(6)) (and($a(3) ~($s(11)) ~($s(6))) : $s(6)) ($c(1) : $c(0)) )
## hash index
6
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 1
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 1
24 0

## index
7
## name
elevator-at-floor(e1, f3)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(9)) ~($a(3))) : $s(7)) (and($a(3) $s(11) $s(6)) : $c(1)) (and($a(3) $s(11)) : $s(7)) (and($a(3) ~($s(11)) ~($s(7))) : $s(7)) ($c(1) : $c(0)) )
## hash index
7
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 0
25 0
26 0
27 1
28 1
29 1
30 1
31 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 1
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 1
24 0

## index
8
## name
elevator-closed(e0)
## number of values
2
## values
0 false
1 true
## formula
or(and($s(8) ~($a(6)) ~($a(4))) $a(0))
## hash index
8
## caching type 
VECTOR
## precomputed results
8
0 0
1 0
2 0
3 1
4 1
5 0
6 0
7 1
## kleene caching type
VECTOR
## kleene caching vec size
12
## action hash keys
0 0
1 0
2 1
3 0
4 2
5 0
6 0
7 0
8 3
9 1
10 1
11 2
12 2
13 1
14 2
15 0
16 0
17 0
18 1
19 2
20 0
21 3
22 3
23 3
24 3

## index
9
## name
elevator-closed(e1)
## number of values
2
## values
0 false
1 true
## formula
or(and($s(9) ~($a(7)) ~($a(5))) $a(1))
## hash index
9
## caching type 
VECTOR
## precomputed results
8
0 0
1 0
2 0
3 1
4 1
5 0
6 0
7 1
## kleene caching type
VECTOR
## kleene caching vec size
12
## action hash keys
0 0
1 1
2 0
3 2
4 0
5 0
6 0
7 3
8 0
9 1
10 2
11 1
12 2
13 0
14 0
15 1
16 2
17 0
18 3
19 3
20 3
21 1
22 2
23 0
24 3

## index
10
## name
elevator-dir-up(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(6) : $c(1)) ($a(4) : $c(0)) ($c(1) : $s(10)) )
## hash index
10
## caching type 
VECTOR
## precomputed results
6
0 0
1 1
2 0
3 1
4 1
5 0
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 0
2 1
3 0
4 2
5 0
6 0
7 0
8 0
9 1
10 1
11 2
12 2
13 1
14 2
15 0
16 0
17 0
18 1
19 2
20 0
21 0
22 0
23 0
24 0

## index
11
## name
elevator-dir-up(e1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(7) : $c(1)) ($a(5) : $c(0)) ($c(1) : $s(11)) )
## hash index
11
## caching type 
VECTOR
## precomputed results
6
0 0
1 1
2 0
3 1
4 1
5 0
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 1
2 0
3 2
4 0
5 0
6 0
7 0
8 0
9 1
10 2
11 1
12 2
13 0
14 0
15 1
16 2
17 0
18 0
19 0
20 0
21 1
22 2
23 0
24 0

## index
12
## name
person-in-elevator-going-down(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(12) : ~($s(0))) ($c(1) : or(and($s(1) ~($s(10)) ~($s(8)) $s(16)) and($s(2) ~($s(10)) ~($s(8)) $s(17)))) )
## hash index
12
## caching type 
VECTOR
## precomputed results
256
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 0
34 1
35 0
36 1
37 0
38 1
39 0
40 1
41 0
42 1
43 0
44 1
45 0
46 1
47 0
48 1
49 0
50 1
51 0
52 1
53 0
54 1
55 0
56 1
57 0
58 1
59 0
60 1
61 0
62 1
63 0
64 0
65 0
66 1
67 1
68 0
69 0
70 1
71 1
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 0
83 0
84 0
85 0
86 0
87 0
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 0
98 1
99 0
100 1
101 0
102 1
103 0
104 1
105 0
106 1
107 0
108 1
109 0
110 1
111 0
112 1
113 0
114 1
115 0
116 1
117 0
118 1
119 0
120 1
121 0
122 1
123 0
124 1
125 0
126 1
127 0
128 0
129 0
130 0
131 0
132 1
133 1
134 1
135 1
136 0
137 0
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 0
147 0
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
160 1
161 0
162 1
163 0
164 1
165 0
166 1
167 0
168 1
169 0
170 1
171 0
172 1
173 0
174 1
175 0
176 1
177 0
178 1
179 0
180 1
181 0
182 1
183 0
184 1
185 0
186 1
187 0
188 1
189 0
190 1
191 0
192 0
193 0
194 1
195 1
196 1
197 1
198 1
199 1
200 0
201 0
202 0
203 0
204 0
205 0
206 0
207 0
208 0
209 0
210 0
211 0
212 0
213 0
214 0
215 0
216 0
217 0
218 0
219 0
220 0
221 0
222 0
223 0
224 1
225 0
226 1
227 0
228 1
229 0
230 1
231 0
232 1
233 0
234 1
235 0
236 1
237 0
238 1
239 0
240 1
241 0
242 1
243 0
244 1
245 0
246 1
247 0
248 1
249 0
250 1
251 0
252 1
253 0
254 1
255 0
## kleene caching type
VECTOR
## kleene caching vec size
6561
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
13
## name
person-in-elevator-going-down(e1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(13) : ~($s(4))) ($c(1) : or(and($s(5) ~($s(11)) ~($s(9)) $s(16)) and($s(6) ~($s(11)) ~($s(9)) $s(17)))) )
## hash index
13
## caching type 
VECTOR
## precomputed results
256
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 0
34 1
35 0
36 1
37 0
38 1
39 0
40 1
41 0
42 1
43 0
44 1
45 0
46 1
47 0
48 1
49 0
50 1
51 0
52 1
53 0
54 1
55 0
56 1
57 0
58 1
59 0
60 1
61 0
62 1
63 0
64 0
65 0
66 1
67 1
68 0
69 0
70 1
71 1
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 0
83 0
84 0
85 0
86 0
87 0
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 0
98 1
99 0
100 1
101 0
102 1
103 0
104 1
105 0
106 1
107 0
108 1
109 0
110 1
111 0
112 1
113 0
114 1
115 0
116 1
117 0
118 1
119 0
120 1
121 0
122 1
123 0
124 1
125 0
126 1
127 0
128 0
129 0
130 0
131 0
132 1
133 1
134 1
135 1
136 0
137 0
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 0
147 0
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
160 1
161 0
162 1
163 0
164 1
165 0
166 1
167 0
168 1
169 0
170 1
171 0
172 1
173 0
174 1
175 0
176 1
177 0
178 1
179 0
180 1
181 0
182 1
183 0
184 1
185 0
186 1
187 0
188 1
189 0
190 1
191 0
192 0
193 0
194 1
195 1
196 1
197 1
198 1
199 1
200 0
201 0
202 0
203 0
204 0
205 0
206 0
207 0
208 0
209 0
210 0
211 0
212 0
213 0
214 0
215 0
216 0
217 0
218 0
219 0
220 0
221 0
222 0
223 0
224 1
225 0
226 1
227 0
228 1
229 0
230 1
231 0
232 1
233 0
234 1
235 0
236 1
237 0
238 1
239 0
240 1
241 0
242 1
243 0
244 1
245 0
246 1
247 0
248 1
249 0
250 1
251 0
252 1
253 0
254 1
255 0
## kleene caching type
VECTOR
## kleene caching vec size
6561
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
14
## name
person-in-elevator-going-up(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(14) : ~($s(3))) ($c(1) : or(and($s(1) $s(10) ~($s(8)) $s(18)) and($s(2) $s(10) ~($s(8)) $s(19)))) )
## hash index
14
## caching type 
VECTOR
## precomputed results
256
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 1
34 1
35 1
36 0
37 0
38 0
39 0
40 1
41 1
42 1
43 1
44 0
45 0
46 0
47 0
48 1
49 1
50 1
51 1
52 0
53 0
54 0
55 0
56 1
57 1
58 1
59 1
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 1
82 0
83 1
84 0
85 1
86 0
87 1
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 1
98 1
99 1
100 0
101 0
102 0
103 0
104 1
105 1
106 1
107 1
108 0
109 0
110 0
111 0
112 1
113 1
114 1
115 1
116 0
117 0
118 0
119 0
120 1
121 1
122 1
123 1
124 0
125 0
126 0
127 0
128 0
129 0
130 0
131 0
132 0
133 0
134 0
135 0
136 0
137 0
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 1
147 1
148 0
149 0
150 1
151 1
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
160 1
161 1
162 1
163 1
164 0
165 0
166 0
167 0
168 1
169 1
170 1
171 1
172 0
173 0
174 0
175 0
176 1
177 1
178 1
179 1
180 0
181 0
182 0
183 0
184 1
185 1
186 1
187 1
188 0
189 0
190 0
191 0
192 0
193 0
194 0
195 0
196 0
197 0
198 0
199 0
200 0
201 0
202 0
203 0
204 0
205 0
206 0
207 0
208 0
209 1
210 1
211 1
212 0
213 1
214 1
215 1
216 0
217 0
218 0
219 0
220 0
221 0
222 0
223 0
224 1
225 1
226 1
227 1
228 0
229 0
230 0
231 0
232 1
233 1
234 1
235 1
236 0
237 0
238 0
239 0
240 1
241 1
242 1
243 1
244 0
245 0
246 0
247 0
248 1
249 1
250 1
251 1
252 0
253 0
254 0
255 0
## kleene caching type
VECTOR
## kleene caching vec size
6561
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
15
## name
person-in-elevator-going-up(e1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(15) : ~($s(7))) ($c(1) : or(and($s(5) $s(11) ~($s(9)) $s(18)) and($s(6) $s(11) ~($s(9)) $s(19)))) )
## hash index
15
## caching type 
VECTOR
## precomputed results
256
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 1
34 1
35 1
36 0
37 0
38 0
39 0
40 1
41 1
42 1
43 1
44 0
45 0
46 0
47 0
48 1
49 1
50 1
51 1
52 0
53 0
54 0
55 0
56 1
57 1
58 1
59 1
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 1
82 0
83 1
84 0
85 1
86 0
87 1
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 1
98 1
99 1
100 0
101 0
102 0
103 0
104 1
105 1
106 1
107 1
108 0
109 0
110 0
111 0
112 1
113 1
114 1
115 1
116 0
117 0
118 0
119 0
120 1
121 1
122 1
123 1
124 0
125 0
126 0
127 0
128 0
129 0
130 0
131 0
132 0
133 0
134 0
135 0
136 0
137 0
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 1
147 1
148 0
149 0
150 1
151 1
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
160 1
161 1
162 1
163 1
164 0
165 0
166 0
167 0
168 1
169 1
170 1
171 1
172 0
173 0
174 0
175 0
176 1
177 1
178 1
179 1
180 0
181 0
182 0
183 0
184 1
185 1
186 1
187 1
188 0
189 0
190 0
191 0
192 0
193 0
194 0
195 0
196 0
197 0
198 0
199 0
200 0
201 0
202 0
203 0
204 0
205 0
206 0
207 0
208 0
209 1
210 1
211 1
212 0
213 1
214 1
215 1
216 0
217 0
218 0
219 0
220 0
221 0
222 0
223 0
224 1
225 1
226 1
227 1
228 0
229 0
230 0
231 0
232 1
233 1
234 1
235 1
236 0
237 0
238 0
239 0
240 1
241 1
242 1
243 1
244 0
245 0
246 0
247 0
248 1
249 1
250 1
251 1
252 0
253 0
254 0
255 0
## kleene caching type
VECTOR
## kleene caching vec size
6561
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
person-waiting-down(f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(16) ~(or(and($s(1) ~($s(10)) ~($s(8))) and($s(5) ~($s(11)) ~($s(9)))))) : $c(1)) ($c(1) : Bernoulli($c(0.06492667))) )
## determinized formula
and($s(16) ~(or(and($s(1) ~($s(10)) ~($s(8))) and($s(5) ~($s(11)) ~($s(9))))))
## hash index
16
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.93507333 1 0.06492667
1 0 2 0 0.93507333 1 0.06492667
2 0 2 0 0.93507333 1 0.06492667
3 0 2 0 0.93507333 1 0.06492667
4 0 2 0 0.93507333 1 0.06492667
5 0 2 0 0.93507333 1 0.06492667
6 0 2 0 0.93507333 1 0.06492667
7 0 2 0 0.93507333 1 0.06492667
8 0 2 0 0.93507333 1 0.06492667
9 0 2 0 0.93507333 1 0.06492667
10 0 2 0 0.93507333 1 0.06492667
11 0 2 0 0.93507333 1 0.06492667
12 0 2 0 0.93507333 1 0.06492667
13 0 2 0 0.93507333 1 0.06492667
14 0 2 0 0.93507333 1 0.06492667
15 0 2 0 0.93507333 1 0.06492667
16 0 2 0 0.93507333 1 0.06492667
17 0 2 0 0.93507333 1 0.06492667
18 0 2 0 0.93507333 1 0.06492667
19 0 2 0 0.93507333 1 0.06492667
20 0 2 0 0.93507333 1 0.06492667
21 0 2 0 0.93507333 1 0.06492667
22 0 2 0 0.93507333 1 0.06492667
23 0 2 0 0.93507333 1 0.06492667
24 0 2 0 0.93507333 1 0.06492667
25 0 2 0 0.93507333 1 0.06492667
26 0 2 0 0.93507333 1 0.06492667
27 0 2 0 0.93507333 1 0.06492667
28 0 2 0 0.93507333 1 0.06492667
29 0 2 0 0.93507333 1 0.06492667
30 0 2 0 0.93507333 1 0.06492667
31 0 2 0 0.93507333 1 0.06492667
32 0 2 0 0.93507333 1 0.06492667
33 0 2 0 0.93507333 1 0.06492667
34 0 2 0 0.93507333 1 0.06492667
35 0 2 0 0.93507333 1 0.06492667
36 0 2 0 0.93507333 1 0.06492667
37 0 2 0 0.93507333 1 0.06492667
38 0 2 0 0.93507333 1 0.06492667
39 0 2 0 0.93507333 1 0.06492667
40 0 2 0 0.93507333 1 0.06492667
41 0 2 0 0.93507333 1 0.06492667
42 0 2 0 0.93507333 1 0.06492667
43 0 2 0 0.93507333 1 0.06492667
44 0 2 0 0.93507333 1 0.06492667
45 0 2 0 0.93507333 1 0.06492667
46 0 2 0 0.93507333 1 0.06492667
47 0 2 0 0.93507333 1 0.06492667
48 0 2 0 0.93507333 1 0.06492667
49 0 2 0 0.93507333 1 0.06492667
50 0 2 0 0.93507333 1 0.06492667
51 0 2 0 0.93507333 1 0.06492667
52 0 2 0 0.93507333 1 0.06492667
53 0 2 0 0.93507333 1 0.06492667
54 0 2 0 0.93507333 1 0.06492667
55 0 2 0 0.93507333 1 0.06492667
56 0 2 0 0.93507333 1 0.06492667
57 0 2 0 0.93507333 1 0.06492667
58 0 2 0 0.93507333 1 0.06492667
59 0 2 0 0.93507333 1 0.06492667
60 0 2 0 0.93507333 1 0.06492667
61 0 2 0 0.93507333 1 0.06492667
62 0 2 0 0.93507333 1 0.06492667
63 0 2 0 0.93507333 1 0.06492667
64 1 1 1 1
65 0 2 0 0.93507333 1 0.06492667
66 0 2 0 0.93507333 1 0.06492667
67 0 2 0 0.93507333 1 0.06492667
68 1 1 1 1
69 1 1 1 1
70 0 2 0 0.93507333 1 0.06492667
71 0 2 0 0.93507333 1 0.06492667
72 1 1 1 1
73 0 2 0 0.93507333 1 0.06492667
74 1 1 1 1
75 0 2 0 0.93507333 1 0.06492667
76 1 1 1 1
77 1 1 1 1
78 1 1 1 1
79 1 1 1 1
80 1 1 1 1
81 1 1 1 1
82 0 2 0 0.93507333 1 0.06492667
83 0 2 0 0.93507333 1 0.06492667
84 1 1 1 1
85 1 1 1 1
86 0 2 0 0.93507333 1 0.06492667
87 0 2 0 0.93507333 1 0.06492667
88 1 1 1 1
89 1 1 1 1
90 1 1 1 1
91 1 1 1 1
92 1 1 1 1
93 1 1 1 1
94 1 1 1 1
95 1 1 1 1
96 1 1 1 1
97 0 2 0 0.93507333 1 0.06492667
98 1 1 1 1
99 0 2 0 0.93507333 1 0.06492667
100 1 1 1 1
101 1 1 1 1
102 1 1 1 1
103 1 1 1 1
104 1 1 1 1
105 0 2 0 0.93507333 1 0.06492667
106 1 1 1 1
107 0 2 0 0.93507333 1 0.06492667
108 1 1 1 1
109 1 1 1 1
110 1 1 1 1
111 1 1 1 1
112 1 1 1 1
113 1 1 1 1
114 1 1 1 1
115 1 1 1 1
116 1 1 1 1
117 1 1 1 1
118 1 1 1 1
119 1 1 1 1
120 1 1 1 1
121 1 1 1 1
122 1 1 1 1
123 1 1 1 1
124 1 1 1 1
125 1 1 1 1
126 1 1 1 1
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
1
## name
person-waiting-down(f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(17) ~(or(and($s(2) ~($s(10)) ~($s(8))) and($s(6) ~($s(11)) ~($s(9)))))) : $c(1)) ($c(1) : Bernoulli($c(0.08997825))) )
## determinized formula
and($s(17) ~(or(and($s(2) ~($s(10)) ~($s(8))) and($s(6) ~($s(11)) ~($s(9))))))
## hash index
17
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.91002175 1 0.08997825
1 0 2 0 0.91002175 1 0.08997825
2 0 2 0 0.91002175 1 0.08997825
3 0 2 0 0.91002175 1 0.08997825
4 0 2 0 0.91002175 1 0.08997825
5 0 2 0 0.91002175 1 0.08997825
6 0 2 0 0.91002175 1 0.08997825
7 0 2 0 0.91002175 1 0.08997825
8 0 2 0 0.91002175 1 0.08997825
9 0 2 0 0.91002175 1 0.08997825
10 0 2 0 0.91002175 1 0.08997825
11 0 2 0 0.91002175 1 0.08997825
12 0 2 0 0.91002175 1 0.08997825
13 0 2 0 0.91002175 1 0.08997825
14 0 2 0 0.91002175 1 0.08997825
15 0 2 0 0.91002175 1 0.08997825
16 0 2 0 0.91002175 1 0.08997825
17 0 2 0 0.91002175 1 0.08997825
18 0 2 0 0.91002175 1 0.08997825
19 0 2 0 0.91002175 1 0.08997825
20 0 2 0 0.91002175 1 0.08997825
21 0 2 0 0.91002175 1 0.08997825
22 0 2 0 0.91002175 1 0.08997825
23 0 2 0 0.91002175 1 0.08997825
24 0 2 0 0.91002175 1 0.08997825
25 0 2 0 0.91002175 1 0.08997825
26 0 2 0 0.91002175 1 0.08997825
27 0 2 0 0.91002175 1 0.08997825
28 0 2 0 0.91002175 1 0.08997825
29 0 2 0 0.91002175 1 0.08997825
30 0 2 0 0.91002175 1 0.08997825
31 0 2 0 0.91002175 1 0.08997825
32 0 2 0 0.91002175 1 0.08997825
33 0 2 0 0.91002175 1 0.08997825
34 0 2 0 0.91002175 1 0.08997825
35 0 2 0 0.91002175 1 0.08997825
36 0 2 0 0.91002175 1 0.08997825
37 0 2 0 0.91002175 1 0.08997825
38 0 2 0 0.91002175 1 0.08997825
39 0 2 0 0.91002175 1 0.08997825
40 0 2 0 0.91002175 1 0.08997825
41 0 2 0 0.91002175 1 0.08997825
42 0 2 0 0.91002175 1 0.08997825
43 0 2 0 0.91002175 1 0.08997825
44 0 2 0 0.91002175 1 0.08997825
45 0 2 0 0.91002175 1 0.08997825
46 0 2 0 0.91002175 1 0.08997825
47 0 2 0 0.91002175 1 0.08997825
48 0 2 0 0.91002175 1 0.08997825
49 0 2 0 0.91002175 1 0.08997825
50 0 2 0 0.91002175 1 0.08997825
51 0 2 0 0.91002175 1 0.08997825
52 0 2 0 0.91002175 1 0.08997825
53 0 2 0 0.91002175 1 0.08997825
54 0 2 0 0.91002175 1 0.08997825
55 0 2 0 0.91002175 1 0.08997825
56 0 2 0 0.91002175 1 0.08997825
57 0 2 0 0.91002175 1 0.08997825
58 0 2 0 0.91002175 1 0.08997825
59 0 2 0 0.91002175 1 0.08997825
60 0 2 0 0.91002175 1 0.08997825
61 0 2 0 0.91002175 1 0.08997825
62 0 2 0 0.91002175 1 0.08997825
63 0 2 0 0.91002175 1 0.08997825
64 1 1 1 1
65 0 2 0 0.91002175 1 0.08997825
66 0 2 0 0.91002175 1 0.08997825
67 0 2 0 0.91002175 1 0.08997825
68 1 1 1 1
69 1 1 1 1
70 0 2 0 0.91002175 1 0.08997825
71 0 2 0 0.91002175 1 0.08997825
72 1 1 1 1
73 0 2 0 0.91002175 1 0.08997825
74 1 1 1 1
75 0 2 0 0.91002175 1 0.08997825
76 1 1 1 1
77 1 1 1 1
78 1 1 1 1
79 1 1 1 1
80 1 1 1 1
81 1 1 1 1
82 0 2 0 0.91002175 1 0.08997825
83 0 2 0 0.91002175 1 0.08997825
84 1 1 1 1
85 1 1 1 1
86 0 2 0 0.91002175 1 0.08997825
87 0 2 0 0.91002175 1 0.08997825
88 1 1 1 1
89 1 1 1 1
90 1 1 1 1
91 1 1 1 1
92 1 1 1 1
93 1 1 1 1
94 1 1 1 1
95 1 1 1 1
96 1 1 1 1
97 0 2 0 0.91002175 1 0.08997825
98 1 1 1 1
99 0 2 0 0.91002175 1 0.08997825
100 1 1 1 1
101 1 1 1 1
102 1 1 1 1
103 1 1 1 1
104 1 1 1 1
105 0 2 0 0.91002175 1 0.08997825
106 1 1 1 1
107 0 2 0 0.91002175 1 0.08997825
108 1 1 1 1
109 1 1 1 1
110 1 1 1 1
111 1 1 1 1
112 1 1 1 1
113 1 1 1 1
114 1 1 1 1
115 1 1 1 1
116 1 1 1 1
117 1 1 1 1
118 1 1 1 1
119 1 1 1 1
120 1 1 1 1
121 1 1 1 1
122 1 1 1 1
123 1 1 1 1
124 1 1 1 1
125 1 1 1 1
126 1 1 1 1
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
2
## name
person-waiting-up(f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(18) ~(or(and($s(1) $s(10) ~($s(8))) and($s(5) $s(11) ~($s(9)))))) : $c(1)) ($c(1) : Bernoulli($c(0.06492667))) )
## determinized formula
and($s(18) ~(or(and($s(1) $s(10) ~($s(8))) and($s(5) $s(11) ~($s(9))))))
## hash index
18
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.93507333 1 0.06492667
1 0 2 0 0.93507333 1 0.06492667
2 0 2 0 0.93507333 1 0.06492667
3 0 2 0 0.93507333 1 0.06492667
4 0 2 0 0.93507333 1 0.06492667
5 0 2 0 0.93507333 1 0.06492667
6 0 2 0 0.93507333 1 0.06492667
7 0 2 0 0.93507333 1 0.06492667
8 0 2 0 0.93507333 1 0.06492667
9 0 2 0 0.93507333 1 0.06492667
10 0 2 0 0.93507333 1 0.06492667
11 0 2 0 0.93507333 1 0.06492667
12 0 2 0 0.93507333 1 0.06492667
13 0 2 0 0.93507333 1 0.06492667
14 0 2 0 0.93507333 1 0.06492667
15 0 2 0 0.93507333 1 0.06492667
16 0 2 0 0.93507333 1 0.06492667
17 0 2 0 0.93507333 1 0.06492667
18 0 2 0 0.93507333 1 0.06492667
19 0 2 0 0.93507333 1 0.06492667
20 0 2 0 0.93507333 1 0.06492667
21 0 2 0 0.93507333 1 0.06492667
22 0 2 0 0.93507333 1 0.06492667
23 0 2 0 0.93507333 1 0.06492667
24 0 2 0 0.93507333 1 0.06492667
25 0 2 0 0.93507333 1 0.06492667
26 0 2 0 0.93507333 1 0.06492667
27 0 2 0 0.93507333 1 0.06492667
28 0 2 0 0.93507333 1 0.06492667
29 0 2 0 0.93507333 1 0.06492667
30 0 2 0 0.93507333 1 0.06492667
31 0 2 0 0.93507333 1 0.06492667
32 0 2 0 0.93507333 1 0.06492667
33 0 2 0 0.93507333 1 0.06492667
34 0 2 0 0.93507333 1 0.06492667
35 0 2 0 0.93507333 1 0.06492667
36 0 2 0 0.93507333 1 0.06492667
37 0 2 0 0.93507333 1 0.06492667
38 0 2 0 0.93507333 1 0.06492667
39 0 2 0 0.93507333 1 0.06492667
40 0 2 0 0.93507333 1 0.06492667
41 0 2 0 0.93507333 1 0.06492667
42 0 2 0 0.93507333 1 0.06492667
43 0 2 0 0.93507333 1 0.06492667
44 0 2 0 0.93507333 1 0.06492667
45 0 2 0 0.93507333 1 0.06492667
46 0 2 0 0.93507333 1 0.06492667
47 0 2 0 0.93507333 1 0.06492667
48 0 2 0 0.93507333 1 0.06492667
49 0 2 0 0.93507333 1 0.06492667
50 0 2 0 0.93507333 1 0.06492667
51 0 2 0 0.93507333 1 0.06492667
52 0 2 0 0.93507333 1 0.06492667
53 0 2 0 0.93507333 1 0.06492667
54 0 2 0 0.93507333 1 0.06492667
55 0 2 0 0.93507333 1 0.06492667
56 0 2 0 0.93507333 1 0.06492667
57 0 2 0 0.93507333 1 0.06492667
58 0 2 0 0.93507333 1 0.06492667
59 0 2 0 0.93507333 1 0.06492667
60 0 2 0 0.93507333 1 0.06492667
61 0 2 0 0.93507333 1 0.06492667
62 0 2 0 0.93507333 1 0.06492667
63 0 2 0 0.93507333 1 0.06492667
64 1 1 1 1
65 1 1 1 1
66 1 1 1 1
67 1 1 1 1
68 1 1 1 1
69 1 1 1 1
70 1 1 1 1
71 1 1 1 1
72 1 1 1 1
73 1 1 1 1
74 1 1 1 1
75 1 1 1 1
76 1 1 1 1
77 1 1 1 1
78 1 1 1 1
79 1 1 1 1
80 1 1 1 1
81 0 2 0 0.93507333 1 0.06492667
82 1 1 1 1
83 0 2 0 0.93507333 1 0.06492667
84 1 1 1 1
85 1 1 1 1
86 1 1 1 1
87 1 1 1 1
88 1 1 1 1
89 0 2 0 0.93507333 1 0.06492667
90 1 1 1 1
91 0 2 0 0.93507333 1 0.06492667
92 1 1 1 1
93 1 1 1 1
94 1 1 1 1
95 1 1 1 1
96 1 1 1 1
97 1 1 1 1
98 0 2 0 0.93507333 1 0.06492667
99 0 2 0 0.93507333 1 0.06492667
100 1 1 1 1
101 1 1 1 1
102 0 2 0 0.93507333 1 0.06492667
103 0 2 0 0.93507333 1 0.06492667
104 1 1 1 1
105 1 1 1 1
106 1 1 1 1
107 1 1 1 1
108 1 1 1 1
109 1 1 1 1
110 1 1 1 1
111 1 1 1 1
112 1 1 1 1
113 0 2 0 0.93507333 1 0.06492667
114 0 2 0 0.93507333 1 0.06492667
115 0 2 0 0.93507333 1 0.06492667
116 1 1 1 1
117 1 1 1 1
118 0 2 0 0.93507333 1 0.06492667
119 0 2 0 0.93507333 1 0.06492667
120 1 1 1 1
121 0 2 0 0.93507333 1 0.06492667
122 1 1 1 1
123 0 2 0 0.93507333 1 0.06492667
124 1 1 1 1
125 1 1 1 1
126 1 1 1 1
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0

## index
3
## name
person-waiting-up(f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(19) ~(or(and($s(2) $s(10) ~($s(8))) and($s(6) $s(11) ~($s(9)))))) : $c(1)) ($c(1) : Bernoulli($c(0.08997825))) )
## determinized formula
and($s(19) ~(or(and($s(2) $s(10) ~($s(8))) and($s(6) $s(11) ~($s(9))))))
## hash index
19
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.91002175 1 0.08997825
1 0 2 0 0.91002175 1 0.08997825
2 0 2 0 0.91002175 1 0.08997825
3 0 2 0 0.91002175 1 0.08997825
4 0 2 0 0.91002175 1 0.08997825
5 0 2 0 0.91002175 1 0.08997825
6 0 2 0 0.91002175 1 0.08997825
7 0 2 0 0.91002175 1 0.08997825
8 0 2 0 0.91002175 1 0.08997825
9 0 2 0 0.91002175 1 0.08997825
10 0 2 0 0.91002175 1 0.08997825
11 0 2 0 0.91002175 1 0.08997825
12 0 2 0 0.91002175 1 0.08997825
13 0 2 0 0.91002175 1 0.08997825
14 0 2 0 0.91002175 1 0.08997825
15 0 2 0 0.91002175 1 0.08997825
16 0 2 0 0.91002175 1 0.08997825
17 0 2 0 0.91002175 1 0.08997825
18 0 2 0 0.91002175 1 0.08997825
19 0 2 0 0.91002175 1 0.08997825
20 0 2 0 0.91002175 1 0.08997825
21 0 2 0 0.91002175 1 0.08997825
22 0 2 0 0.91002175 1 0.08997825
23 0 2 0 0.91002175 1 0.08997825
24 0 2 0 0.91002175 1 0.08997825
25 0 2 0 0.91002175 1 0.08997825
26 0 2 0 0.91002175 1 0.08997825
27 0 2 0 0.91002175 1 0.08997825
28 0 2 0 0.91002175 1 0.08997825
29 0 2 0 0.91002175 1 0.08997825
30 0 2 0 0.91002175 1 0.08997825
31 0 2 0 0.91002175 1 0.08997825
32 0 2 0 0.91002175 1 0.08997825
33 0 2 0 0.91002175 1 0.08997825
34 0 2 0 0.91002175 1 0.08997825
35 0 2 0 0.91002175 1 0.08997825
36 0 2 0 0.91002175 1 0.08997825
37 0 2 0 0.91002175 1 0.08997825
38 0 2 0 0.91002175 1 0.08997825
39 0 2 0 0.91002175 1 0.08997825
40 0 2 0 0.91002175 1 0.08997825
41 0 2 0 0.91002175 1 0.08997825
42 0 2 0 0.91002175 1 0.08997825
43 0 2 0 0.91002175 1 0.08997825
44 0 2 0 0.91002175 1 0.08997825
45 0 2 0 0.91002175 1 0.08997825
46 0 2 0 0.91002175 1 0.08997825
47 0 2 0 0.91002175 1 0.08997825
48 0 2 0 0.91002175 1 0.08997825
49 0 2 0 0.91002175 1 0.08997825
50 0 2 0 0.91002175 1 0.08997825
51 0 2 0 0.91002175 1 0.08997825
52 0 2 0 0.91002175 1 0.08997825
53 0 2 0 0.91002175 1 0.08997825
54 0 2 0 0.91002175 1 0.08997825
55 0 2 0 0.91002175 1 0.08997825
56 0 2 0 0.91002175 1 0.08997825
57 0 2 0 0.91002175 1 0.08997825
58 0 2 0 0.91002175 1 0.08997825
59 0 2 0 0.91002175 1 0.08997825
60 0 2 0 0.91002175 1 0.08997825
61 0 2 0 0.91002175 1 0.08997825
62 0 2 0 0.91002175 1 0.08997825
63 0 2 0 0.91002175 1 0.08997825
64 1 1 1 1
65 1 1 1 1
66 1 1 1 1
67 1 1 1 1
68 1 1 1 1
69 1 1 1 1
70 1 1 1 1
71 1 1 1 1
72 1 1 1 1
73 1 1 1 1
74 1 1 1 1
75 1 1 1 1
76 1 1 1 1
77 1 1 1 1
78 1 1 1 1
79 1 1 1 1
80 1 1 1 1
81 0 2 0 0.91002175 1 0.08997825
82 1 1 1 1
83 0 2 0 0.91002175 1 0.08997825
84 1 1 1 1
85 1 1 1 1
86 1 1 1 1
87 1 1 1 1
88 1 1 1 1
89 0 2 0 0.91002175 1 0.08997825
90 1 1 1 1
91 0 2 0 0.91002175 1 0.08997825
92 1 1 1 1
93 1 1 1 1
94 1 1 1 1
95 1 1 1 1
96 1 1 1 1
97 1 1 1 1
98 0 2 0 0.91002175 1 0.08997825
99 0 2 0 0.91002175 1 0.08997825
100 1 1 1 1
101 1 1 1 1
102 0 2 0 0.91002175 1 0.08997825
103 0 2 0 0.91002175 1 0.08997825
104 1 1 1 1
105 1 1 1 1
106 1 1 1 1
107 1 1 1 1
108 1 1 1 1
109 1 1 1 1
110 1 1 1 1
111 1 1 1 1
112 1 1 1 1
113 0 2 0 0.91002175 1 0.08997825
114 0 2 0 0.91002175 1 0.08997825
115 0 2 0 0.91002175 1 0.08997825
116 1 1 1 1
117 1 1 1 1
118 0 2 0 0.91002175 1 0.08997825
119 0 2 0 0.91002175 1 0.08997825
120 1 1 1 1
121 0 2 0 0.91002175 1 0.08997825
122 1 1 1 1
123 0 2 0 0.91002175 1 0.08997825
124 1 1 1 1
125 1 1 1 1
126 1 1 1 1
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0



#####REWARD#####
## formula
+(*(and($s(14) $s(10)) $c(-0.75)) *(and($s(15) $s(11)) $c(-0.75)) *(and($s(12) ~($s(10))) $c(-0.75)) *(and($s(13) ~($s(11))) $c(-0.75)) *(and($s(14) ~($s(10))) $c(-3)) *(and($s(15) ~($s(11))) $c(-3)) *(and($s(12) $s(10)) $c(-3)) *(and($s(13) $s(11)) $c(-3)) -(-($c(0) $s(18)) $s(16)) -(-($c(0) $s(19)) $s(17)))
## min
-11.5
## max
0
## independent from actions
1
## hash index
20
## caching type
VECTOR
## precomputed results
1024
0 0
1 0
2 0
3 0
4 -0.75
5 -3
6 -0.75
7 -3
8 -0.75
9 -0.75
10 -3
11 -3
12 -1.5
13 -3.75
14 -3.75
15 -6
16 -3
17 -0.75
18 -3
19 -0.75
20 -3.75
21 -3.75
22 -3.75
23 -3.75
24 -3.75
25 -1.5
26 -6
27 -3.75
28 -4.5
29 -4.5
30 -6.75
31 -6.75
32 -3
33 -3
34 -0.75
35 -0.75
36 -3.75
37 -6
38 -1.5
39 -3.75
40 -3.75
41 -3.75
42 -3.75
43 -3.75
44 -4.5
45 -6.75
46 -4.5
47 -6.75
48 -6
49 -3.75
50 -3.75
51 -1.5
52 -6.75
53 -6.75
54 -4.5
55 -4.5
56 -6.75
57 -4.5
58 -6.75
59 -4.5
60 -7.5
61 -7.5
62 -7.5
63 -7.5
64 -1
65 -1
66 -1
67 -1
68 -1.75
69 -4
70 -1.75
71 -4
72 -1.75
73 -1.75
74 -4
75 -4
76 -2.5
77 -4.75
78 -4.75
79 -7
80 -4
81 -1.75
82 -4
83 -1.75
84 -4.75
85 -4.75
86 -4.75
87 -4.75
88 -4.75
89 -2.5
90 -7
91 -4.75
92 -5.5
93 -5.5
94 -7.75
95 -7.75
96 -4
97 -4
98 -1.75
99 -1.75
100 -4.75
101 -7
102 -2.5
103 -4.75
104 -4.75
105 -4.75
106 -4.75
107 -4.75
108 -5.5
109 -7.75
110 -5.5
111 -7.75
112 -7
113 -4.75
114 -4.75
115 -2.5
116 -7.75
117 -7.75
118 -5.5
119 -5.5
120 -7.75
121 -5.5
122 -7.75
123 -5.5
124 -8.5
125 -8.5
126 -8.5
127 -8.5
128 -1
129 -1
130 -1
131 -1
132 -1.75
133 -4
134 -1.75
135 -4
136 -1.75
137 -1.75
138 -4
139 -4
140 -2.5
141 -4.75
142 -4.75
143 -7
144 -4
145 -1.75
146 -4
147 -1.75
148 -4.75
149 -4.75
150 -4.75
151 -4.75
152 -4.75
153 -2.5
154 -7
155 -4.75
156 -5.5
157 -5.5
158 -7.75
159 -7.75
160 -4
161 -4
162 -1.75
163 -1.75
164 -4.75
165 -7
166 -2.5
167 -4.75
168 -4.75
169 -4.75
170 -4.75
171 -4.75
172 -5.5
173 -7.75
174 -5.5
175 -7.75
176 -7
177 -4.75
178 -4.75
179 -2.5
180 -7.75
181 -7.75
182 -5.5
183 -5.5
184 -7.75
185 -5.5
186 -7.75
187 -5.5
188 -8.5
189 -8.5
190 -8.5
191 -8.5
192 -2
193 -2
194 -2
195 -2
196 -2.75
197 -5
198 -2.75
199 -5
200 -2.75
201 -2.75
202 -5
203 -5
204 -3.5
205 -5.75
206 -5.75
207 -8
208 -5
209 -2.75
210 -5
211 -2.75
212 -5.75
213 -5.75
214 -5.75
215 -5.75
216 -5.75
217 -3.5
218 -8
219 -5.75
220 -6.5
221 -6.5
222 -8.75
223 -8.75
224 -5
225 -5
226 -2.75
227 -2.75
228 -5.75
229 -8
230 -3.5
231 -5.75
232 -5.75
233 -5.75
234 -5.75
235 -5.75
236 -6.5
237 -8.75
238 -6.5
239 -8.75
240 -8
241 -5.75
242 -5.75
243 -3.5
244 -8.75
245 -8.75
246 -6.5
247 -6.5
248 -8.75
249 -6.5
250 -8.75
251 -6.5
252 -9.5
253 -9.5
254 -9.5
255 -9.5
256 -1
257 -1
258 -1
259 -1
260 -1.75
261 -4
262 -1.75
263 -4
264 -1.75
265 -1.75
266 -4
267 -4
268 -2.5
269 -4.75
270 -4.75
271 -7
272 -4
273 -1.75
274 -4
275 -1.75
276 -4.75
277 -4.75
278 -4.75
279 -4.75
280 -4.75
281 -2.5
282 -7
283 -4.75
284 -5.5
285 -5.5
286 -7.75
287 -7.75
288 -4
289 -4
290 -1.75
291 -1.75
292 -4.75
293 -7
294 -2.5
295 -4.75
296 -4.75
297 -4.75
298 -4.75
299 -4.75
300 -5.5
301 -7.75
302 -5.5
303 -7.75
304 -7
305 -4.75
306 -4.75
307 -2.5
308 -7.75
309 -7.75
310 -5.5
311 -5.5
312 -7.75
313 -5.5
314 -7.75
315 -5.5
316 -8.5
317 -8.5
318 -8.5
319 -8.5
320 -2
321 -2
322 -2
323 -2
324 -2.75
325 -5
326 -2.75
327 -5
328 -2.75
329 -2.75
330 -5
331 -5
332 -3.5
333 -5.75
334 -5.75
335 -8
336 -5
337 -2.75
338 -5
339 -2.75
340 -5.75
341 -5.75
342 -5.75
343 -5.75
344 -5.75
345 -3.5
346 -8
347 -5.75
348 -6.5
349 -6.5
350 -8.75
351 -8.75
352 -5
353 -5
354 -2.75
355 -2.75
356 -5.75
357 -8
358 -3.5
359 -5.75
360 -5.75
361 -5.75
362 -5.75
363 -5.75
364 -6.5
365 -8.75
366 -6.5
367 -8.75
368 -8
369 -5.75
370 -5.75
371 -3.5
372 -8.75
373 -8.75
374 -6.5
375 -6.5
376 -8.75
377 -6.5
378 -8.75
379 -6.5
380 -9.5
381 -9.5
382 -9.5
383 -9.5
384 -2
385 -2
386 -2
387 -2
388 -2.75
389 -5
390 -2.75
391 -5
392 -2.75
393 -2.75
394 -5
395 -5
396 -3.5
397 -5.75
398 -5.75
399 -8
400 -5
401 -2.75
402 -5
403 -2.75
404 -5.75
405 -5.75
406 -5.75
407 -5.75
408 -5.75
409 -3.5
410 -8
411 -5.75
412 -6.5
413 -6.5
414 -8.75
415 -8.75
416 -5
417 -5
418 -2.75
419 -2.75
420 -5.75
421 -8
422 -3.5
423 -5.75
424 -5.75
425 -5.75
426 -5.75
427 -5.75
428 -6.5
429 -8.75
430 -6.5
431 -8.75
432 -8
433 -5.75
434 -5.75
435 -3.5
436 -8.75
437 -8.75
438 -6.5
439 -6.5
440 -8.75
441 -6.5
442 -8.75
443 -6.5
444 -9.5
445 -9.5
446 -9.5
447 -9.5
448 -3
449 -3
450 -3
451 -3
452 -3.75
453 -6
454 -3.75
455 -6
456 -3.75
457 -3.75
458 -6
459 -6
460 -4.5
461 -6.75
462 -6.75
463 -9
464 -6
465 -3.75
466 -6
467 -3.75
468 -6.75
469 -6.75
470 -6.75
471 -6.75
472 -6.75
473 -4.5
474 -9
475 -6.75
476 -7.5
477 -7.5
478 -9.75
479 -9.75
480 -6
481 -6
482 -3.75
483 -3.75
484 -6.75
485 -9
486 -4.5
487 -6.75
488 -6.75
489 -6.75
490 -6.75
491 -6.75
492 -7.5
493 -9.75
494 -7.5
495 -9.75
496 -9
497 -6.75
498 -6.75
499 -4.5
500 -9.75
501 -9.75
502 -7.5
503 -7.5
504 -9.75
505 -7.5
506 -9.75
507 -7.5
508 -10.5
509 -10.5
510 -10.5
511 -10.5
512 -1
513 -1
514 -1
515 -1
516 -1.75
517 -4
518 -1.75
519 -4
520 -1.75
521 -1.75
522 -4
523 -4
524 -2.5
525 -4.75
526 -4.75
527 -7
528 -4
529 -1.75
530 -4
531 -1.75
532 -4.75
533 -4.75
534 -4.75
535 -4.75
536 -4.75
537 -2.5
538 -7
539 -4.75
540 -5.5
541 -5.5
542 -7.75
543 -7.75
544 -4
545 -4
546 -1.75
547 -1.75
548 -4.75
549 -7
550 -2.5
551 -4.75
552 -4.75
553 -4.75
554 -4.75
555 -4.75
556 -5.5
557 -7.75
558 -5.5
559 -7.75
560 -7
561 -4.75
562 -4.75
563 -2.5
564 -7.75
565 -7.75
566 -5.5
567 -5.5
568 -7.75
569 -5.5
570 -7.75
571 -5.5
572 -8.5
573 -8.5
574 -8.5
575 -8.5
576 -2
577 -2
578 -2
579 -2
580 -2.75
581 -5
582 -2.75
583 -5
584 -2.75
585 -2.75
586 -5
587 -5
588 -3.5
589 -5.75
590 -5.75
591 -8
592 -5
593 -2.75
594 -5
595 -2.75
596 -5.75
597 -5.75
598 -5.75
599 -5.75
600 -5.75
601 -3.5
602 -8
603 -5.75
604 -6.5
605 -6.5
606 -8.75
607 -8.75
608 -5
609 -5
610 -2.75
611 -2.75
612 -5.75
613 -8
614 -3.5
615 -5.75
616 -5.75
617 -5.75
618 -5.75
619 -5.75
620 -6.5
621 -8.75
622 -6.5
623 -8.75
624 -8
625 -5.75
626 -5.75
627 -3.5
628 -8.75
629 -8.75
630 -6.5
631 -6.5
632 -8.75
633 -6.5
634 -8.75
635 -6.5
636 -9.5
637 -9.5
638 -9.5
639 -9.5
640 -2
641 -2
642 -2
643 -2
644 -2.75
645 -5
646 -2.75
647 -5
648 -2.75
649 -2.75
650 -5
651 -5
652 -3.5
653 -5.75
654 -5.75
655 -8
656 -5
657 -2.75
658 -5
659 -2.75
660 -5.75
661 -5.75
662 -5.75
663 -5.75
664 -5.75
665 -3.5
666 -8
667 -5.75
668 -6.5
669 -6.5
670 -8.75
671 -8.75
672 -5
673 -5
674 -2.75
675 -2.75
676 -5.75
677 -8
678 -3.5
679 -5.75
680 -5.75
681 -5.75
682 -5.75
683 -5.75
684 -6.5
685 -8.75
686 -6.5
687 -8.75
688 -8
689 -5.75
690 -5.75
691 -3.5
692 -8.75
693 -8.75
694 -6.5
695 -6.5
696 -8.75
697 -6.5
698 -8.75
699 -6.5
700 -9.5
701 -9.5
702 -9.5
703 -9.5
704 -3
705 -3
706 -3
707 -3
708 -3.75
709 -6
710 -3.75
711 -6
712 -3.75
713 -3.75
714 -6
715 -6
716 -4.5
717 -6.75
718 -6.75
719 -9
720 -6
721 -3.75
722 -6
723 -3.75
724 -6.75
725 -6.75
726 -6.75
727 -6.75
728 -6.75
729 -4.5
730 -9
731 -6.75
732 -7.5
733 -7.5
734 -9.75
735 -9.75
736 -6
737 -6
738 -3.75
739 -3.75
740 -6.75
741 -9
742 -4.5
743 -6.75
744 -6.75
745 -6.75
746 -6.75
747 -6.75
748 -7.5
749 -9.75
750 -7.5
751 -9.75
752 -9
753 -6.75
754 -6.75
755 -4.5
756 -9.75
757 -9.75
758 -7.5
759 -7.5
760 -9.75
761 -7.5
762 -9.75
763 -7.5
764 -10.5
765 -10.5
766 -10.5
767 -10.5
768 -2
769 -2
770 -2
771 -2
772 -2.75
773 -5
774 -2.75
775 -5
776 -2.75
777 -2.75
778 -5
779 -5
780 -3.5
781 -5.75
782 -5.75
783 -8
784 -5
785 -2.75
786 -5
787 -2.75
788 -5.75
789 -5.75
790 -5.75
791 -5.75
792 -5.75
793 -3.5
794 -8
795 -5.75
796 -6.5
797 -6.5
798 -8.75
799 -8.75
800 -5
801 -5
802 -2.75
803 -2.75
804 -5.75
805 -8
806 -3.5
807 -5.75
808 -5.75
809 -5.75
810 -5.75
811 -5.75
812 -6.5
813 -8.75
814 -6.5
815 -8.75
816 -8
817 -5.75
818 -5.75
819 -3.5
820 -8.75
821 -8.75
822 -6.5
823 -6.5
824 -8.75
825 -6.5
826 -8.75
827 -6.5
828 -9.5
829 -9.5
830 -9.5
831 -9.5
832 -3
833 -3
834 -3
835 -3
836 -3.75
837 -6
838 -3.75
839 -6
840 -3.75
841 -3.75
842 -6
843 -6
844 -4.5
845 -6.75
846 -6.75
847 -9
848 -6
849 -3.75
850 -6
851 -3.75
852 -6.75
853 -6.75
854 -6.75
855 -6.75
856 -6.75
857 -4.5
858 -9
859 -6.75
860 -7.5
861 -7.5
862 -9.75
863 -9.75
864 -6
865 -6
866 -3.75
867 -3.75
868 -6.75
869 -9
870 -4.5
871 -6.75
872 -6.75
873 -6.75
874 -6.75
875 -6.75
876 -7.5
877 -9.75
878 -7.5
879 -9.75
880 -9
881 -6.75
882 -6.75
883 -4.5
884 -9.75
885 -9.75
886 -7.5
887 -7.5
888 -9.75
889 -7.5
890 -9.75
891 -7.5
892 -10.5
893 -10.5
894 -10.5
895 -10.5
896 -3
897 -3
898 -3
899 -3
900 -3.75
901 -6
902 -3.75
903 -6
904 -3.75
905 -3.75
906 -6
907 -6
908 -4.5
909 -6.75
910 -6.75
911 -9
912 -6
913 -3.75
914 -6
915 -3.75
916 -6.75
917 -6.75
918 -6.75
919 -6.75
920 -6.75
921 -4.5
922 -9
923 -6.75
924 -7.5
925 -7.5
926 -9.75
927 -9.75
928 -6
929 -6
930 -3.75
931 -3.75
932 -6.75
933 -9
934 -4.5
935 -6.75
936 -6.75
937 -6.75
938 -6.75
939 -6.75
940 -7.5
941 -9.75
942 -7.5
943 -9.75
944 -9
945 -6.75
946 -6.75
947 -4.5
948 -9.75
949 -9.75
950 -7.5
951 -7.5
952 -9.75
953 -7.5
954 -9.75
955 -7.5
956 -10.5
957 -10.5
958 -10.5
959 -10.5
960 -4
961 -4
962 -4
963 -4
964 -4.75
965 -7
966 -4.75
967 -7
968 -4.75
969 -4.75
970 -7
971 -7
972 -5.5
973 -7.75
974 -7.75
975 -10
976 -7
977 -4.75
978 -7
979 -4.75
980 -7.75
981 -7.75
982 -7.75
983 -7.75
984 -7.75
985 -5.5
986 -10
987 -7.75
988 -8.5
989 -8.5
990 -10.75
991 -10.75
992 -7
993 -7
994 -4.75
995 -4.75
996 -7.75
997 -10
998 -5.5
999 -7.75
1000 -7.75
1001 -7.75
1002 -7.75
1003 -7.75
1004 -8.5
1005 -10.75
1006 -8.5
1007 -10.75
1008 -10
1009 -7.75
1010 -7.75
1011 -5.5
1012 -10.75
1013 -10.75
1014 -8.5
1015 -8.5
1016 -10.75
1017 -8.5
1018 -10.75
1019 -8.5
1020 -11.5
1021 -11.5
1022 -11.5
1023 -11.5
## kleene caching type
VECTOR
## kleene caching vec size
59049
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 0 0 0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
4
## state
0 0 0 0 1 0 0 0 
## relevant preconditions
0


## index
5
## state
0 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
6
## state
0 0 1 0 0 0 0 0 
## relevant preconditions
0


## index
7
## state
0 1 0 0 0 0 0 0 
## relevant preconditions
0


## index
8
## state
1 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
9
## state
0 0 0 0 0 0 1 1 
## relevant preconditions
0


## index
10
## state
0 0 0 0 0 1 1 0 
## relevant preconditions
0


## index
11
## state
0 0 0 0 1 0 0 1 
## relevant preconditions
0


## index
12
## state
0 0 0 0 1 1 0 0 
## relevant preconditions
0


## index
13
## state
0 0 0 1 0 0 1 0 
## relevant preconditions
0


## index
14
## state
0 0 0 1 1 0 0 0 
## relevant preconditions
0


## index
15
## state
0 0 1 0 0 0 0 1 
## relevant preconditions
0


## index
16
## state
0 0 1 0 0 1 0 0 
## relevant preconditions
0


## index
17
## state
0 0 1 1 0 0 0 0 
## relevant preconditions
0


## index
18
## state
0 1 0 0 0 0 1 0 
## relevant preconditions
0


## index
19
## state
0 1 0 0 1 0 0 0 
## relevant preconditions
0


## index
20
## state
0 1 1 0 0 0 0 0 
## relevant preconditions
0


## index
21
## state
1 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
22
## state
1 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
23
## state
1 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
24
## state
1 1 0 0 0 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
3
0 2
1 2
12 1
## kleene state fluent hash keys (first line is the number of keys)
3
0 2
1 2
12 1

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
7
0 4
1 4
2 2
12 2
14 1
16 1
18 1
## kleene state fluent hash keys (first line is the number of keys)
7
0 6
1 6
2 2
12 3
14 1
16 1
18 1

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
7
1 8
2 4
3 2
12 4
14 2
17 1
19 1
## kleene state fluent hash keys (first line is the number of keys)
7
1 18
2 6
3 2
12 9
14 3
17 1
19 1

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
3
2 8
3 4
14 4
## kleene state fluent hash keys (first line is the number of keys)
3
2 18
3 6
14 9

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
3
4 2
5 2
13 1
## kleene state fluent hash keys (first line is the number of keys)
3
4 2
5 2
13 1

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
7
4 4
5 4
6 2
13 2
15 1
16 2
18 2
## kleene state fluent hash keys (first line is the number of keys)
7
4 6
5 6
6 2
13 3
15 1
16 3
18 3

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
7
5 8
6 4
7 2
13 4
15 2
17 2
19 2
## kleene state fluent hash keys (first line is the number of keys)
7
5 18
6 6
7 2
13 9
15 3
17 3
19 3

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
3
6 8
7 4
15 4
## kleene state fluent hash keys (first line is the number of keys)
3
6 18
7 6
15 9

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
11
0 8
1 16
2 16
3 8
8 4
12 8
14 8
16 4
17 4
18 4
19 4
## kleene state fluent hash keys (first line is the number of keys)
11
0 18
1 54
2 54
3 18
8 4
12 27
14 27
16 9
17 9
18 9
19 9

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
11
4 8
5 16
6 16
7 8
9 4
13 8
15 8
16 8
17 8
18 8
19 8
## kleene state fluent hash keys (first line is the number of keys)
11
4 18
5 54
6 54
7 18
9 4
13 27
15 27
16 27
17 27
18 27
19 27

## index
10
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
12
0 16
1 32
2 32
3 16
10 3
12 16
14 16
16 16
17 16
18 16
19 16
20 1
## kleene state fluent hash keys (first line is the number of keys)
12
0 54
1 162
2 162
3 54
10 3
12 81
14 81
16 81
17 81
18 81
19 81
20 1

## index
11
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
12
4 16
5 32
6 32
7 16
11 3
13 16
15 16
16 32
17 32
18 32
19 32
20 2
## kleene state fluent hash keys (first line is the number of keys)
12
4 54
5 162
6 162
7 54
11 3
13 81
15 81
16 243
17 243
18 243
19 243
20 3

## index
12
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
531441
## state fluent hash keys (first line is the number of keys)
2
12 32
20 4
## kleene state fluent hash keys (first line is the number of keys)
2
12 243
20 9

## index
13
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
1594323
## state fluent hash keys (first line is the number of keys)
2
13 32
20 8
## kleene state fluent hash keys (first line is the number of keys)
2
13 243
20 27

## index
14
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
4782969
## state fluent hash keys (first line is the number of keys)
2
14 32
20 16
## kleene state fluent hash keys (first line is the number of keys)
2
14 243
20 81

## index
15
## state hash key (for each value in the domain)
0 32768
## kleene state hash key base
14348907
## state fluent hash keys (first line is the number of keys)
2
15 32
20 32
## kleene state fluent hash keys (first line is the number of keys)
2
15 243
20 243


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 65536
## kleene state hash key base
43046721
## state fluent hash keys (first line is the number of keys)
4
12 64
13 64
16 64
20 64
## kleene state fluent hash keys (first line is the number of keys)
4
12 729
13 729
16 729
20 729

## index
1
## state hash key (for each value in the domain)
0 131072
## kleene state hash key base
129140163
## state fluent hash keys (first line is the number of keys)
4
12 128
13 128
17 64
20 128
## kleene state fluent hash keys (first line is the number of keys)
4
12 2187
13 2187
17 729
20 2187

## index
2
## state hash key (for each value in the domain)
0 262144
## kleene state hash key base
387420489
## state fluent hash keys (first line is the number of keys)
4
14 64
15 64
18 64
20 256
## kleene state fluent hash keys (first line is the number of keys)
4
14 729
15 729
18 729
20 6561

## index
3
## state hash key (for each value in the domain)
0 524288
## kleene state hash key base
1162261467
## state fluent hash keys (first line is the number of keys)
4
14 128
15 128
19 64
20 512
## kleene state fluent hash keys (first line is the number of keys)
4
14 2187
15 2187
19 729
20 19683



#####TRAINING SET#####
200
0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 
1 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 
1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 
0 1 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 
1 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 
1 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 
1 0 0 0 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 
1 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 
1 0 0 0 0 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0 
1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 
0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 
1 0 0 0 0 0 1 0 1 0 0 1 0 0 0 1 0 0 0 0 
0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 1 0 0 0 0 
0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 
1 0 0 0 0 1 0 0 0 1 1 0 0 1 0 1 0 0 0 0 
0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 0 0 0 0 
1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 1 0 0 0 0 
1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 0 
0 1 0 0 0 0 1 0 1 1 0 1 0 1 0 1 0 0 0 0 
0 0 0 1 0 0 1 0 0 0 1 0 1 1 0 1 0 0 0 0 
0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 1 0 0 0 0 
0 1 0 0 0 0 1 0 0 0 1 1 1 1 1 1 0 0 0 0 
1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 
0 1 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 
0 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 1 0 0 0 
0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 
0 0 1 0 1 0 0 0 0 1 1 1 1 0 1 0 1 0 0 0 
0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 
0 0 0 1 1 0 0 0 1 0 1 0 1 0 1 1 1 0 0 0 
0 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 1 0 0 0 
0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 1 1 0 0 0 
1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 
1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 
0 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 
0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 
0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 
0 1 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 0 0 
1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 
0 1 0 0 1 0 0 0 0 1 1 0 1 0 1 0 0 1 0 0 
0 0 1 0 0 0 1 0 0 1 0 1 1 0 1 0 0 1 0 0 
0 1 0 0 0 0 0 1 1 0 1 1 1 0 1 0 0 1 0 0 
0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 0 1 0 0 
0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 
1 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 0 
0 0 1 0 0 1 0 0 0 1 0 1 1 1 1 1 0 1 0 0 
0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 
0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 
0 0 0 1 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 
0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 
1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 1 0 0 
1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 0 
1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 
0 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 1 0 
0 0 1 0 0 0 1 0 1 1 0 0 1 0 1 0 0 0 1 0 
0 0 1 0 0 0 0 1 0 0 0 1 1 0 1 0 0 0 1 0 
1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 0 
1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 
1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 
0 0 1 0 0 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 
0 0 1 0 0 1 0 0 0 1 1 1 0 0 1 0 1 0 1 0 
0 0 1 0 0 0 0 1 0 0 1 0 1 0 1 0 1 0 1 0 
0 0 1 0 0 0 1 0 1 0 0 1 1 0 1 0 1 0 1 0 
0 0 1 0 0 0 1 0 0 0 1 1 1 0 1 0 1 0 1 0 
0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 1 0 
0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 
0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 1 1 0 1 0 
0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 1 1 0 1 0 
1 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 1 0 1 0 
1 0 0 0 0 0 1 0 1 0 1 1 0 1 0 1 1 0 1 0 
0 0 0 1 0 1 0 0 0 1 0 0 1 1 0 1 1 0 1 0 
0 0 0 1 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 
0 0 1 0 0 1 0 0 0 1 1 0 0 1 1 1 1 0 1 0 
0 0 1 0 0 0 1 0 0 0 0 1 1 1 1 1 1 0 1 0 
1 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 1 0 
1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 1 0 
1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 1 0 
0 1 0 0 0 1 0 0 0 0 1 0 1 0 1 0 0 1 1 0 
1 0 0 0 0 0 0 1 0 0 1 1 0 1 1 0 0 1 1 0 
1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0 1 1 0 
0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 
1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 
0 0 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 1 1 0 
1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 1 1 1 0 
0 0 1 0 0 0 0 1 0 0 0 0 1 0 1 0 1 1 1 0 
1 0 0 0 0 0 0 1 1 1 0 1 0 1 1 0 1 1 1 0 
1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 
1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 
1 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 
1 0 0 0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 1 
0 0 0 1 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 1 
0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 
0 1 0 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 
0 1 0 0 0 0 1 0 0 1 0 1 0 0 1 0 0 0 0 1 
0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 1 
0 1 0 0 1 0 0 0 1 1 0 1 1 0 1 0 0 0 0 1 
1 0 0 0 0 0 1 0 0 1 1 1 0 1 1 0 0 0 0 1 
1 0 0 0 0 1 0 0 1 0 1 1 0 1 0 1 0 0 0 1 
0 1 0 0 0 1 0 0 1 1 1 1 0 1 0 1 0 0 0 1 
0 0 1 0 0 1 0 0 0 0 1 0 1 1 0 1 0 0 0 1 
0 0 0 1 0 0 1 0 0 0 0 1 1 1 0 1 0 0 0 1 
0 1 0 0 0 1 0 0 1 1 0 0 1 1 1 1 0 0 0 1 
1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 1 
1 0 0 0 1 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 
1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 1 
0 0 1 0 0 1 0 0 0 1 0 1 1 1 1 0 1 0 0 1 
0 0 1 0 1 0 0 0 1 1 0 1 1 0 0 1 1 0 0 1 
1 0 0 0 0 1 0 0 0 0 1 1 0 1 0 1 1 0 0 1 
0 0 1 0 1 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1 
0 0 1 0 1 0 0 0 0 1 1 1 1 0 1 1 1 0 0 1 
0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 
1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 1 
1 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 1 
0 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 1 0 1 
1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 
0 0 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 0 1 
1 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 1 
1 0 0 0 0 0 1 0 0 1 1 1 0 1 0 0 0 1 0 1 
0 0 1 0 1 0 0 0 0 1 0 1 0 0 1 0 0 1 0 1 
0 1 0 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 1 
0 1 0 0 1 0 0 0 0 1 1 0 1 0 1 0 0 1 0 1 
0 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 0 1 0 1 
0 1 0 0 1 0 0 0 0 1 1 1 1 0 1 0 0 1 0 1 
0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 0 1 
1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 1 
0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 
1 0 0 0 0 1 0 0 1 1 0 1 0 0 0 1 0 1 0 1 
0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 1 
1 0 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 1 0 1 
0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 1 0 1 0 1 
1 0 0 0 0 0 0 1 0 1 1 1 0 1 0 1 0 1 0 1 
1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 1 0 1 0 1 
1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 1 0 1 0 1 
1 0 0 0 1 0 0 0 0 1 1 0 0 0 1 1 0 1 0 1 
1 0 0 0 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0 1 
1 0 0 0 0 1 0 0 1 0 0 1 0 1 1 1 0 1 0 1 
0 0 1 0 0 0 1 0 0 0 1 0 1 1 1 1 0 1 0 1 
0 0 0 1 1 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 
1 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 
1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 
0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 
0 1 0 0 1 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 
1 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 1 0 1 
1 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 1 1 0 1 
0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 1 0 1 
0 0 0 1 0 0 0 1 0 0 0 1 1 1 0 0 1 1 0 1 
1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 1 
1 0 0 0 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 1 
1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 
0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 1 1 1 0 1 
1 0 0 0 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 1 
1 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 1 1 0 1 
0 1 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 
0 0 1 0 0 0 0 1 1 1 0 0 1 0 0 0 0 0 1 1 
1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 1 1 
0 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 1 0 1 1 
0 0 0 1 0 0 0 1 0 0 1 1 1 0 0 0 1 0 1 1 
0 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 1 
1 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 1 0 1 1 
1 0 0 0 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 
1 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 1 0 1 1 
0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 1 1 
0 0 1 0 0 0 1 0 0 1 0 1 1 0 1 0 1 0 1 1 
1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 1 1 
1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 1 1 0 1 1 
0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 
1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 1 1 
0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 
1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 
0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 
1 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1 
1 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 1 1 1 
1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 
1 0 0 0 0 0 0 1 1 1 0 1 0 1 0 0 0 1 1 1 
1 0 0 0 1 0 0 0 0 1 1 1 0 0 1 0 0 1 1 1 
1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 1 0 1 1 1 
0 1 0 0 1 0 0 0 1 1 0 0 1 0 1 1 0 1 1 1 
0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 1 1 
1 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 1 1 1 1 
1 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 1 1 1 1 
0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 1 1 1 
1 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 1 1 1 1 
0 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 1 1 1 
1 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 1 
0 0 1 0 0 1 0 0 0 1 1 1 0 0 0 0 1 1 1 1 
1 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 1 1 1 1 
1 0 0 0 0 1 0 0 1 1 1 1 0 0 0 0 1 1 1 1 
0 1 0 0 0 1 0 0 1 1 1 1 0 0 0 0 1 1 1 1 
1 0 0 0 0 0 0 1 1 1 0 1 0 1 0 0 1 1 1 1 
0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 1 1 1 1 
1 0 0 0 1 0 0 0 1 0 1 1 0 0 1 0 1 1 1 1 
0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 1 1 1 1 
0 1 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 1 
0 1 0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 1 1 1 
0 0 1 0 1 0 0 0 1 1 1 1 1 0 1 0 1 1 1 1 
0 1 0 0 0 1 0 0 1 1 1 1 1 0 1 0 1 1 1 1 
1 0 0 0 0 1 0 0 0 0 1 0 0 1 0 1 1 1 1 1 
