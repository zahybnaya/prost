#####TASK#####
## name
navigation_inst_mdp__2
## horizon
40
## discount factor
1
## number of action fluents
4
## number of det state fluents
10
## number of prob state fluents
5
## number of preconds
0
## number of actions
5
## number of hashing functions
16
## initial state
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
1
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
11135
## number of unique states that were encountered during task analysis
16
## number of states with only one applicable reasonable action that were encountered during task analysis
9842
## number of unique states with only one applicable reasonable action that were encountered during task analysis
2


#####ACTION FLUENTS#####
## index
0
## name
move-east
## number of values
2
## values
0 false
1 true

## index
1
## name
move-north
## number of values
2
## values
0 false
1 true

## index
2
## name
move-south
## number of values
2
## values
0 false
1 true

## index
3
## name
move-west
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
robot-at(x14, y12)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(0)) and($a(0) $s(0)) and($a(3) $s(0))) : $c(0)) (or(and($a(2) $s(10)) and($a(0) $s(8)) and($a(3) $s(2))) : $c(1)) ($c(1) : $s(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results
160
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 1
8 0
9 0
10 0
11 1
12 0
13 0
14 0
15 1
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 0
42 0
43 0
44 1
45 1
46 0
47 1
48 0
49 0
50 0
51 1
52 0
53 0
54 1
55 1
56 0
57 1
58 0
59 0
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 1
83 0
84 0
85 1
86 0
87 1
88 0
89 0
90 0
91 1
92 1
93 0
94 0
95 1
96 0
97 1
98 0
99 0
100 0
101 0
102 0
103 0
104 0
105 0
106 0
107 0
108 0
109 0
110 0
111 0
112 0
113 0
114 0
115 0
116 0
117 0
118 0
119 0
120 0
121 0
122 1
123 0
124 1
125 1
126 0
127 1
128 0
129 0
130 0
131 1
132 1
133 0
134 1
135 1
136 0
137 1
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 0
147 0
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
## kleene caching type
VECTOR
## kleene caching vec size
1215
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
1
## name
robot-at(x14, y20)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(2) $s(1)) and($a(0) $s(1)) and($a(3) $s(1))) : $c(0)) (or(and($a(1) $s(10)) and($a(0) $s(9)) and($a(3) $s(3))) : $c(1)) ($c(1) : $s(1)) )
## hash index
1
## caching type 
VECTOR
## precomputed results
160
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 1
9 0
10 0
11 1
12 0
13 0
14 0
15 1
16 0
17 0
18 1
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 0
42 0
43 0
44 1
45 1
46 0
47 0
48 1
49 0
50 0
51 1
52 0
53 0
54 1
55 1
56 0
57 0
58 1
59 0
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 0
83 1
84 0
85 1
86 0
87 0
88 1
89 0
90 0
91 1
92 0
93 1
94 0
95 1
96 0
97 0
98 1
99 0
100 0
101 0
102 0
103 0
104 0
105 0
106 0
107 0
108 0
109 0
110 0
111 0
112 0
113 0
114 0
115 0
116 0
117 0
118 0
119 0
120 0
121 0
122 0
123 1
124 1
125 1
126 0
127 0
128 1
129 0
130 0
131 1
132 0
133 1
134 1
135 1
136 0
137 0
138 1
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 0
147 0
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
## kleene caching type
VECTOR
## kleene caching vec size
1215
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
2
## name
robot-at(x21, y12)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(2)) and($a(0) $s(2)) and($a(3) $s(2))) : $c(0)) (or(and($a(2) $s(11)) and($a(0) $s(0)) and($a(3) $s(4))) : $c(1)) ($c(1) : $s(2)) )
## hash index
2
## caching type 
VECTOR
## precomputed results
160
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 1
11 0
12 1
13 0
14 0
15 1
16 0
17 1
18 0
19 0
20 0
21 1
22 0
23 0
24 0
25 0
26 1
27 0
28 0
29 1
30 1
31 0
32 1
33 0
34 0
35 1
36 0
37 1
38 0
39 0
40 0
41 0
42 0
43 0
44 0
45 0
46 0
47 0
48 0
49 0
50 0
51 0
52 0
53 0
54 0
55 0
56 0
57 0
58 0
59 0
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 1
83 0
84 0
85 0
86 0
87 1
88 0
89 1
90 1
91 0
92 1
93 0
94 0
95 1
96 0
97 1
98 0
99 0
100 0
101 1
102 1
103 0
104 0
105 0
106 1
107 1
108 0
109 1
110 1
111 0
112 1
113 0
114 0
115 1
116 0
117 1
118 0
119 0
120 0
121 0
122 0
123 0
124 0
125 0
126 0
127 0
128 0
129 0
130 0
131 0
132 0
133 0
134 0
135 0
136 0
137 0
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 0
147 0
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
## kleene caching type
VECTOR
## kleene caching vec size
1215
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
3
## name
robot-at(x21, y20)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(2) $s(3)) and($a(0) $s(3)) and($a(3) $s(3))) : $c(0)) (or(and($a(1) $s(11)) and($a(0) $s(1)) and($a(3) $s(5))) : $c(1)) ($c(1) : $s(3)) )
## hash index
3
## caching type 
VECTOR
## precomputed results
80
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 1
11 0
12 0
13 1
14 0
15 1
16 0
17 0
18 1
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 0
42 0
43 1
44 0
45 0
46 0
47 0
48 1
49 1
50 1
51 0
52 0
53 1
54 0
55 1
56 0
57 0
58 1
59 0
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
## kleene caching type
VECTOR
## kleene caching vec size
405
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
4
## name
robot-at(x30, y12)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(4)) and($a(3) $s(4))) : $c(0)) (or(and($a(2) $s(12)) and($a(0) $s(2))) : $c(1)) ($c(1) : $s(4)) )
## hash index
4
## caching type 
VECTOR
## precomputed results
80
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 1
11 0
12 1
13 0
14 1
15 1
16 0
17 1
18 0
19 1
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 0
42 1
43 0
44 0
45 0
46 0
47 1
48 0
49 1
50 1
51 0
52 1
53 0
54 1
55 1
56 0
57 1
58 0
59 1
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
## kleene caching type
VECTOR
## kleene caching vec size
405
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
5
## name
robot-at(x30, y20)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(5) : $c(1)) (or($s(5) and($a(2) $s(5)) and($a(3) $s(5))) : $c(0)) (or(and($a(1) $s(12)) and($a(0) $s(3))) : $c(1)) ($c(1) : $s(5)) )
## hash index
5
## caching type 
VECTOR
## precomputed results
40
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 1
11 1
12 1
13 1
14 1
15 1
16 1
17 1
18 1
19 1
20 0
21 0
22 0
23 1
24 0
25 0
26 0
27 0
28 1
29 1
30 1
31 1
32 1
33 1
34 1
35 1
36 1
37 1
38 1
39 1
## kleene caching type
VECTOR
## kleene caching vec size
135
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
6
## name
robot-at(x6, y12)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(6)) and($a(0) $s(6))) : $c(0)) (or(and($a(2) $s(13)) and($a(3) $s(8))) : $c(1)) ($c(1) : $s(6)) )
## hash index
6
## caching type 
VECTOR
## precomputed results
80
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 1
12 1
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 1
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 1
31 1
32 1
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 0
42 1
43 0
44 0
45 0
46 0
47 0
48 0
49 0
50 1
51 1
52 1
53 0
54 0
55 0
56 0
57 0
58 0
59 0
60 0
61 1
62 1
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 1
71 1
72 1
73 0
74 0
75 0
76 0
77 0
78 0
79 0
## kleene caching type
VECTOR
## kleene caching vec size
405
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
7
## name
robot-at(x6, y20)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(2) $s(7)) and($a(0) $s(7))) : $c(0)) (or(and($a(1) $s(13)) and($a(3) $s(9))) : $c(1)) ($c(1) : $s(7)) )
## hash index
7
## caching type 
VECTOR
## precomputed results
80
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 1
12 0
13 1
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 1
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 1
31 1
32 0
33 1
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 0
42 0
43 1
44 0
45 0
46 0
47 0
48 0
49 0
50 1
51 1
52 0
53 1
54 0
55 0
56 0
57 0
58 0
59 0
60 0
61 1
62 0
63 1
64 0
65 0
66 0
67 0
68 0
69 0
70 1
71 1
72 0
73 1
74 0
75 0
76 0
77 0
78 0
79 0
## kleene caching type
VECTOR
## kleene caching vec size
405
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
8
## name
robot-at(x9, y12)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(8)) and($a(0) $s(8)) and($a(3) $s(8))) : $c(0)) (or(and($a(2) $s(14)) and($a(0) $s(6)) and($a(3) $s(0))) : $c(1)) ($c(1) : $s(8)) )
## hash index
8
## caching type 
VECTOR
## precomputed results
160
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 1
25 0
26 1
27 0
28 0
29 1
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 1
41 0
42 1
43 0
44 0
45 1
46 0
47 1
48 0
49 0
50 0
51 0
52 0
53 0
54 0
55 0
56 0
57 0
58 0
59 0
60 1
61 0
62 1
63 0
64 0
65 1
66 0
67 1
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 1
83 0
84 0
85 0
86 1
87 1
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 0
97 0
98 0
99 0
100 0
101 0
102 1
103 0
104 1
105 0
106 1
107 1
108 0
109 1
110 0
111 0
112 0
113 0
114 0
115 0
116 0
117 0
118 0
119 0
120 1
121 0
122 1
123 0
124 0
125 1
126 0
127 1
128 0
129 0
130 0
131 0
132 0
133 0
134 0
135 0
136 0
137 0
138 0
139 0
140 1
141 0
142 1
143 0
144 0
145 1
146 0
147 1
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
## kleene caching type
VECTOR
## kleene caching vec size
1215
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
9
## name
robot-at(x9, y20)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(2) $s(9)) and($a(0) $s(9)) and($a(3) $s(9))) : $c(0)) (or(and($a(1) $s(14)) and($a(0) $s(7)) and($a(3) $s(1))) : $c(1)) ($c(1) : $s(9)) )
## hash index
9
## caching type 
VECTOR
## precomputed results
160
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 1
25 0
26 1
27 0
28 0
29 1
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 1
41 0
42 0
43 1
44 0
45 1
46 0
47 0
48 1
49 0
50 0
51 0
52 0
53 0
54 0
55 0
56 0
57 0
58 0
59 0
60 1
61 0
62 0
63 1
64 0
65 1
66 0
67 0
68 1
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 0
83 1
84 0
85 0
86 1
87 0
88 1
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 0
97 0
98 0
99 0
100 0
101 0
102 0
103 1
104 1
105 0
106 1
107 0
108 1
109 1
110 0
111 0
112 0
113 0
114 0
115 0
116 0
117 0
118 0
119 0
120 1
121 0
122 0
123 1
124 0
125 1
126 0
127 0
128 1
129 0
130 0
131 0
132 0
133 0
134 0
135 0
136 0
137 0
138 0
139 0
140 1
141 0
142 0
143 1
144 0
145 1
146 0
147 0
148 1
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
## kleene caching type
VECTOR
## kleene caching vec size
1215
## action hash keys
0 0
1 1
2 2
3 3
4 4



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
robot-at(x14, y15)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(10)) and($a(2) $s(10)) and($a(0) $s(10)) and($a(3) $s(10))) : $c(0)) (or(and($a(1) $s(0)) and($a(2) $s(1)) and($a(0) $s(14)) and($a(3) $s(11))) : Bernoulli($c(0.510293290019035))) ($c(1) : $s(10)) )
## determinized formula
switch( (or($s(5) and($a(1) $s(10)) and($a(2) $s(10)) and($a(0) $s(10)) and($a(3) $s(10))) : $c(0)) (or(and($a(1) $s(0)) and($a(2) $s(1)) and($a(0) $s(14)) and($a(3) $s(11))) : $c(1)) ($c(1) : $s(10)) )
## hash index
10
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
320
0 0 1 0 1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 1 2 0 0.489706709980965 1 0.510293290019035
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 1 2 0 0.489706709980965 1 0.510293290019035
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 1 2 0 0.489706709980965 1 0.510293290019035
18 1 2 0 0.489706709980965 1 0.510293290019035
19 0 1 0 1
20 0 1 0 1
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 0 1 0 1
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 0 1 0 1
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 0 1 0 1
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 0 1 0 1
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 1 1 1
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 0 1 0 1
45 1 1 1 1
46 0 1 0 1
47 0 1 0 1
48 0 1 0 1
49 0 1 0 1
50 1 1 1 1
51 0 1 0 1
52 0 1 0 1
53 0 1 0 1
54 0 1 0 1
55 1 1 1 1
56 0 1 0 1
57 0 1 0 1
58 0 1 0 1
59 0 1 0 1
60 0 1 0 1
61 0 1 0 1
62 0 1 0 1
63 0 1 0 1
64 0 1 0 1
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 0 1 0 1
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 0 1 0 1
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 0 1 0 1
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 0 1 0 1
81 1 2 0 0.489706709980965 1 0.510293290019035
82 0 1 0 1
83 0 1 0 1
84 0 1 0 1
85 0 1 0 1
86 1 2 0 0.489706709980965 1 0.510293290019035
87 0 1 0 1
88 1 2 0 0.489706709980965 1 0.510293290019035
89 0 1 0 1
90 0 1 0 1
91 1 2 0 0.489706709980965 1 0.510293290019035
92 1 2 0 0.489706709980965 1 0.510293290019035
93 0 1 0 1
94 0 1 0 1
95 0 1 0 1
96 1 2 0 0.489706709980965 1 0.510293290019035
97 1 2 0 0.489706709980965 1 0.510293290019035
98 1 2 0 0.489706709980965 1 0.510293290019035
99 0 1 0 1
100 0 1 0 1
101 0 1 0 1
102 0 1 0 1
103 0 1 0 1
104 0 1 0 1
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 0 1 0 1
109 0 1 0 1
110 0 1 0 1
111 0 1 0 1
112 0 1 0 1
113 0 1 0 1
114 0 1 0 1
115 0 1 0 1
116 0 1 0 1
117 0 1 0 1
118 0 1 0 1
119 0 1 0 1
120 1 1 1 1
121 0 1 0 1
122 0 1 0 1
123 0 1 0 1
124 0 1 0 1
125 1 1 1 1
126 0 1 0 1
127 0 1 0 1
128 0 1 0 1
129 0 1 0 1
130 1 1 1 1
131 0 1 0 1
132 0 1 0 1
133 0 1 0 1
134 0 1 0 1
135 1 1 1 1
136 0 1 0 1
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 0 1 0 1
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 0 1 0 1
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 0 1 0 1
149 0 1 0 1
150 0 1 0 1
151 0 1 0 1
152 0 1 0 1
153 0 1 0 1
154 0 1 0 1
155 0 1 0 1
156 0 1 0 1
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
160 0 1 0 1
161 0 1 0 1
162 0 1 0 1
163 0 1 0 1
164 1 2 0 0.489706709980965 1 0.510293290019035
165 0 1 0 1
166 0 1 0 1
167 0 1 0 1
168 1 2 0 0.489706709980965 1 0.510293290019035
169 1 2 0 0.489706709980965 1 0.510293290019035
170 0 1 0 1
171 0 1 0 1
172 1 2 0 0.489706709980965 1 0.510293290019035
173 0 1 0 1
174 1 2 0 0.489706709980965 1 0.510293290019035
175 0 1 0 1
176 0 1 0 1
177 1 2 0 0.489706709980965 1 0.510293290019035
178 1 2 0 0.489706709980965 1 0.510293290019035
179 1 2 0 0.489706709980965 1 0.510293290019035
180 0 1 0 1
181 0 1 0 1
182 0 1 0 1
183 0 1 0 1
184 0 1 0 1
185 0 1 0 1
186 0 1 0 1
187 0 1 0 1
188 0 1 0 1
189 0 1 0 1
190 0 1 0 1
191 0 1 0 1
192 0 1 0 1
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 0 1 0 1
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 1 1 1
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 0 1 0 1
205 1 1 1 1
206 0 1 0 1
207 0 1 0 1
208 0 1 0 1
209 0 1 0 1
210 1 1 1 1
211 0 1 0 1
212 0 1 0 1
213 0 1 0 1
214 0 1 0 1
215 1 1 1 1
216 0 1 0 1
217 0 1 0 1
218 0 1 0 1
219 0 1 0 1
220 0 1 0 1
221 0 1 0 1
222 0 1 0 1
223 0 1 0 1
224 0 1 0 1
225 0 1 0 1
226 0 1 0 1
227 0 1 0 1
228 0 1 0 1
229 0 1 0 1
230 0 1 0 1
231 0 1 0 1
232 0 1 0 1
233 0 1 0 1
234 0 1 0 1
235 0 1 0 1
236 0 1 0 1
237 0 1 0 1
238 0 1 0 1
239 0 1 0 1
240 0 1 0 1
241 1 2 0 0.489706709980965 1 0.510293290019035
242 0 1 0 1
243 0 1 0 1
244 1 2 0 0.489706709980965 1 0.510293290019035
245 0 1 0 1
246 1 2 0 0.489706709980965 1 0.510293290019035
247 0 1 0 1
248 1 2 0 0.489706709980965 1 0.510293290019035
249 1 2 0 0.489706709980965 1 0.510293290019035
250 0 1 0 1
251 1 2 0 0.489706709980965 1 0.510293290019035
252 1 2 0 0.489706709980965 1 0.510293290019035
253 0 1 0 1
254 1 2 0 0.489706709980965 1 0.510293290019035
255 0 1 0 1
256 1 2 0 0.489706709980965 1 0.510293290019035
257 1 2 0 0.489706709980965 1 0.510293290019035
258 1 2 0 0.489706709980965 1 0.510293290019035
259 1 2 0 0.489706709980965 1 0.510293290019035
260 0 1 0 1
261 0 1 0 1
262 0 1 0 1
263 0 1 0 1
264 0 1 0 1
265 0 1 0 1
266 0 1 0 1
267 0 1 0 1
268 0 1 0 1
269 0 1 0 1
270 0 1 0 1
271 0 1 0 1
272 0 1 0 1
273 0 1 0 1
274 0 1 0 1
275 0 1 0 1
276 0 1 0 1
277 0 1 0 1
278 0 1 0 1
279 0 1 0 1
280 1 1 1 1
281 0 1 0 1
282 0 1 0 1
283 0 1 0 1
284 0 1 0 1
285 1 1 1 1
286 0 1 0 1
287 0 1 0 1
288 0 1 0 1
289 0 1 0 1
290 1 1 1 1
291 0 1 0 1
292 0 1 0 1
293 0 1 0 1
294 0 1 0 1
295 1 1 1 1
296 0 1 0 1
297 0 1 0 1
298 0 1 0 1
299 0 1 0 1
300 0 1 0 1
301 0 1 0 1
302 0 1 0 1
303 0 1 0 1
304 0 1 0 1
305 0 1 0 1
306 0 1 0 1
307 0 1 0 1
308 0 1 0 1
309 0 1 0 1
310 0 1 0 1
311 0 1 0 1
312 0 1 0 1
313 0 1 0 1
314 0 1 0 1
315 0 1 0 1
316 0 1 0 1
317 0 1 0 1
318 0 1 0 1
319 0 1 0 1
## kleene caching type
VECTOR
## kleene caching vec size
3645
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
1
## name
robot-at(x21, y15)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(11)) and($a(2) $s(11)) and($a(0) $s(11)) and($a(3) $s(11))) : $c(0)) (or(and($a(1) $s(2)) and($a(2) $s(3)) and($a(0) $s(10)) and($a(3) $s(12))) : Bernoulli($c(0.309061002451926))) ($c(1) : $s(11)) )
## determinized formula
switch( (or($s(5) and($a(1) $s(11)) and($a(2) $s(11)) and($a(0) $s(11)) and($a(3) $s(11))) : $c(0)) (or(and($a(1) $s(2)) and($a(2) $s(3)) and($a(0) $s(10)) and($a(3) $s(12))) : $c(0)) ($c(1) : $s(11)) )
## hash index
11
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
320
0 0 1 0 1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 0 2 0 0.690938997548074 1 0.309061002451926
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 0 2 0 0.690938997548074 1 0.309061002451926
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 0 2 0 0.690938997548074 1 0.309061002451926
18 0 2 0 0.690938997548074 1 0.309061002451926
19 0 1 0 1
20 0 1 0 1
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 0 1 0 1
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 0 1 0 1
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 0 1 0 1
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 0 1 0 1
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 0 1 0 1
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 0 2 0 0.690938997548074 1 0.309061002451926
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 0 2 0 0.690938997548074 1 0.309061002451926
49 0 2 0 0.690938997548074 1 0.309061002451926
50 0 1 0 1
51 0 1 0 1
52 0 2 0 0.690938997548074 1 0.309061002451926
53 0 1 0 1
54 0 2 0 0.690938997548074 1 0.309061002451926
55 0 1 0 1
56 0 1 0 1
57 0 2 0 0.690938997548074 1 0.309061002451926
58 0 2 0 0.690938997548074 1 0.309061002451926
59 0 2 0 0.690938997548074 1 0.309061002451926
60 0 1 0 1
61 0 1 0 1
62 0 1 0 1
63 0 1 0 1
64 0 1 0 1
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 0 1 0 1
69 0 1 0 1
70 0 1 0 1
71 0 1 0 1
72 0 1 0 1
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 0 1 0 1
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 1 1 1 1
81 0 1 0 1
82 0 1 0 1
83 0 1 0 1
84 0 1 0 1
85 1 1 1 1
86 0 1 0 1
87 0 1 0 1
88 0 1 0 1
89 0 1 0 1
90 1 1 1 1
91 0 1 0 1
92 0 1 0 1
93 0 1 0 1
94 0 1 0 1
95 1 1 1 1
96 0 1 0 1
97 0 1 0 1
98 0 1 0 1
99 0 1 0 1
100 0 1 0 1
101 0 1 0 1
102 0 1 0 1
103 0 1 0 1
104 0 1 0 1
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 0 1 0 1
109 0 1 0 1
110 0 1 0 1
111 0 1 0 1
112 0 1 0 1
113 0 1 0 1
114 0 1 0 1
115 0 1 0 1
116 0 1 0 1
117 0 1 0 1
118 0 1 0 1
119 0 1 0 1
120 1 1 1 1
121 0 1 0 1
122 0 1 0 1
123 0 1 0 1
124 0 1 0 1
125 1 1 1 1
126 0 1 0 1
127 0 1 0 1
128 0 1 0 1
129 0 1 0 1
130 1 1 1 1
131 0 1 0 1
132 0 1 0 1
133 0 1 0 1
134 0 1 0 1
135 1 1 1 1
136 0 1 0 1
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 0 1 0 1
141 0 1 0 1
142 0 1 0 1
143 0 1 0 1
144 0 1 0 1
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 0 1 0 1
149 0 1 0 1
150 0 1 0 1
151 0 1 0 1
152 0 1 0 1
153 0 1 0 1
154 0 1 0 1
155 0 1 0 1
156 0 1 0 1
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
160 0 1 0 1
161 0 2 0 0.690938997548074 1 0.309061002451926
162 0 1 0 1
163 0 1 0 1
164 0 1 0 1
165 0 1 0 1
166 0 2 0 0.690938997548074 1 0.309061002451926
167 0 1 0 1
168 0 2 0 0.690938997548074 1 0.309061002451926
169 0 1 0 1
170 0 1 0 1
171 0 2 0 0.690938997548074 1 0.309061002451926
172 0 2 0 0.690938997548074 1 0.309061002451926
173 0 1 0 1
174 0 1 0 1
175 0 1 0 1
176 0 2 0 0.690938997548074 1 0.309061002451926
177 0 2 0 0.690938997548074 1 0.309061002451926
178 0 2 0 0.690938997548074 1 0.309061002451926
179 0 1 0 1
180 0 1 0 1
181 0 1 0 1
182 0 1 0 1
183 0 1 0 1
184 0 1 0 1
185 0 1 0 1
186 0 1 0 1
187 0 1 0 1
188 0 1 0 1
189 0 1 0 1
190 0 1 0 1
191 0 1 0 1
192 0 1 0 1
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 0 1 0 1
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 0 1 0 1
201 0 2 0 0.690938997548074 1 0.309061002451926
202 0 1 0 1
203 0 1 0 1
204 0 2 0 0.690938997548074 1 0.309061002451926
205 0 1 0 1
206 0 2 0 0.690938997548074 1 0.309061002451926
207 0 1 0 1
208 0 2 0 0.690938997548074 1 0.309061002451926
209 0 2 0 0.690938997548074 1 0.309061002451926
210 0 1 0 1
211 0 2 0 0.690938997548074 1 0.309061002451926
212 0 2 0 0.690938997548074 1 0.309061002451926
213 0 1 0 1
214 0 2 0 0.690938997548074 1 0.309061002451926
215 0 1 0 1
216 0 2 0 0.690938997548074 1 0.309061002451926
217 0 2 0 0.690938997548074 1 0.309061002451926
218 0 2 0 0.690938997548074 1 0.309061002451926
219 0 2 0 0.690938997548074 1 0.309061002451926
220 0 1 0 1
221 0 1 0 1
222 0 1 0 1
223 0 1 0 1
224 0 1 0 1
225 0 1 0 1
226 0 1 0 1
227 0 1 0 1
228 0 1 0 1
229 0 1 0 1
230 0 1 0 1
231 0 1 0 1
232 0 1 0 1
233 0 1 0 1
234 0 1 0 1
235 0 1 0 1
236 0 1 0 1
237 0 1 0 1
238 0 1 0 1
239 0 1 0 1
240 1 1 1 1
241 0 1 0 1
242 0 1 0 1
243 0 1 0 1
244 0 1 0 1
245 1 1 1 1
246 0 1 0 1
247 0 1 0 1
248 0 1 0 1
249 0 1 0 1
250 1 1 1 1
251 0 1 0 1
252 0 1 0 1
253 0 1 0 1
254 0 1 0 1
255 1 1 1 1
256 0 1 0 1
257 0 1 0 1
258 0 1 0 1
259 0 1 0 1
260 0 1 0 1
261 0 1 0 1
262 0 1 0 1
263 0 1 0 1
264 0 1 0 1
265 0 1 0 1
266 0 1 0 1
267 0 1 0 1
268 0 1 0 1
269 0 1 0 1
270 0 1 0 1
271 0 1 0 1
272 0 1 0 1
273 0 1 0 1
274 0 1 0 1
275 0 1 0 1
276 0 1 0 1
277 0 1 0 1
278 0 1 0 1
279 0 1 0 1
280 1 1 1 1
281 0 1 0 1
282 0 1 0 1
283 0 1 0 1
284 0 1 0 1
285 1 1 1 1
286 0 1 0 1
287 0 1 0 1
288 0 1 0 1
289 0 1 0 1
290 1 1 1 1
291 0 1 0 1
292 0 1 0 1
293 0 1 0 1
294 0 1 0 1
295 1 1 1 1
296 0 1 0 1
297 0 1 0 1
298 0 1 0 1
299 0 1 0 1
300 0 1 0 1
301 0 1 0 1
302 0 1 0 1
303 0 1 0 1
304 0 1 0 1
305 0 1 0 1
306 0 1 0 1
307 0 1 0 1
308 0 1 0 1
309 0 1 0 1
310 0 1 0 1
311 0 1 0 1
312 0 1 0 1
313 0 1 0 1
314 0 1 0 1
315 0 1 0 1
316 0 1 0 1
317 0 1 0 1
318 0 1 0 1
319 0 1 0 1
## kleene caching type
VECTOR
## kleene caching vec size
3645
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
2
## name
robot-at(x30, y15)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(12)) and($a(2) $s(12)) and($a(3) $s(12))) : $c(0)) (or(and($a(1) $s(4)) and($a(2) $s(5)) and($a(0) $s(11))) : Bernoulli($c(0.083674353081733))) ($c(1) : $s(12)) )
## determinized formula
switch( (or($s(5) and($a(1) $s(12)) and($a(2) $s(12)) and($a(3) $s(12))) : $c(0)) (or(and($a(1) $s(4)) and($a(2) $s(5)) and($a(0) $s(11))) : $c(0)) ($c(1) : $s(12)) )
## hash index
12
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
80
0 0 1 0 1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 0 2 0 0.916325646918267 1 0.083674353081733
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 0 1 0 1
13 0 1 0 1
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 0 1 0 1
21 0 1 0 1
22 0 1 0 1
23 0 1 0 1
24 0 2 0 0.916325646918267 1 0.083674353081733
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 0 2 0 0.916325646918267 1 0.083674353081733
29 0 2 0 0.916325646918267 1 0.083674353081733
30 0 1 0 1
31 0 1 0 1
32 0 1 0 1
33 0 1 0 1
34 0 1 0 1
35 0 1 0 1
36 0 1 0 1
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 1 1 1
41 0 1 0 1
42 0 1 0 1
43 0 1 0 1
44 1 1 1 1
45 1 1 1 1
46 0 1 0 1
47 0 1 0 1
48 0 1 0 1
49 1 1 1 1
50 0 1 0 1
51 0 1 0 1
52 0 1 0 1
53 0 1 0 1
54 0 1 0 1
55 0 1 0 1
56 0 1 0 1
57 0 1 0 1
58 0 1 0 1
59 0 1 0 1
60 1 1 1 1
61 0 1 0 1
62 0 1 0 1
63 0 1 0 1
64 0 2 0 0.916325646918267 1 0.083674353081733
65 1 1 1 1
66 0 1 0 1
67 0 1 0 1
68 0 1 0 1
69 0 2 0 0.916325646918267 1 0.083674353081733
70 0 1 0 1
71 0 1 0 1
72 0 1 0 1
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 0 1 0 1
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
## kleene caching type
VECTOR
## kleene caching vec size
405
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
3
## name
robot-at(x6, y15)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(13)) and($a(2) $s(13)) and($a(0) $s(13))) : $c(0)) (or(and($a(1) $s(6)) and($a(2) $s(7)) and($a(3) $s(14))) : Bernoulli($c(0.963977381587029))) ($c(1) : $s(13)) )
## determinized formula
switch( (or($s(5) and($a(1) $s(13)) and($a(2) $s(13)) and($a(0) $s(13))) : $c(0)) (or(and($a(1) $s(6)) and($a(2) $s(7)) and($a(3) $s(14))) : $c(1)) ($c(1) : $s(13)) )
## hash index
13
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
160
0 0 1 0 1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 0 1 0 1
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 0 1 0 1
13 1 2 0 0.0360226184129715 1 0.963977381587029
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 0 1 0 1
21 0 1 0 1
22 1 2 0 0.0360226184129715 1 0.963977381587029
23 0 1 0 1
24 0 1 0 1
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 0 1 0 1
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 1 2 0 0.0360226184129715 1 0.963977381587029
33 1 2 0 0.0360226184129715 1 0.963977381587029
34 0 1 0 1
35 0 1 0 1
36 0 1 0 1
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 1 1 1 1
41 1 1 1 1
42 0 1 0 1
43 0 1 0 1
44 0 1 0 1
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 0 1 0 1
49 0 1 0 1
50 1 1 1 1
51 1 1 1 1
52 0 1 0 1
53 0 1 0 1
54 0 1 0 1
55 0 1 0 1
56 0 1 0 1
57 0 1 0 1
58 0 1 0 1
59 0 1 0 1
60 1 1 1 1
61 1 1 1 1
62 0 1 0 1
63 0 1 0 1
64 0 1 0 1
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 0 1 0 1
69 0 1 0 1
70 1 1 1 1
71 1 1 1 1
72 0 1 0 1
73 0 1 0 1
74 0 1 0 1
75 0 1 0 1
76 0 1 0 1
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 0 1 0 1
81 1 2 0 0.0360226184129715 1 0.963977381587029
82 0 1 0 1
83 0 1 0 1
84 0 1 0 1
85 0 1 0 1
86 0 1 0 1
87 0 1 0 1
88 0 1 0 1
89 0 1 0 1
90 0 1 0 1
91 1 2 0 0.0360226184129715 1 0.963977381587029
92 0 1 0 1
93 1 2 0 0.0360226184129715 1 0.963977381587029
94 0 1 0 1
95 0 1 0 1
96 0 1 0 1
97 0 1 0 1
98 0 1 0 1
99 0 1 0 1
100 0 1 0 1
101 1 2 0 0.0360226184129715 1 0.963977381587029
102 1 2 0 0.0360226184129715 1 0.963977381587029
103 0 1 0 1
104 0 1 0 1
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 0 1 0 1
109 0 1 0 1
110 0 1 0 1
111 1 2 0 0.0360226184129715 1 0.963977381587029
112 1 2 0 0.0360226184129715 1 0.963977381587029
113 1 2 0 0.0360226184129715 1 0.963977381587029
114 0 1 0 1
115 0 1 0 1
116 0 1 0 1
117 0 1 0 1
118 0 1 0 1
119 0 1 0 1
120 1 1 1 1
121 1 2 0 0.0360226184129715 1 0.963977381587029
122 0 1 0 1
123 0 1 0 1
124 0 1 0 1
125 0 1 0 1
126 0 1 0 1
127 0 1 0 1
128 0 1 0 1
129 0 1 0 1
130 1 1 1 1
131 1 2 0 0.0360226184129715 1 0.963977381587029
132 0 1 0 1
133 0 1 0 1
134 0 1 0 1
135 0 1 0 1
136 0 1 0 1
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 1 1 1 1
141 1 2 0 0.0360226184129715 1 0.963977381587029
142 0 1 0 1
143 0 1 0 1
144 0 1 0 1
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 0 1 0 1
149 0 1 0 1
150 1 1 1 1
151 1 2 0 0.0360226184129715 1 0.963977381587029
152 0 1 0 1
153 0 1 0 1
154 0 1 0 1
155 0 1 0 1
156 0 1 0 1
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
## kleene caching type
VECTOR
## kleene caching vec size
1215
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
4
## name
robot-at(x9, y15)
## number of values
2
## values
0 false
1 true
## formula
switch( (or($s(5) and($a(1) $s(14)) and($a(2) $s(14)) and($a(0) $s(14)) and($a(3) $s(14))) : $c(0)) (or(and($a(1) $s(8)) and($a(2) $s(9)) and($a(0) $s(13)) and($a(3) $s(10))) : Bernoulli($c(0.763707464560866))) ($c(1) : $s(14)) )
## determinized formula
switch( (or($s(5) and($a(1) $s(14)) and($a(2) $s(14)) and($a(0) $s(14)) and($a(3) $s(14))) : $c(0)) (or(and($a(1) $s(8)) and($a(2) $s(9)) and($a(0) $s(13)) and($a(3) $s(10))) : $c(1)) ($c(1) : $s(14)) )
## hash index
14
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
320
0 0 1 0 1
1 0 1 0 1
2 0 1 0 1
3 0 1 0 1
4 0 1 0 1
5 0 1 0 1
6 0 1 0 1
7 0 1 0 1
8 0 1 0 1
9 0 1 0 1
10 0 1 0 1
11 0 1 0 1
12 0 1 0 1
13 1 2 0 0.236292535439134 1 0.763707464560866
14 0 1 0 1
15 0 1 0 1
16 0 1 0 1
17 0 1 0 1
18 0 1 0 1
19 0 1 0 1
20 0 1 0 1
21 0 1 0 1
22 1 2 0 0.236292535439134 1 0.763707464560866
23 0 1 0 1
24 0 1 0 1
25 0 1 0 1
26 0 1 0 1
27 0 1 0 1
28 0 1 0 1
29 0 1 0 1
30 0 1 0 1
31 0 1 0 1
32 1 2 0 0.236292535439134 1 0.763707464560866
33 1 2 0 0.236292535439134 1 0.763707464560866
34 0 1 0 1
35 0 1 0 1
36 0 1 0 1
37 0 1 0 1
38 0 1 0 1
39 0 1 0 1
40 0 1 0 1
41 1 2 0 0.236292535439134 1 0.763707464560866
42 0 1 0 1
43 0 1 0 1
44 0 1 0 1
45 0 1 0 1
46 0 1 0 1
47 0 1 0 1
48 0 1 0 1
49 0 1 0 1
50 0 1 0 1
51 1 2 0 0.236292535439134 1 0.763707464560866
52 0 1 0 1
53 1 2 0 0.236292535439134 1 0.763707464560866
54 0 1 0 1
55 0 1 0 1
56 0 1 0 1
57 0 1 0 1
58 0 1 0 1
59 0 1 0 1
60 0 1 0 1
61 1 2 0 0.236292535439134 1 0.763707464560866
62 1 2 0 0.236292535439134 1 0.763707464560866
63 0 1 0 1
64 0 1 0 1
65 0 1 0 1
66 0 1 0 1
67 0 1 0 1
68 0 1 0 1
69 0 1 0 1
70 0 1 0 1
71 1 2 0 0.236292535439134 1 0.763707464560866
72 1 2 0 0.236292535439134 1 0.763707464560866
73 1 2 0 0.236292535439134 1 0.763707464560866
74 0 1 0 1
75 0 1 0 1
76 0 1 0 1
77 0 1 0 1
78 0 1 0 1
79 0 1 0 1
80 0 1 0 1
81 0 1 0 1
82 0 1 0 1
83 0 1 0 1
84 1 2 0 0.236292535439134 1 0.763707464560866
85 0 1 0 1
86 0 1 0 1
87 0 1 0 1
88 0 1 0 1
89 0 1 0 1
90 0 1 0 1
91 0 1 0 1
92 0 1 0 1
93 1 2 0 0.236292535439134 1 0.763707464560866
94 1 2 0 0.236292535439134 1 0.763707464560866
95 0 1 0 1
96 0 1 0 1
97 0 1 0 1
98 0 1 0 1
99 0 1 0 1
100 0 1 0 1
101 0 1 0 1
102 1 2 0 0.236292535439134 1 0.763707464560866
103 0 1 0 1
104 1 2 0 0.236292535439134 1 0.763707464560866
105 0 1 0 1
106 0 1 0 1
107 0 1 0 1
108 0 1 0 1
109 0 1 0 1
110 0 1 0 1
111 0 1 0 1
112 1 2 0 0.236292535439134 1 0.763707464560866
113 1 2 0 0.236292535439134 1 0.763707464560866
114 1 2 0 0.236292535439134 1 0.763707464560866
115 0 1 0 1
116 0 1 0 1
117 0 1 0 1
118 0 1 0 1
119 0 1 0 1
120 0 1 0 1
121 1 2 0 0.236292535439134 1 0.763707464560866
122 0 1 0 1
123 0 1 0 1
124 1 2 0 0.236292535439134 1 0.763707464560866
125 0 1 0 1
126 0 1 0 1
127 0 1 0 1
128 0 1 0 1
129 0 1 0 1
130 0 1 0 1
131 1 2 0 0.236292535439134 1 0.763707464560866
132 0 1 0 1
133 1 2 0 0.236292535439134 1 0.763707464560866
134 1 2 0 0.236292535439134 1 0.763707464560866
135 0 1 0 1
136 0 1 0 1
137 0 1 0 1
138 0 1 0 1
139 0 1 0 1
140 0 1 0 1
141 1 2 0 0.236292535439134 1 0.763707464560866
142 1 2 0 0.236292535439134 1 0.763707464560866
143 0 1 0 1
144 1 2 0 0.236292535439134 1 0.763707464560866
145 0 1 0 1
146 0 1 0 1
147 0 1 0 1
148 0 1 0 1
149 0 1 0 1
150 0 1 0 1
151 1 2 0 0.236292535439134 1 0.763707464560866
152 1 2 0 0.236292535439134 1 0.763707464560866
153 1 2 0 0.236292535439134 1 0.763707464560866
154 1 2 0 0.236292535439134 1 0.763707464560866
155 0 1 0 1
156 0 1 0 1
157 0 1 0 1
158 0 1 0 1
159 0 1 0 1
160 1 1 1 1
161 0 1 0 1
162 0 1 0 1
163 0 1 0 1
164 0 1 0 1
165 0 1 0 1
166 0 1 0 1
167 0 1 0 1
168 0 1 0 1
169 0 1 0 1
170 1 1 1 1
171 0 1 0 1
172 0 1 0 1
173 0 1 0 1
174 0 1 0 1
175 0 1 0 1
176 0 1 0 1
177 0 1 0 1
178 0 1 0 1
179 0 1 0 1
180 1 1 1 1
181 0 1 0 1
182 0 1 0 1
183 0 1 0 1
184 0 1 0 1
185 0 1 0 1
186 0 1 0 1
187 0 1 0 1
188 0 1 0 1
189 0 1 0 1
190 1 1 1 1
191 0 1 0 1
192 0 1 0 1
193 0 1 0 1
194 0 1 0 1
195 0 1 0 1
196 0 1 0 1
197 0 1 0 1
198 0 1 0 1
199 0 1 0 1
200 1 1 1 1
201 0 1 0 1
202 0 1 0 1
203 0 1 0 1
204 0 1 0 1
205 0 1 0 1
206 0 1 0 1
207 0 1 0 1
208 0 1 0 1
209 0 1 0 1
210 1 1 1 1
211 0 1 0 1
212 0 1 0 1
213 0 1 0 1
214 0 1 0 1
215 0 1 0 1
216 0 1 0 1
217 0 1 0 1
218 0 1 0 1
219 0 1 0 1
220 1 1 1 1
221 0 1 0 1
222 0 1 0 1
223 0 1 0 1
224 0 1 0 1
225 0 1 0 1
226 0 1 0 1
227 0 1 0 1
228 0 1 0 1
229 0 1 0 1
230 1 1 1 1
231 0 1 0 1
232 0 1 0 1
233 0 1 0 1
234 0 1 0 1
235 0 1 0 1
236 0 1 0 1
237 0 1 0 1
238 0 1 0 1
239 0 1 0 1
240 1 1 1 1
241 0 1 0 1
242 0 1 0 1
243 0 1 0 1
244 0 1 0 1
245 0 1 0 1
246 0 1 0 1
247 0 1 0 1
248 0 1 0 1
249 0 1 0 1
250 1 1 1 1
251 0 1 0 1
252 0 1 0 1
253 0 1 0 1
254 0 1 0 1
255 0 1 0 1
256 0 1 0 1
257 0 1 0 1
258 0 1 0 1
259 0 1 0 1
260 1 1 1 1
261 0 1 0 1
262 0 1 0 1
263 0 1 0 1
264 0 1 0 1
265 0 1 0 1
266 0 1 0 1
267 0 1 0 1
268 0 1 0 1
269 0 1 0 1
270 1 1 1 1
271 0 1 0 1
272 0 1 0 1
273 0 1 0 1
274 0 1 0 1
275 0 1 0 1
276 0 1 0 1
277 0 1 0 1
278 0 1 0 1
279 0 1 0 1
280 1 1 1 1
281 0 1 0 1
282 0 1 0 1
283 0 1 0 1
284 0 1 0 1
285 0 1 0 1
286 0 1 0 1
287 0 1 0 1
288 0 1 0 1
289 0 1 0 1
290 1 1 1 1
291 0 1 0 1
292 0 1 0 1
293 0 1 0 1
294 0 1 0 1
295 0 1 0 1
296 0 1 0 1
297 0 1 0 1
298 0 1 0 1
299 0 1 0 1
300 1 1 1 1
301 0 1 0 1
302 0 1 0 1
303 0 1 0 1
304 0 1 0 1
305 0 1 0 1
306 0 1 0 1
307 0 1 0 1
308 0 1 0 1
309 0 1 0 1
310 1 1 1 1
311 0 1 0 1
312 0 1 0 1
313 0 1 0 1
314 0 1 0 1
315 0 1 0 1
316 0 1 0 1
317 0 1 0 1
318 0 1 0 1
319 0 1 0 1
## kleene caching type
VECTOR
## kleene caching vec size
3645
## action hash keys
0 0
1 1
2 2
3 3
4 4



#####REWARD#####
## formula
-($c(0) ~($s(5)))
## min
-1
## max
0
## independent from actions
1
## hash index
15
## caching type
VECTOR
## precomputed results
2
0 -1
1 0
## kleene caching type
VECTOR
## kleene caching vec size
3
## action hash keys
0 0
1 0
2 0
3 0
4 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 1 0 0 
## relevant preconditions
0


## index
4
## state
1 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
4
0 5
2 5
8 5
10 5
## kleene state fluent hash keys (first line is the number of keys)
4
0 5
2 5
8 5
10 5

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
4
1 5
3 5
9 5
10 10
## kleene state fluent hash keys (first line is the number of keys)
4
1 5
3 5
9 5
10 15

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
4
0 10
2 10
4 5
11 5
## kleene state fluent hash keys (first line is the number of keys)
4
0 15
2 15
4 5
11 5

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
4
1 10
3 10
5 5
11 10
## kleene state fluent hash keys (first line is the number of keys)
4
1 15
3 15
5 5
11 15

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
3
2 20
4 10
12 5
## kleene state fluent hash keys (first line is the number of keys)
3
2 45
4 15
12 5

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
16
0 20
1 20
2 40
3 20
4 20
5 10
6 5
7 5
8 10
9 10
10 20
11 20
12 10
13 5
14 5
15 1
## kleene state fluent hash keys (first line is the number of keys)
16
0 45
1 45
2 135
3 45
4 45
5 15
6 5
7 5
8 15
9 15
10 45
11 45
12 15
13 5
14 5
15 1

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
3
6 10
8 20
13 10
## kleene state fluent hash keys (first line is the number of keys)
3
6 15
8 45
13 15

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
3
7 10
9 20
13 20
## kleene state fluent hash keys (first line is the number of keys)
3
7 15
9 45
13 45

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
4
0 40
6 20
8 40
14 10
## kleene state fluent hash keys (first line is the number of keys)
4
0 135
6 45
8 135
14 15

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
4
1 40
7 20
9 40
14 20
## kleene state fluent hash keys (first line is the number of keys)
4
1 135
7 45
9 135
14 45


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
5
0 80
1 80
10 40
11 40
14 40
## kleene state fluent hash keys (first line is the number of keys)
5
0 405
1 405
10 135
11 135
14 135

## index
1
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
5
2 80
3 40
10 80
11 80
12 20
## kleene state fluent hash keys (first line is the number of keys)
5
2 405
3 135
10 405
11 405
12 45

## index
2
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
531441
## state fluent hash keys (first line is the number of keys)
4
4 40
5 20
11 160
12 40
## kleene state fluent hash keys (first line is the number of keys)
4
4 135
5 45
11 1215
12 135

## index
3
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
1594323
## state fluent hash keys (first line is the number of keys)
4
6 40
7 40
13 40
14 80
## kleene state fluent hash keys (first line is the number of keys)
4
6 135
7 135
13 135
14 405

## index
4
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
4782969
## state fluent hash keys (first line is the number of keys)
5
8 80
9 80
10 160
13 80
14 160
## kleene state fluent hash keys (first line is the number of keys)
5
8 405
9 405
10 1215
13 405
14 1215



#####TRAINING SET#####
16
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
