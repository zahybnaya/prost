#####TASK#####
## name
sysadmin_inst_mdp__4
## horizon
40
## discount factor
1
## number of action fluents
20
## number of det state fluents
0
## number of prob state fluents
20
## number of preconds
0
## number of actions
21
## number of hashing functions
21
## initial state
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
0
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
3312
## number of unique states that were encountered during task analysis
2796
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
reboot(c1)
## number of values
2
## values
0 false
1 true

## index
1
## name
reboot(c10)
## number of values
2
## values
0 false
1 true

## index
2
## name
reboot(c11)
## number of values
2
## values
0 false
1 true

## index
3
## name
reboot(c12)
## number of values
2
## values
0 false
1 true

## index
4
## name
reboot(c13)
## number of values
2
## values
0 false
1 true

## index
5
## name
reboot(c14)
## number of values
2
## values
0 false
1 true

## index
6
## name
reboot(c15)
## number of values
2
## values
0 false
1 true

## index
7
## name
reboot(c16)
## number of values
2
## values
0 false
1 true

## index
8
## name
reboot(c17)
## number of values
2
## values
0 false
1 true

## index
9
## name
reboot(c18)
## number of values
2
## values
0 false
1 true

## index
10
## name
reboot(c19)
## number of values
2
## values
0 false
1 true

## index
11
## name
reboot(c2)
## number of values
2
## values
0 false
1 true

## index
12
## name
reboot(c20)
## number of values
2
## values
0 false
1 true

## index
13
## name
reboot(c3)
## number of values
2
## values
0 false
1 true

## index
14
## name
reboot(c4)
## number of values
2
## values
0 false
1 true

## index
15
## name
reboot(c5)
## number of values
2
## values
0 false
1 true

## index
16
## name
reboot(c6)
## number of values
2
## values
0 false
1 true

## index
17
## name
reboot(c7)
## number of values
2
## values
0 false
1 true

## index
18
## name
reboot(c8)
## number of values
2
## values
0 false
1 true

## index
19
## name
reboot(c9)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####


#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
running(c1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(0) : $c(1)) ($s(0) : Bernoulli(+(/(*(+($s(18) $s(4) $s(6) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(0) : $c(1)) ($s(0) : <=($c(0.5) +(/(*(+($s(18) $s(4) $s(6) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 1 2 0 0.425 1 0.575
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 0 2 0 0.96 1 0.04
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 0 2 0 0.96 1 0.04
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.96 1 0.04
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 0 2 0 0.96 1 0.04
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 1

## index
1
## name
running(c10)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(1) : $c(1)) ($s(1) : Bernoulli(+(/(*(+($s(5) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(1) : $c(1)) ($s(1) : <=($c(0.5) +(/(*(+($s(5) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
1
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 1
20 0

## index
2
## name
running(c11)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(2) : $c(1)) ($s(2) : Bernoulli(+(/(*(+($s(0) $s(16) $s(19) $s(1) $s(4) $s(7) $s(8) $c(1)) $c(0.5)) $c(8)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(2) : $c(1)) ($s(2) : <=($c(0.5) +(/(*(+($s(0) $s(16) $s(19) $s(1) $s(4) $s(7) $s(8) $c(1)) $c(0.5)) $c(8)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
2
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
512
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 0 2 0 0.96 1 0.04
7 1 1 1 1
8 1 2 0 0.4875 1 0.5125
9 1 1 1 1
10 1 2 0 0.425 1 0.575
11 1 1 1 1
12 1 2 0 0.425 1 0.575
13 1 1 1 1
14 1 2 0 0.3625 1 0.6375
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 0 2 0 0.96 1 0.04
19 1 1 1 1
20 0 2 0 0.96 1 0.04
21 1 1 1 1
22 0 2 0 0.96 1 0.04
23 1 1 1 1
24 1 2 0 0.425 1 0.575
25 1 1 1 1
26 1 2 0 0.3625 1 0.6375
27 1 1 1 1
28 1 2 0 0.3625 1 0.6375
29 1 1 1 1
30 1 2 0 0.3 1 0.7
31 1 1 1 1
32 0 2 0 0.96 1 0.04
33 1 1 1 1
34 0 2 0 0.96 1 0.04
35 1 1 1 1
36 0 2 0 0.96 1 0.04
37 1 1 1 1
38 0 2 0 0.96 1 0.04
39 1 1 1 1
40 1 2 0 0.425 1 0.575
41 1 1 1 1
42 1 2 0 0.3625 1 0.6375
43 1 1 1 1
44 1 2 0 0.3625 1 0.6375
45 1 1 1 1
46 1 2 0 0.3 1 0.7
47 1 1 1 1
48 0 2 0 0.96 1 0.04
49 1 1 1 1
50 0 2 0 0.96 1 0.04
51 1 1 1 1
52 0 2 0 0.96 1 0.04
53 1 1 1 1
54 0 2 0 0.96 1 0.04
55 1 1 1 1
56 1 2 0 0.3625 1 0.6375
57 1 1 1 1
58 1 2 0 0.3 1 0.7
59 1 1 1 1
60 1 2 0 0.3 1 0.7
61 1 1 1 1
62 1 2 0 0.2375 1 0.7625
63 1 1 1 1
64 0 2 0 0.96 1 0.04
65 1 1 1 1
66 0 2 0 0.96 1 0.04
67 1 1 1 1
68 0 2 0 0.96 1 0.04
69 1 1 1 1
70 0 2 0 0.96 1 0.04
71 1 1 1 1
72 1 2 0 0.425 1 0.575
73 1 1 1 1
74 1 2 0 0.3625 1 0.6375
75 1 1 1 1
76 1 2 0 0.3625 1 0.6375
77 1 1 1 1
78 1 2 0 0.3 1 0.7
79 1 1 1 1
80 0 2 0 0.96 1 0.04
81 1 1 1 1
82 0 2 0 0.96 1 0.04
83 1 1 1 1
84 0 2 0 0.96 1 0.04
85 1 1 1 1
86 0 2 0 0.96 1 0.04
87 1 1 1 1
88 1 2 0 0.3625 1 0.6375
89 1 1 1 1
90 1 2 0 0.3 1 0.7
91 1 1 1 1
92 1 2 0 0.3 1 0.7
93 1 1 1 1
94 1 2 0 0.2375 1 0.7625
95 1 1 1 1
96 0 2 0 0.96 1 0.04
97 1 1 1 1
98 0 2 0 0.96 1 0.04
99 1 1 1 1
100 0 2 0 0.96 1 0.04
101 1 1 1 1
102 0 2 0 0.96 1 0.04
103 1 1 1 1
104 1 2 0 0.3625 1 0.6375
105 1 1 1 1
106 1 2 0 0.3 1 0.7
107 1 1 1 1
108 1 2 0 0.3 1 0.7
109 1 1 1 1
110 1 2 0 0.2375 1 0.7625
111 1 1 1 1
112 0 2 0 0.96 1 0.04
113 1 1 1 1
114 0 2 0 0.96 1 0.04
115 1 1 1 1
116 0 2 0 0.96 1 0.04
117 1 1 1 1
118 0 2 0 0.96 1 0.04
119 1 1 1 1
120 1 2 0 0.3 1 0.7
121 1 1 1 1
122 1 2 0 0.2375 1 0.7625
123 1 1 1 1
124 1 2 0 0.2375 1 0.7625
125 1 1 1 1
126 1 2 0 0.175 1 0.825
127 1 1 1 1
128 0 2 0 0.96 1 0.04
129 1 1 1 1
130 0 2 0 0.96 1 0.04
131 1 1 1 1
132 0 2 0 0.96 1 0.04
133 1 1 1 1
134 0 2 0 0.96 1 0.04
135 1 1 1 1
136 1 2 0 0.425 1 0.575
137 1 1 1 1
138 1 2 0 0.3625 1 0.6375
139 1 1 1 1
140 1 2 0 0.3625 1 0.6375
141 1 1 1 1
142 1 2 0 0.3 1 0.7
143 1 1 1 1
144 0 2 0 0.96 1 0.04
145 1 1 1 1
146 0 2 0 0.96 1 0.04
147 1 1 1 1
148 0 2 0 0.96 1 0.04
149 1 1 1 1
150 0 2 0 0.96 1 0.04
151 1 1 1 1
152 1 2 0 0.3625 1 0.6375
153 1 1 1 1
154 1 2 0 0.3 1 0.7
155 1 1 1 1
156 1 2 0 0.3 1 0.7
157 1 1 1 1
158 1 2 0 0.2375 1 0.7625
159 1 1 1 1
160 0 2 0 0.96 1 0.04
161 1 1 1 1
162 0 2 0 0.96 1 0.04
163 1 1 1 1
164 0 2 0 0.96 1 0.04
165 1 1 1 1
166 0 2 0 0.96 1 0.04
167 1 1 1 1
168 1 2 0 0.3625 1 0.6375
169 1 1 1 1
170 1 2 0 0.3 1 0.7
171 1 1 1 1
172 1 2 0 0.3 1 0.7
173 1 1 1 1
174 1 2 0 0.2375 1 0.7625
175 1 1 1 1
176 0 2 0 0.96 1 0.04
177 1 1 1 1
178 0 2 0 0.96 1 0.04
179 1 1 1 1
180 0 2 0 0.96 1 0.04
181 1 1 1 1
182 0 2 0 0.96 1 0.04
183 1 1 1 1
184 1 2 0 0.3 1 0.7
185 1 1 1 1
186 1 2 0 0.2375 1 0.7625
187 1 1 1 1
188 1 2 0 0.2375 1 0.7625
189 1 1 1 1
190 1 2 0 0.175 1 0.825
191 1 1 1 1
192 0 2 0 0.96 1 0.04
193 1 1 1 1
194 0 2 0 0.96 1 0.04
195 1 1 1 1
196 0 2 0 0.96 1 0.04
197 1 1 1 1
198 0 2 0 0.96 1 0.04
199 1 1 1 1
200 1 2 0 0.3625 1 0.6375
201 1 1 1 1
202 1 2 0 0.3 1 0.7
203 1 1 1 1
204 1 2 0 0.3 1 0.7
205 1 1 1 1
206 1 2 0 0.2375 1 0.7625
207 1 1 1 1
208 0 2 0 0.96 1 0.04
209 1 1 1 1
210 0 2 0 0.96 1 0.04
211 1 1 1 1
212 0 2 0 0.96 1 0.04
213 1 1 1 1
214 0 2 0 0.96 1 0.04
215 1 1 1 1
216 1 2 0 0.3 1 0.7
217 1 1 1 1
218 1 2 0 0.2375 1 0.7625
219 1 1 1 1
220 1 2 0 0.2375 1 0.7625
221 1 1 1 1
222 1 2 0 0.175 1 0.825
223 1 1 1 1
224 0 2 0 0.96 1 0.04
225 1 1 1 1
226 0 2 0 0.96 1 0.04
227 1 1 1 1
228 0 2 0 0.96 1 0.04
229 1 1 1 1
230 0 2 0 0.96 1 0.04
231 1 1 1 1
232 1 2 0 0.3 1 0.7
233 1 1 1 1
234 1 2 0 0.2375 1 0.7625
235 1 1 1 1
236 1 2 0 0.2375 1 0.7625
237 1 1 1 1
238 1 2 0 0.175 1 0.825
239 1 1 1 1
240 0 2 0 0.96 1 0.04
241 1 1 1 1
242 0 2 0 0.96 1 0.04
243 1 1 1 1
244 0 2 0 0.96 1 0.04
245 1 1 1 1
246 0 2 0 0.96 1 0.04
247 1 1 1 1
248 1 2 0 0.2375 1 0.7625
249 1 1 1 1
250 1 2 0 0.175 1 0.825
251 1 1 1 1
252 1 2 0 0.175 1 0.825
253 1 1 1 1
254 1 2 0 0.1125 1 0.8875
255 1 1 1 1
256 0 2 0 0.96 1 0.04
257 1 1 1 1
258 0 2 0 0.96 1 0.04
259 1 1 1 1
260 0 2 0 0.96 1 0.04
261 1 1 1 1
262 0 2 0 0.96 1 0.04
263 1 1 1 1
264 1 2 0 0.425 1 0.575
265 1 1 1 1
266 1 2 0 0.3625 1 0.6375
267 1 1 1 1
268 1 2 0 0.3625 1 0.6375
269 1 1 1 1
270 1 2 0 0.3 1 0.7
271 1 1 1 1
272 0 2 0 0.96 1 0.04
273 1 1 1 1
274 0 2 0 0.96 1 0.04
275 1 1 1 1
276 0 2 0 0.96 1 0.04
277 1 1 1 1
278 0 2 0 0.96 1 0.04
279 1 1 1 1
280 1 2 0 0.3625 1 0.6375
281 1 1 1 1
282 1 2 0 0.3 1 0.7
283 1 1 1 1
284 1 2 0 0.3 1 0.7
285 1 1 1 1
286 1 2 0 0.2375 1 0.7625
287 1 1 1 1
288 0 2 0 0.96 1 0.04
289 1 1 1 1
290 0 2 0 0.96 1 0.04
291 1 1 1 1
292 0 2 0 0.96 1 0.04
293 1 1 1 1
294 0 2 0 0.96 1 0.04
295 1 1 1 1
296 1 2 0 0.3625 1 0.6375
297 1 1 1 1
298 1 2 0 0.3 1 0.7
299 1 1 1 1
300 1 2 0 0.3 1 0.7
301 1 1 1 1
302 1 2 0 0.2375 1 0.7625
303 1 1 1 1
304 0 2 0 0.96 1 0.04
305 1 1 1 1
306 0 2 0 0.96 1 0.04
307 1 1 1 1
308 0 2 0 0.96 1 0.04
309 1 1 1 1
310 0 2 0 0.96 1 0.04
311 1 1 1 1
312 1 2 0 0.3 1 0.7
313 1 1 1 1
314 1 2 0 0.2375 1 0.7625
315 1 1 1 1
316 1 2 0 0.2375 1 0.7625
317 1 1 1 1
318 1 2 0 0.175 1 0.825
319 1 1 1 1
320 0 2 0 0.96 1 0.04
321 1 1 1 1
322 0 2 0 0.96 1 0.04
323 1 1 1 1
324 0 2 0 0.96 1 0.04
325 1 1 1 1
326 0 2 0 0.96 1 0.04
327 1 1 1 1
328 1 2 0 0.3625 1 0.6375
329 1 1 1 1
330 1 2 0 0.3 1 0.7
331 1 1 1 1
332 1 2 0 0.3 1 0.7
333 1 1 1 1
334 1 2 0 0.2375 1 0.7625
335 1 1 1 1
336 0 2 0 0.96 1 0.04
337 1 1 1 1
338 0 2 0 0.96 1 0.04
339 1 1 1 1
340 0 2 0 0.96 1 0.04
341 1 1 1 1
342 0 2 0 0.96 1 0.04
343 1 1 1 1
344 1 2 0 0.3 1 0.7
345 1 1 1 1
346 1 2 0 0.2375 1 0.7625
347 1 1 1 1
348 1 2 0 0.2375 1 0.7625
349 1 1 1 1
350 1 2 0 0.175 1 0.825
351 1 1 1 1
352 0 2 0 0.96 1 0.04
353 1 1 1 1
354 0 2 0 0.96 1 0.04
355 1 1 1 1
356 0 2 0 0.96 1 0.04
357 1 1 1 1
358 0 2 0 0.96 1 0.04
359 1 1 1 1
360 1 2 0 0.3 1 0.7
361 1 1 1 1
362 1 2 0 0.2375 1 0.7625
363 1 1 1 1
364 1 2 0 0.2375 1 0.7625
365 1 1 1 1
366 1 2 0 0.175 1 0.825
367 1 1 1 1
368 0 2 0 0.96 1 0.04
369 1 1 1 1
370 0 2 0 0.96 1 0.04
371 1 1 1 1
372 0 2 0 0.96 1 0.04
373 1 1 1 1
374 0 2 0 0.96 1 0.04
375 1 1 1 1
376 1 2 0 0.2375 1 0.7625
377 1 1 1 1
378 1 2 0 0.175 1 0.825
379 1 1 1 1
380 1 2 0 0.175 1 0.825
381 1 1 1 1
382 1 2 0 0.1125 1 0.8875
383 1 1 1 1
384 0 2 0 0.96 1 0.04
385 1 1 1 1
386 0 2 0 0.96 1 0.04
387 1 1 1 1
388 0 2 0 0.96 1 0.04
389 1 1 1 1
390 0 2 0 0.96 1 0.04
391 1 1 1 1
392 1 2 0 0.3625 1 0.6375
393 1 1 1 1
394 1 2 0 0.3 1 0.7
395 1 1 1 1
396 1 2 0 0.3 1 0.7
397 1 1 1 1
398 1 2 0 0.2375 1 0.7625
399 1 1 1 1
400 0 2 0 0.96 1 0.04
401 1 1 1 1
402 0 2 0 0.96 1 0.04
403 1 1 1 1
404 0 2 0 0.96 1 0.04
405 1 1 1 1
406 0 2 0 0.96 1 0.04
407 1 1 1 1
408 1 2 0 0.3 1 0.7
409 1 1 1 1
410 1 2 0 0.2375 1 0.7625
411 1 1 1 1
412 1 2 0 0.2375 1 0.7625
413 1 1 1 1
414 1 2 0 0.175 1 0.825
415 1 1 1 1
416 0 2 0 0.96 1 0.04
417 1 1 1 1
418 0 2 0 0.96 1 0.04
419 1 1 1 1
420 0 2 0 0.96 1 0.04
421 1 1 1 1
422 0 2 0 0.96 1 0.04
423 1 1 1 1
424 1 2 0 0.3 1 0.7
425 1 1 1 1
426 1 2 0 0.2375 1 0.7625
427 1 1 1 1
428 1 2 0 0.2375 1 0.7625
429 1 1 1 1
430 1 2 0 0.175 1 0.825
431 1 1 1 1
432 0 2 0 0.96 1 0.04
433 1 1 1 1
434 0 2 0 0.96 1 0.04
435 1 1 1 1
436 0 2 0 0.96 1 0.04
437 1 1 1 1
438 0 2 0 0.96 1 0.04
439 1 1 1 1
440 1 2 0 0.2375 1 0.7625
441 1 1 1 1
442 1 2 0 0.175 1 0.825
443 1 1 1 1
444 1 2 0 0.175 1 0.825
445 1 1 1 1
446 1 2 0 0.1125 1 0.8875
447 1 1 1 1
448 0 2 0 0.96 1 0.04
449 1 1 1 1
450 0 2 0 0.96 1 0.04
451 1 1 1 1
452 0 2 0 0.96 1 0.04
453 1 1 1 1
454 0 2 0 0.96 1 0.04
455 1 1 1 1
456 1 2 0 0.3 1 0.7
457 1 1 1 1
458 1 2 0 0.2375 1 0.7625
459 1 1 1 1
460 1 2 0 0.2375 1 0.7625
461 1 1 1 1
462 1 2 0 0.175 1 0.825
463 1 1 1 1
464 0 2 0 0.96 1 0.04
465 1 1 1 1
466 0 2 0 0.96 1 0.04
467 1 1 1 1
468 0 2 0 0.96 1 0.04
469 1 1 1 1
470 0 2 0 0.96 1 0.04
471 1 1 1 1
472 1 2 0 0.2375 1 0.7625
473 1 1 1 1
474 1 2 0 0.175 1 0.825
475 1 1 1 1
476 1 2 0 0.175 1 0.825
477 1 1 1 1
478 1 2 0 0.1125 1 0.8875
479 1 1 1 1
480 0 2 0 0.96 1 0.04
481 1 1 1 1
482 0 2 0 0.96 1 0.04
483 1 1 1 1
484 0 2 0 0.96 1 0.04
485 1 1 1 1
486 0 2 0 0.96 1 0.04
487 1 1 1 1
488 1 2 0 0.2375 1 0.7625
489 1 1 1 1
490 1 2 0 0.175 1 0.825
491 1 1 1 1
492 1 2 0 0.175 1 0.825
493 1 1 1 1
494 1 2 0 0.1125 1 0.8875
495 1 1 1 1
496 0 2 0 0.96 1 0.04
497 1 1 1 1
498 0 2 0 0.96 1 0.04
499 1 1 1 1
500 0 2 0 0.96 1 0.04
501 1 1 1 1
502 0 2 0 0.96 1 0.04
503 1 1 1 1
504 1 2 0 0.175 1 0.825
505 1 1 1 1
506 1 2 0 0.1125 1 0.8875
507 1 1 1 1
508 1 2 0 0.1125 1 0.8875
509 1 1 1 1
510 1 2 0 0.05 1 0.95
511 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
13122
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 1
19 0
20 0

## index
3
## name
running(c12)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(3) : $c(1)) ($s(3) : Bernoulli(+(/(*(+($s(15) $s(17) $s(6) $s(10) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(3) : $c(1)) ($s(3) : <=($c(0.5) +(/(*(+($s(15) $s(17) $s(6) $s(10) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
3
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 1 2 0 0.45 1 0.55
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 1 2 0 0.35 1 0.65
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 1 2 0 0.35 1 0.65
11 1 1 1 1
12 0 2 0 0.96 1 0.04
13 1 1 1 1
14 1 2 0 0.25 1 0.75
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 1 2 0 0.35 1 0.65
19 1 1 1 1
20 0 2 0 0.96 1 0.04
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 0 2 0 0.96 1 0.04
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 0 2 0 0.96 1 0.04
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.96 1 0.04
33 1 1 1 1
34 1 2 0 0.35 1 0.65
35 1 1 1 1
36 0 2 0 0.96 1 0.04
37 1 1 1 1
38 1 2 0 0.25 1 0.75
39 1 1 1 1
40 0 2 0 0.96 1 0.04
41 1 1 1 1
42 1 2 0 0.25 1 0.75
43 1 1 1 1
44 0 2 0 0.96 1 0.04
45 1 1 1 1
46 1 2 0 0.15 1 0.85
47 1 1 1 1
48 0 2 0 0.96 1 0.04
49 1 1 1 1
50 1 2 0 0.25 1 0.75
51 1 1 1 1
52 0 2 0 0.96 1 0.04
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 0 2 0 0.96 1 0.04
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 0 2 0 0.96 1 0.04
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 1
18 0
19 0
20 0

## index
4
## name
running(c13)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(4) : $c(1)) ($s(4) : Bernoulli(+(/(*(+($s(17) $s(1) $s(7) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(4) : $c(1)) ($s(4) : <=($c(0.5) +(/(*(+($s(17) $s(1) $s(7) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
4
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 1 2 0 0.425 1 0.575
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 0 2 0 0.96 1 0.04
11 1 1 1 1
12 1 2 0 0.3 1 0.7
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 0 2 0 0.96 1 0.04
19 1 1 1 1
20 1 2 0 0.3 1 0.7
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.96 1 0.04
25 1 1 1 1
26 0 2 0 0.96 1 0.04
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 1
17 0
18 0
19 0
20 0

## index
5
## name
running(c14)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(5) : $c(1)) ($s(5) : Bernoulli($c(0.95))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(5) : $c(1)) ($s(5) : $c(1)) ($c(1) : $c(0)) )
## hash index
5
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
4
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 1 2 0 0.05 1 0.95
3 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 0
17 0
18 0
19 0
20 0

## index
6
## name
running(c15)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(6) : $c(1)) ($s(6) : Bernoulli($c(0.95))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(6) : $c(1)) ($s(6) : $c(1)) ($c(1) : $c(0)) )
## hash index
6
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
4
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 1 2 0 0.05 1 0.95
3 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 0

## index
7
## name
running(c16)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(7) : $c(1)) ($s(7) : Bernoulli(+(/(*(+($s(0) $s(11) $s(16) $s(17) $s(9) $s(12) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(7) : $c(1)) ($s(7) : <=($c(0.5) +(/(*(+($s(0) $s(11) $s(16) $s(17) $s(9) $s(12) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
7
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 1 2 0 0.478571428571429 1 0.521428571428571
5 1 1 1 1
6 1 2 0 0.407142857142857 1 0.592857142857143
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 0 2 0 0.96 1 0.04
11 1 1 1 1
12 1 2 0 0.407142857142857 1 0.592857142857143
13 1 1 1 1
14 1 2 0 0.335714285714286 1 0.664285714285714
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 0 2 0 0.96 1 0.04
19 1 1 1 1
20 1 2 0 0.407142857142857 1 0.592857142857143
21 1 1 1 1
22 1 2 0 0.335714285714286 1 0.664285714285714
23 1 1 1 1
24 0 2 0 0.96 1 0.04
25 1 1 1 1
26 0 2 0 0.96 1 0.04
27 1 1 1 1
28 1 2 0 0.335714285714286 1 0.664285714285714
29 1 1 1 1
30 1 2 0 0.264285714285714 1 0.735714285714286
31 1 1 1 1
32 0 2 0 0.96 1 0.04
33 1 1 1 1
34 0 2 0 0.96 1 0.04
35 1 1 1 1
36 1 2 0 0.407142857142857 1 0.592857142857143
37 1 1 1 1
38 1 2 0 0.335714285714286 1 0.664285714285714
39 1 1 1 1
40 0 2 0 0.96 1 0.04
41 1 1 1 1
42 0 2 0 0.96 1 0.04
43 1 1 1 1
44 1 2 0 0.335714285714286 1 0.664285714285714
45 1 1 1 1
46 1 2 0 0.264285714285714 1 0.735714285714286
47 1 1 1 1
48 0 2 0 0.96 1 0.04
49 1 1 1 1
50 0 2 0 0.96 1 0.04
51 1 1 1 1
52 1 2 0 0.335714285714286 1 0.664285714285714
53 1 1 1 1
54 1 2 0 0.264285714285714 1 0.735714285714286
55 1 1 1 1
56 0 2 0 0.96 1 0.04
57 1 1 1 1
58 0 2 0 0.96 1 0.04
59 1 1 1 1
60 1 2 0 0.264285714285714 1 0.735714285714286
61 1 1 1 1
62 1 2 0 0.192857142857143 1 0.807142857142857
63 1 1 1 1
64 0 2 0 0.96 1 0.04
65 1 1 1 1
66 0 2 0 0.96 1 0.04
67 1 1 1 1
68 1 2 0 0.407142857142857 1 0.592857142857143
69 1 1 1 1
70 1 2 0 0.335714285714286 1 0.664285714285714
71 1 1 1 1
72 0 2 0 0.96 1 0.04
73 1 1 1 1
74 0 2 0 0.96 1 0.04
75 1 1 1 1
76 1 2 0 0.335714285714286 1 0.664285714285714
77 1 1 1 1
78 1 2 0 0.264285714285714 1 0.735714285714286
79 1 1 1 1
80 0 2 0 0.96 1 0.04
81 1 1 1 1
82 0 2 0 0.96 1 0.04
83 1 1 1 1
84 1 2 0 0.335714285714286 1 0.664285714285714
85 1 1 1 1
86 1 2 0 0.264285714285714 1 0.735714285714286
87 1 1 1 1
88 0 2 0 0.96 1 0.04
89 1 1 1 1
90 0 2 0 0.96 1 0.04
91 1 1 1 1
92 1 2 0 0.264285714285714 1 0.735714285714286
93 1 1 1 1
94 1 2 0 0.192857142857143 1 0.807142857142857
95 1 1 1 1
96 0 2 0 0.96 1 0.04
97 1 1 1 1
98 0 2 0 0.96 1 0.04
99 1 1 1 1
100 1 2 0 0.335714285714286 1 0.664285714285714
101 1 1 1 1
102 1 2 0 0.264285714285714 1 0.735714285714286
103 1 1 1 1
104 0 2 0 0.96 1 0.04
105 1 1 1 1
106 0 2 0 0.96 1 0.04
107 1 1 1 1
108 1 2 0 0.264285714285714 1 0.735714285714286
109 1 1 1 1
110 1 2 0 0.192857142857143 1 0.807142857142857
111 1 1 1 1
112 0 2 0 0.96 1 0.04
113 1 1 1 1
114 0 2 0 0.96 1 0.04
115 1 1 1 1
116 1 2 0 0.264285714285714 1 0.735714285714286
117 1 1 1 1
118 1 2 0 0.192857142857143 1 0.807142857142857
119 1 1 1 1
120 0 2 0 0.96 1 0.04
121 1 1 1 1
122 0 2 0 0.96 1 0.04
123 1 1 1 1
124 1 2 0 0.192857142857143 1 0.807142857142857
125 1 1 1 1
126 1 2 0 0.121428571428571 1 0.878571428571429
127 1 1 1 1
128 0 2 0 0.96 1 0.04
129 1 1 1 1
130 0 2 0 0.96 1 0.04
131 1 1 1 1
132 1 2 0 0.407142857142857 1 0.592857142857143
133 1 1 1 1
134 1 2 0 0.335714285714286 1 0.664285714285714
135 1 1 1 1
136 0 2 0 0.96 1 0.04
137 1 1 1 1
138 0 2 0 0.96 1 0.04
139 1 1 1 1
140 1 2 0 0.335714285714286 1 0.664285714285714
141 1 1 1 1
142 1 2 0 0.264285714285714 1 0.735714285714286
143 1 1 1 1
144 0 2 0 0.96 1 0.04
145 1 1 1 1
146 0 2 0 0.96 1 0.04
147 1 1 1 1
148 1 2 0 0.335714285714286 1 0.664285714285714
149 1 1 1 1
150 1 2 0 0.264285714285714 1 0.735714285714286
151 1 1 1 1
152 0 2 0 0.96 1 0.04
153 1 1 1 1
154 0 2 0 0.96 1 0.04
155 1 1 1 1
156 1 2 0 0.264285714285714 1 0.735714285714286
157 1 1 1 1
158 1 2 0 0.192857142857143 1 0.807142857142857
159 1 1 1 1
160 0 2 0 0.96 1 0.04
161 1 1 1 1
162 0 2 0 0.96 1 0.04
163 1 1 1 1
164 1 2 0 0.335714285714286 1 0.664285714285714
165 1 1 1 1
166 1 2 0 0.264285714285714 1 0.735714285714286
167 1 1 1 1
168 0 2 0 0.96 1 0.04
169 1 1 1 1
170 0 2 0 0.96 1 0.04
171 1 1 1 1
172 1 2 0 0.264285714285714 1 0.735714285714286
173 1 1 1 1
174 1 2 0 0.192857142857143 1 0.807142857142857
175 1 1 1 1
176 0 2 0 0.96 1 0.04
177 1 1 1 1
178 0 2 0 0.96 1 0.04
179 1 1 1 1
180 1 2 0 0.264285714285714 1 0.735714285714286
181 1 1 1 1
182 1 2 0 0.192857142857143 1 0.807142857142857
183 1 1 1 1
184 0 2 0 0.96 1 0.04
185 1 1 1 1
186 0 2 0 0.96 1 0.04
187 1 1 1 1
188 1 2 0 0.192857142857143 1 0.807142857142857
189 1 1 1 1
190 1 2 0 0.121428571428571 1 0.878571428571429
191 1 1 1 1
192 0 2 0 0.96 1 0.04
193 1 1 1 1
194 0 2 0 0.96 1 0.04
195 1 1 1 1
196 1 2 0 0.335714285714286 1 0.664285714285714
197 1 1 1 1
198 1 2 0 0.264285714285714 1 0.735714285714286
199 1 1 1 1
200 0 2 0 0.96 1 0.04
201 1 1 1 1
202 0 2 0 0.96 1 0.04
203 1 1 1 1
204 1 2 0 0.264285714285714 1 0.735714285714286
205 1 1 1 1
206 1 2 0 0.192857142857143 1 0.807142857142857
207 1 1 1 1
208 0 2 0 0.96 1 0.04
209 1 1 1 1
210 0 2 0 0.96 1 0.04
211 1 1 1 1
212 1 2 0 0.264285714285714 1 0.735714285714286
213 1 1 1 1
214 1 2 0 0.192857142857143 1 0.807142857142857
215 1 1 1 1
216 0 2 0 0.96 1 0.04
217 1 1 1 1
218 0 2 0 0.96 1 0.04
219 1 1 1 1
220 1 2 0 0.192857142857143 1 0.807142857142857
221 1 1 1 1
222 1 2 0 0.121428571428571 1 0.878571428571429
223 1 1 1 1
224 0 2 0 0.96 1 0.04
225 1 1 1 1
226 0 2 0 0.96 1 0.04
227 1 1 1 1
228 1 2 0 0.264285714285714 1 0.735714285714286
229 1 1 1 1
230 1 2 0 0.192857142857143 1 0.807142857142857
231 1 1 1 1
232 0 2 0 0.96 1 0.04
233 1 1 1 1
234 0 2 0 0.96 1 0.04
235 1 1 1 1
236 1 2 0 0.192857142857143 1 0.807142857142857
237 1 1 1 1
238 1 2 0 0.121428571428571 1 0.878571428571429
239 1 1 1 1
240 0 2 0 0.96 1 0.04
241 1 1 1 1
242 0 2 0 0.96 1 0.04
243 1 1 1 1
244 1 2 0 0.192857142857143 1 0.807142857142857
245 1 1 1 1
246 1 2 0 0.121428571428571 1 0.878571428571429
247 1 1 1 1
248 0 2 0 0.96 1 0.04
249 1 1 1 1
250 0 2 0 0.96 1 0.04
251 1 1 1 1
252 1 2 0 0.121428571428571 1 0.878571428571429
253 1 1 1 1
254 1 2 0 0.05 1 0.95
255 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
8
## name
running(c17)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(8) : $c(1)) ($s(8) : Bernoulli(+(/(*(+($s(13) $s(14) $s(15) $s(3) $s(12) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(8) : $c(1)) ($s(8) : <=($c(0.5) +(/(*(+($s(13) $s(14) $s(15) $s(3) $s(12) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
8
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 1 2 0 0.466666666666667 1 0.533333333333333
5 1 1 1 1
6 1 2 0 0.383333333333333 1 0.616666666666667
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 0 2 0 0.96 1 0.04
11 1 1 1 1
12 1 2 0 0.383333333333333 1 0.616666666666667
13 1 1 1 1
14 1 2 0 0.3 1 0.7
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 0 2 0 0.96 1 0.04
19 1 1 1 1
20 1 2 0 0.383333333333333 1 0.616666666666667
21 1 1 1 1
22 1 2 0 0.3 1 0.7
23 1 1 1 1
24 0 2 0 0.96 1 0.04
25 1 1 1 1
26 0 2 0 0.96 1 0.04
27 1 1 1 1
28 1 2 0 0.3 1 0.7
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.96 1 0.04
33 1 1 1 1
34 0 2 0 0.96 1 0.04
35 1 1 1 1
36 1 2 0 0.383333333333333 1 0.616666666666667
37 1 1 1 1
38 1 2 0 0.3 1 0.7
39 1 1 1 1
40 0 2 0 0.96 1 0.04
41 1 1 1 1
42 0 2 0 0.96 1 0.04
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 0 2 0 0.96 1 0.04
49 1 1 1 1
50 0 2 0 0.96 1 0.04
51 1 1 1 1
52 1 2 0 0.3 1 0.7
53 1 1 1 1
54 1 2 0 0.216666666666667 1 0.783333333333333
55 1 1 1 1
56 0 2 0 0.96 1 0.04
57 1 1 1 1
58 0 2 0 0.96 1 0.04
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.96 1 0.04
65 1 1 1 1
66 0 2 0 0.96 1 0.04
67 1 1 1 1
68 1 2 0 0.383333333333333 1 0.616666666666667
69 1 1 1 1
70 1 2 0 0.3 1 0.7
71 1 1 1 1
72 0 2 0 0.96 1 0.04
73 1 1 1 1
74 0 2 0 0.96 1 0.04
75 1 1 1 1
76 1 2 0 0.3 1 0.7
77 1 1 1 1
78 1 2 0 0.216666666666667 1 0.783333333333333
79 1 1 1 1
80 0 2 0 0.96 1 0.04
81 1 1 1 1
82 0 2 0 0.96 1 0.04
83 1 1 1 1
84 1 2 0 0.3 1 0.7
85 1 1 1 1
86 1 2 0 0.216666666666667 1 0.783333333333333
87 1 1 1 1
88 0 2 0 0.96 1 0.04
89 1 1 1 1
90 0 2 0 0.96 1 0.04
91 1 1 1 1
92 1 2 0 0.216666666666667 1 0.783333333333333
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.96 1 0.04
97 1 1 1 1
98 0 2 0 0.96 1 0.04
99 1 1 1 1
100 1 2 0 0.3 1 0.7
101 1 1 1 1
102 1 2 0 0.216666666666667 1 0.783333333333333
103 1 1 1 1
104 0 2 0 0.96 1 0.04
105 1 1 1 1
106 0 2 0 0.96 1 0.04
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 0 2 0 0.96 1 0.04
113 1 1 1 1
114 0 2 0 0.96 1 0.04
115 1 1 1 1
116 1 2 0 0.216666666666667 1 0.783333333333333
117 1 1 1 1
118 1 2 0 0.133333333333333 1 0.866666666666667
119 1 1 1 1
120 0 2 0 0.96 1 0.04
121 1 1 1 1
122 0 2 0 0.96 1 0.04
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 1
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
9
## name
running(c18)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(9) : $c(1)) ($s(9) : Bernoulli(+(/(*(+($s(11) $s(18) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(9) : $c(1)) ($s(9) : <=($c(0.5) +(/(*(+($s(11) $s(18) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
9
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 1 2 0 0.383333333333333 1 0.616666666666667
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 0 2 0 0.96 1 0.04
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 1
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
10
## name
running(c19)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(10) : $c(1)) ($s(10) : Bernoulli(+(/(*(+($s(12) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(10) : $c(1)) ($s(10) : <=($c(0.5) +(/(*(+($s(12) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
10
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
11
## name
running(c2)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(11) : $c(1)) ($s(11) : Bernoulli(+(/(*(+($s(14) $s(2) $s(10) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(11) : $c(1)) ($s(11) : <=($c(0.5) +(/(*(+($s(14) $s(2) $s(10) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
11
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 0 2 0 0.96 1 0.04
7 1 1 1 1
8 1 2 0 0.425 1 0.575
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 1 2 0 0.3 1 0.7
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 0 2 0 0.96 1 0.04
19 1 1 1 1
20 0 2 0 0.96 1 0.04
21 1 1 1 1
22 0 2 0 0.96 1 0.04
23 1 1 1 1
24 1 2 0 0.3 1 0.7
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
12
## name
running(c20)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(12) : $c(1)) ($s(12) : Bernoulli(+(/(*(+($s(8) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(12) : $c(1)) ($s(12) : <=($c(0.5) +(/(*(+($s(8) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
12
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
13
## name
running(c3)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(13) : $c(1)) ($s(13) : Bernoulli(+(/(*(+($s(15) $s(18) $s(19) $s(7) $s(9) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(13) : $c(1)) ($s(13) : <=($c(0.5) +(/(*(+($s(15) $s(18) $s(19) $s(7) $s(9) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
13
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 0 2 0 0.96 1 0.04
7 1 1 1 1
8 1 2 0 0.466666666666667 1 0.533333333333333
9 1 1 1 1
10 1 2 0 0.383333333333333 1 0.616666666666667
11 1 1 1 1
12 1 2 0 0.383333333333333 1 0.616666666666667
13 1 1 1 1
14 1 2 0 0.3 1 0.7
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 0 2 0 0.96 1 0.04
19 1 1 1 1
20 0 2 0 0.96 1 0.04
21 1 1 1 1
22 0 2 0 0.96 1 0.04
23 1 1 1 1
24 1 2 0 0.383333333333333 1 0.616666666666667
25 1 1 1 1
26 1 2 0 0.3 1 0.7
27 1 1 1 1
28 1 2 0 0.3 1 0.7
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.96 1 0.04
33 1 1 1 1
34 0 2 0 0.96 1 0.04
35 1 1 1 1
36 0 2 0 0.96 1 0.04
37 1 1 1 1
38 0 2 0 0.96 1 0.04
39 1 1 1 1
40 1 2 0 0.383333333333333 1 0.616666666666667
41 1 1 1 1
42 1 2 0 0.3 1 0.7
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 0 2 0 0.96 1 0.04
49 1 1 1 1
50 0 2 0 0.96 1 0.04
51 1 1 1 1
52 0 2 0 0.96 1 0.04
53 1 1 1 1
54 0 2 0 0.96 1 0.04
55 1 1 1 1
56 1 2 0 0.3 1 0.7
57 1 1 1 1
58 1 2 0 0.216666666666667 1 0.783333333333333
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.96 1 0.04
65 1 1 1 1
66 0 2 0 0.96 1 0.04
67 1 1 1 1
68 0 2 0 0.96 1 0.04
69 1 1 1 1
70 0 2 0 0.96 1 0.04
71 1 1 1 1
72 1 2 0 0.383333333333333 1 0.616666666666667
73 1 1 1 1
74 1 2 0 0.3 1 0.7
75 1 1 1 1
76 1 2 0 0.3 1 0.7
77 1 1 1 1
78 1 2 0 0.216666666666667 1 0.783333333333333
79 1 1 1 1
80 0 2 0 0.96 1 0.04
81 1 1 1 1
82 0 2 0 0.96 1 0.04
83 1 1 1 1
84 0 2 0 0.96 1 0.04
85 1 1 1 1
86 0 2 0 0.96 1 0.04
87 1 1 1 1
88 1 2 0 0.3 1 0.7
89 1 1 1 1
90 1 2 0 0.216666666666667 1 0.783333333333333
91 1 1 1 1
92 1 2 0 0.216666666666667 1 0.783333333333333
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.96 1 0.04
97 1 1 1 1
98 0 2 0 0.96 1 0.04
99 1 1 1 1
100 0 2 0 0.96 1 0.04
101 1 1 1 1
102 0 2 0 0.96 1 0.04
103 1 1 1 1
104 1 2 0 0.3 1 0.7
105 1 1 1 1
106 1 2 0 0.216666666666667 1 0.783333333333333
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 0 2 0 0.96 1 0.04
113 1 1 1 1
114 0 2 0 0.96 1 0.04
115 1 1 1 1
116 0 2 0 0.96 1 0.04
117 1 1 1 1
118 0 2 0 0.96 1 0.04
119 1 1 1 1
120 1 2 0 0.216666666666667 1 0.783333333333333
121 1 1 1 1
122 1 2 0 0.133333333333333 1 0.866666666666667
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
14
## name
running(c4)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(14) : $c(1)) ($s(14) : Bernoulli(+(/(*(+($s(9) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(14) : $c(1)) ($s(14) : <=($c(0.5) +(/(*(+($s(9) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
14
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
15
## name
running(c5)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(15) : $c(1)) ($s(15) : Bernoulli(+(/(*(+($s(16) $s(5) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(15) : $c(1)) ($s(15) : <=($c(0.5) +(/(*(+($s(16) $s(5) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
15
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 1 2 0 0.383333333333333 1 0.616666666666667
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 0 2 0 0.96 1 0.04
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
16
## name
running(c6)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(16) : $c(1)) ($s(16) : Bernoulli(+(/(*(+($s(11) $s(2) $s(3) $s(4) $s(5) $s(8) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(16) : $c(1)) ($s(16) : <=($c(0.5) +(/(*(+($s(11) $s(2) $s(3) $s(4) $s(5) $s(8) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
16
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 0 2 0 0.96 1 0.04
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 0 2 0 0.96 1 0.04
11 1 1 1 1
12 0 2 0 0.96 1 0.04
13 1 1 1 1
14 0 2 0 0.96 1 0.04
15 1 1 1 1
16 0 2 0 0.96 1 0.04
17 1 1 1 1
18 0 2 0 0.96 1 0.04
19 1 1 1 1
20 0 2 0 0.96 1 0.04
21 1 1 1 1
22 0 2 0 0.96 1 0.04
23 1 1 1 1
24 0 2 0 0.96 1 0.04
25 1 1 1 1
26 0 2 0 0.96 1 0.04
27 1 1 1 1
28 0 2 0 0.96 1 0.04
29 1 1 1 1
30 0 2 0 0.96 1 0.04
31 1 1 1 1
32 0 2 0 0.96 1 0.04
33 1 1 1 1
34 0 2 0 0.96 1 0.04
35 1 1 1 1
36 0 2 0 0.96 1 0.04
37 1 1 1 1
38 0 2 0 0.96 1 0.04
39 1 1 1 1
40 0 2 0 0.96 1 0.04
41 1 1 1 1
42 0 2 0 0.96 1 0.04
43 1 1 1 1
44 0 2 0 0.96 1 0.04
45 1 1 1 1
46 0 2 0 0.96 1 0.04
47 1 1 1 1
48 0 2 0 0.96 1 0.04
49 1 1 1 1
50 0 2 0 0.96 1 0.04
51 1 1 1 1
52 0 2 0 0.96 1 0.04
53 1 1 1 1
54 0 2 0 0.96 1 0.04
55 1 1 1 1
56 0 2 0 0.96 1 0.04
57 1 1 1 1
58 0 2 0 0.96 1 0.04
59 1 1 1 1
60 0 2 0 0.96 1 0.04
61 1 1 1 1
62 0 2 0 0.96 1 0.04
63 1 1 1 1
64 0 2 0 0.96 1 0.04
65 1 1 1 1
66 0 2 0 0.96 1 0.04
67 1 1 1 1
68 0 2 0 0.96 1 0.04
69 1 1 1 1
70 0 2 0 0.96 1 0.04
71 1 1 1 1
72 0 2 0 0.96 1 0.04
73 1 1 1 1
74 0 2 0 0.96 1 0.04
75 1 1 1 1
76 0 2 0 0.96 1 0.04
77 1 1 1 1
78 0 2 0 0.96 1 0.04
79 1 1 1 1
80 0 2 0 0.96 1 0.04
81 1 1 1 1
82 0 2 0 0.96 1 0.04
83 1 1 1 1
84 0 2 0 0.96 1 0.04
85 1 1 1 1
86 0 2 0 0.96 1 0.04
87 1 1 1 1
88 0 2 0 0.96 1 0.04
89 1 1 1 1
90 0 2 0 0.96 1 0.04
91 1 1 1 1
92 0 2 0 0.96 1 0.04
93 1 1 1 1
94 0 2 0 0.96 1 0.04
95 1 1 1 1
96 0 2 0 0.96 1 0.04
97 1 1 1 1
98 0 2 0 0.96 1 0.04
99 1 1 1 1
100 0 2 0 0.96 1 0.04
101 1 1 1 1
102 0 2 0 0.96 1 0.04
103 1 1 1 1
104 0 2 0 0.96 1 0.04
105 1 1 1 1
106 0 2 0 0.96 1 0.04
107 1 1 1 1
108 0 2 0 0.96 1 0.04
109 1 1 1 1
110 0 2 0 0.96 1 0.04
111 1 1 1 1
112 0 2 0 0.96 1 0.04
113 1 1 1 1
114 0 2 0 0.96 1 0.04
115 1 1 1 1
116 0 2 0 0.96 1 0.04
117 1 1 1 1
118 0 2 0 0.96 1 0.04
119 1 1 1 1
120 0 2 0 0.96 1 0.04
121 1 1 1 1
122 0 2 0 0.96 1 0.04
123 1 1 1 1
124 0 2 0 0.96 1 0.04
125 1 1 1 1
126 0 2 0 0.96 1 0.04
127 1 1 1 1
128 1 2 0 0.478571428571429 1 0.521428571428571
129 1 1 1 1
130 1 2 0 0.407142857142857 1 0.592857142857143
131 1 1 1 1
132 1 2 0 0.407142857142857 1 0.592857142857143
133 1 1 1 1
134 1 2 0 0.335714285714286 1 0.664285714285714
135 1 1 1 1
136 1 2 0 0.407142857142857 1 0.592857142857143
137 1 1 1 1
138 1 2 0 0.335714285714286 1 0.664285714285714
139 1 1 1 1
140 1 2 0 0.335714285714286 1 0.664285714285714
141 1 1 1 1
142 1 2 0 0.264285714285714 1 0.735714285714286
143 1 1 1 1
144 1 2 0 0.407142857142857 1 0.592857142857143
145 1 1 1 1
146 1 2 0 0.335714285714286 1 0.664285714285714
147 1 1 1 1
148 1 2 0 0.335714285714286 1 0.664285714285714
149 1 1 1 1
150 1 2 0 0.264285714285714 1 0.735714285714286
151 1 1 1 1
152 1 2 0 0.335714285714286 1 0.664285714285714
153 1 1 1 1
154 1 2 0 0.264285714285714 1 0.735714285714286
155 1 1 1 1
156 1 2 0 0.264285714285714 1 0.735714285714286
157 1 1 1 1
158 1 2 0 0.192857142857143 1 0.807142857142857
159 1 1 1 1
160 1 2 0 0.407142857142857 1 0.592857142857143
161 1 1 1 1
162 1 2 0 0.335714285714286 1 0.664285714285714
163 1 1 1 1
164 1 2 0 0.335714285714286 1 0.664285714285714
165 1 1 1 1
166 1 2 0 0.264285714285714 1 0.735714285714286
167 1 1 1 1
168 1 2 0 0.335714285714286 1 0.664285714285714
169 1 1 1 1
170 1 2 0 0.264285714285714 1 0.735714285714286
171 1 1 1 1
172 1 2 0 0.264285714285714 1 0.735714285714286
173 1 1 1 1
174 1 2 0 0.192857142857143 1 0.807142857142857
175 1 1 1 1
176 1 2 0 0.335714285714286 1 0.664285714285714
177 1 1 1 1
178 1 2 0 0.264285714285714 1 0.735714285714286
179 1 1 1 1
180 1 2 0 0.264285714285714 1 0.735714285714286
181 1 1 1 1
182 1 2 0 0.192857142857143 1 0.807142857142857
183 1 1 1 1
184 1 2 0 0.264285714285714 1 0.735714285714286
185 1 1 1 1
186 1 2 0 0.192857142857143 1 0.807142857142857
187 1 1 1 1
188 1 2 0 0.192857142857143 1 0.807142857142857
189 1 1 1 1
190 1 2 0 0.121428571428571 1 0.878571428571429
191 1 1 1 1
192 1 2 0 0.407142857142857 1 0.592857142857143
193 1 1 1 1
194 1 2 0 0.335714285714286 1 0.664285714285714
195 1 1 1 1
196 1 2 0 0.335714285714286 1 0.664285714285714
197 1 1 1 1
198 1 2 0 0.264285714285714 1 0.735714285714286
199 1 1 1 1
200 1 2 0 0.335714285714286 1 0.664285714285714
201 1 1 1 1
202 1 2 0 0.264285714285714 1 0.735714285714286
203 1 1 1 1
204 1 2 0 0.264285714285714 1 0.735714285714286
205 1 1 1 1
206 1 2 0 0.192857142857143 1 0.807142857142857
207 1 1 1 1
208 1 2 0 0.335714285714286 1 0.664285714285714
209 1 1 1 1
210 1 2 0 0.264285714285714 1 0.735714285714286
211 1 1 1 1
212 1 2 0 0.264285714285714 1 0.735714285714286
213 1 1 1 1
214 1 2 0 0.192857142857143 1 0.807142857142857
215 1 1 1 1
216 1 2 0 0.264285714285714 1 0.735714285714286
217 1 1 1 1
218 1 2 0 0.192857142857143 1 0.807142857142857
219 1 1 1 1
220 1 2 0 0.192857142857143 1 0.807142857142857
221 1 1 1 1
222 1 2 0 0.121428571428571 1 0.878571428571429
223 1 1 1 1
224 1 2 0 0.335714285714286 1 0.664285714285714
225 1 1 1 1
226 1 2 0 0.264285714285714 1 0.735714285714286
227 1 1 1 1
228 1 2 0 0.264285714285714 1 0.735714285714286
229 1 1 1 1
230 1 2 0 0.192857142857143 1 0.807142857142857
231 1 1 1 1
232 1 2 0 0.264285714285714 1 0.735714285714286
233 1 1 1 1
234 1 2 0 0.192857142857143 1 0.807142857142857
235 1 1 1 1
236 1 2 0 0.192857142857143 1 0.807142857142857
237 1 1 1 1
238 1 2 0 0.121428571428571 1 0.878571428571429
239 1 1 1 1
240 1 2 0 0.264285714285714 1 0.735714285714286
241 1 1 1 1
242 1 2 0 0.192857142857143 1 0.807142857142857
243 1 1 1 1
244 1 2 0 0.192857142857143 1 0.807142857142857
245 1 1 1 1
246 1 2 0 0.121428571428571 1 0.878571428571429
247 1 1 1 1
248 1 2 0 0.192857142857143 1 0.807142857142857
249 1 1 1 1
250 1 2 0 0.121428571428571 1 0.878571428571429
251 1 1 1 1
252 1 2 0 0.121428571428571 1 0.878571428571429
253 1 1 1 1
254 1 2 0 0.05 1 0.95
255 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
17
## name
running(c7)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(17) : $c(1)) ($s(17) : Bernoulli(+(/(*(+($s(2) $s(10) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(17) : $c(1)) ($s(17) : <=($c(0.5) +(/(*(+($s(2) $s(10) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
17
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 0 2 0 0.96 1 0.04
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
18
## name
running(c8)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(18) : $c(1)) ($s(18) : Bernoulli(+(/(*(+($s(0) $s(19) $s(1) $s(6) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(18) : $c(1)) ($s(18) : <=($c(0.5) +(/(*(+($s(0) $s(19) $s(1) $s(6) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
18
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 0 2 0 0.96 1 0.04
5 1 1 1 1
6 0 2 0 0.96 1 0.04
7 1 1 1 1
8 0 2 0 0.96 1 0.04
9 1 1 1 1
10 0 2 0 0.96 1 0.04
11 1 1 1 1
12 0 2 0 0.96 1 0.04
13 1 1 1 1
14 0 2 0 0.96 1 0.04
15 1 1 1 1
16 1 2 0 0.45 1 0.55
17 1 1 1 1
18 1 2 0 0.35 1 0.65
19 1 1 1 1
20 1 2 0 0.35 1 0.65
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 1 2 0 0.35 1 0.65
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.96 1 0.04
33 1 1 1 1
34 0 2 0 0.96 1 0.04
35 1 1 1 1
36 0 2 0 0.96 1 0.04
37 1 1 1 1
38 0 2 0 0.96 1 0.04
39 1 1 1 1
40 0 2 0 0.96 1 0.04
41 1 1 1 1
42 0 2 0 0.96 1 0.04
43 1 1 1 1
44 0 2 0 0.96 1 0.04
45 1 1 1 1
46 0 2 0 0.96 1 0.04
47 1 1 1 1
48 1 2 0 0.35 1 0.65
49 1 1 1 1
50 1 2 0 0.25 1 0.75
51 1 1 1 1
52 1 2 0 0.25 1 0.75
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 1 2 0 0.25 1 0.75
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0

## index
19
## name
running(c9)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(19) : $c(1)) ($s(19) : Bernoulli(+(/(*(+($s(3) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.04))) )
## determinized formula
switch( ($a(19) : $c(1)) ($s(19) : <=($c(0.5) +(/(*(+($s(3) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
19
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.96 1 0.04
1 1 1 1 1
2 0 2 0 0.96 1 0.04
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0



#####REWARD#####
## formula
+(-($s(0) *($a(0) $c(0.75))) -($s(11) *($a(11) $c(0.75))) -($s(13) *($a(13) $c(0.75))) -($s(14) *($a(14) $c(0.75))) -($s(15) *($a(15) $c(0.75))) -($s(16) *($a(16) $c(0.75))) -($s(17) *($a(17) $c(0.75))) -($s(18) *($a(18) $c(0.75))) -($s(19) *($a(19) $c(0.75))) -($s(1) *($a(1) $c(0.75))) -($s(2) *($a(2) $c(0.75))) -($s(3) *($a(3) $c(0.75))) -($s(4) *($a(4) $c(0.75))) -($s(5) *($a(5) $c(0.75))) -($s(6) *($a(6) $c(0.75))) -($s(7) *($a(7) $c(0.75))) -($s(8) *($a(8) $c(0.75))) -($s(9) *($a(9) $c(0.75))) -($s(10) *($a(10) $c(0.75))) -($s(12) *($a(12) $c(0.75))))
## min
-0.75
## max
20
## independent from actions
0
## hash index
20
## caching type
MAP
## kleene caching type
MAP
## action hash keys
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
11 11
12 12
13 13
14 14
15 15
16 16
17 17
18 18
19 19
20 20


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
4
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
## relevant preconditions
0


## index
5
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
6
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
## relevant preconditions
0


## index
7
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
## relevant preconditions
0


## index
8
## state
0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
9
## state
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
10
## state
0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
11
## state
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
12
## state
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
13
## state
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
14
## state
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
15
## state
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
16
## state
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
17
## state
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
18
## state
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
19
## state
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
20
## state
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####

#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
5
0 2
2 2
7 2
18 2
20 21
## kleene state fluent hash keys (first line is the number of keys)
5
0 2
2 2
7 2
18 2
20 21

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
5
1 2
2 4
4 2
18 4
20 42
## kleene state fluent hash keys (first line is the number of keys)
5
1 2
2 6
4 2
18 6
20 63

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
5
2 8
11 2
16 2
17 2
20 84
## kleene state fluent hash keys (first line is the number of keys)
5
2 18
11 2
16 2
17 2
20 189

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
5
3 2
8 2
16 4
19 2
20 168
## kleene state fluent hash keys (first line is the number of keys)
5
3 2
8 2
16 6
19 2
20 567

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
5
0 4
2 16
4 4
16 8
20 336
## kleene state fluent hash keys (first line is the number of keys)
5
0 6
2 54
4 6
16 18
20 1701

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
5
1 4
5 2
15 2
16 16
20 672
## kleene state fluent hash keys (first line is the number of keys)
5
1 6
5 2
15 2
16 54
20 5103

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
5
0 8
3 4
6 2
18 8
20 1344
## kleene state fluent hash keys (first line is the number of keys)
5
0 18
3 6
6 2
18 18
20 15309

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
5
2 32
4 8
7 4
13 2
20 2688
## kleene state fluent hash keys (first line is the number of keys)
5
2 162
4 18
7 6
13 2
20 45927

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
5
2 64
8 4
12 2
16 32
20 5376
## kleene state fluent hash keys (first line is the number of keys)
5
2 486
8 6
12 2
16 162
20 137781

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
5
7 8
9 2
13 4
14 2
20 10752
## kleene state fluent hash keys (first line is the number of keys)
5
7 18
9 2
13 6
14 2
20 413343

## index
10
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
5
3 8
10 2
11 4
17 4
20 21504
## kleene state fluent hash keys (first line is the number of keys)
5
3 18
10 2
11 6
17 6
20 1240029

## index
11
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
5
7 16
9 4
11 8
16 64
20 43008
## kleene state fluent hash keys (first line is the number of keys)
5
7 54
9 6
11 18
16 486
20 3720087

## index
12
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
531441
## state fluent hash keys (first line is the number of keys)
5
7 32
8 8
10 4
12 4
20 86016
## kleene state fluent hash keys (first line is the number of keys)
5
7 162
8 18
10 6
12 6
20 11160261

## index
13
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
1594323
## state fluent hash keys (first line is the number of keys)
3
8 16
13 8
20 172032
## kleene state fluent hash keys (first line is the number of keys)
3
8 54
13 18
20 33480783

## index
14
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
4782969
## state fluent hash keys (first line is the number of keys)
4
8 32
11 16
14 4
20 344064
## kleene state fluent hash keys (first line is the number of keys)
4
8 162
11 54
14 6
20 100442349

## index
15
## state hash key (for each value in the domain)
0 32768
## kleene state hash key base
14348907
## state fluent hash keys (first line is the number of keys)
5
3 16
8 64
13 16
15 4
20 688128
## kleene state fluent hash keys (first line is the number of keys)
5
3 54
8 486
13 54
15 6
20 301327047

## index
16
## state hash key (for each value in the domain)
0 65536
## kleene state hash key base
43046721
## state fluent hash keys (first line is the number of keys)
5
2 128
7 64
15 8
16 128
20 1376256
## kleene state fluent hash keys (first line is the number of keys)
5
2 1458
7 486
15 18
16 1458
20 903981141

## index
17
## state hash key (for each value in the domain)
0 131072
## kleene state hash key base
129140163
## state fluent hash keys (first line is the number of keys)
5
3 32
4 16
7 128
17 8
20 2752512
## kleene state fluent hash keys (first line is the number of keys)
5
3 162
4 54
7 1458
17 18
20 2711943423

## index
18
## state hash key (for each value in the domain)
0 262144
## kleene state hash key base
387420489
## state fluent hash keys (first line is the number of keys)
5
0 16
9 8
13 32
18 16
20 5505024
## kleene state fluent hash keys (first line is the number of keys)
5
0 54
9 18
13 162
18 54
20 8135830269

## index
19
## state hash key (for each value in the domain)
0 524288
## kleene state hash key base
1162261467
## state fluent hash keys (first line is the number of keys)
5
2 256
13 64
18 32
19 4
20 11010048
## kleene state fluent hash keys (first line is the number of keys)
5
2 4374
13 486
18 162
19 6
20 24407490807



#####TRAINING SET#####
200
1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 
1 0 1 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 1 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 
1 0 0 0 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 
0 1 1 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 
1 1 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 0 0 0 
0 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 0 
1 1 0 0 1 1 0 1 0 0 1 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 1 0 1 1 0 1 0 0 1 0 0 0 0 0 
0 0 0 0 0 1 1 0 0 0 1 1 0 0 1 0 0 0 0 0 
0 1 0 0 0 1 1 0 0 0 1 1 0 0 1 0 0 0 0 0 
0 1 1 1 0 1 0 0 0 1 1 1 0 0 1 0 0 0 0 0 
1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 0 0 0 0 
0 0 1 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 
1 0 0 1 1 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0 
0 1 0 0 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 0 
1 1 0 0 0 1 1 0 1 0 0 1 0 1 1 0 0 0 0 0 
0 0 0 1 0 1 1 0 0 1 0 0 0 0 0 1 0 0 0 0 
0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 
1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 
1 0 0 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 0 0 
0 0 0 0 0 0 1 1 1 0 0 1 1 0 0 1 0 0 0 0 
0 1 0 0 0 1 1 1 0 0 1 1 1 0 0 1 0 0 0 0 
1 1 0 0 1 0 1 1 1 0 0 0 0 1 0 1 0 0 0 0 
0 0 0 0 1 1 1 0 1 0 0 0 0 0 1 1 0 0 0 0 
0 1 1 0 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 0 
0 0 1 0 1 0 1 1 0 1 0 1 1 1 1 1 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 
0 0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 
0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 
1 1 1 0 0 1 1 1 0 0 0 1 0 0 0 0 1 0 0 0 
0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 
0 1 0 1 1 1 0 0 1 0 1 0 1 0 0 0 1 0 0 0 
0 1 0 1 0 1 0 1 1 0 1 0 1 0 0 0 1 0 0 0 
0 1 0 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 0 
1 1 1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 
0 1 0 1 0 1 1 0 1 0 0 0 1 0 1 0 1 0 0 0 
0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 
0 1 0 0 0 1 1 0 1 0 0 0 1 0 0 1 1 0 0 0 
0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 
0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 0 1 0 0 
0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 
0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0 0 1 0 0 
0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 0 0 1 0 0 
0 0 1 0 0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 
1 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 
1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0 0 
1 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 
0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 1 0 0 
1 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 1 0 0 
1 1 1 0 1 1 0 1 0 0 0 1 1 1 0 0 1 1 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 
0 0 1 1 0 1 1 0 1 0 0 1 1 1 0 1 1 1 0 0 
1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 
1 0 1 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 
0 1 0 1 0 1 0 0 0 1 0 1 0 0 1 1 1 1 0 0 
0 1 0 1 0 1 1 1 0 1 0 1 0 0 1 1 1 1 0 0 
0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 
1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 1 0 
1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 1 0 
0 1 1 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 
0 0 1 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 
0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 
1 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 0 
0 1 0 0 0 1 0 1 0 1 1 0 0 1 0 0 0 0 1 0 
0 0 0 0 0 1 1 0 1 0 0 0 1 1 0 0 0 0 1 0 
0 1 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 
0 0 0 1 0 1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 
0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 
1 1 0 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 1 0 
1 0 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 0 1 0 
1 0 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 1 0 
1 0 0 0 0 1 1 1 1 1 0 0 1 0 1 0 0 0 1 0 
0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 
1 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 0 1 0 
0 0 0 1 1 1 1 0 0 0 0 0 1 0 0 1 0 0 1 0 
0 1 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 
1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 1 0 0 1 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 
0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 
1 0 0 1 0 1 1 1 0 0 0 0 1 0 0 0 1 0 1 0 
1 1 1 0 1 1 1 0 0 0 0 1 0 1 0 0 1 0 1 0 
1 0 1 0 0 1 1 1 0 1 0 1 0 1 0 0 1 0 1 0 
1 0 1 0 1 1 1 1 0 1 1 1 0 1 0 0 1 0 1 0 
0 1 0 0 0 1 1 0 0 1 1 1 1 0 1 0 1 0 1 0 
0 1 0 0 0 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 1 0 0 1 1 1 0 1 1 0 1 0 1 0 
0 0 1 1 0 1 1 0 0 0 0 0 1 0 0 1 1 0 1 0 
1 1 0 1 1 1 0 1 1 0 0 1 0 1 0 1 1 0 1 0 
0 0 0 1 0 1 0 1 1 0 0 1 0 0 1 1 1 0 1 0 
0 0 0 0 1 1 1 1 0 1 0 1 0 1 1 1 1 0 1 0 
0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 1 0 
1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 0 0 1 1 0 
0 1 1 0 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 0 
0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 1 1 0 
0 1 1 0 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 
0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 1 1 0 
0 0 1 0 1 0 1 0 0 0 1 0 0 1 1 0 1 1 1 0 
1 1 1 1 1 1 1 1 1 0 0 1 0 0 0 1 1 1 1 0 
0 1 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 1 1 0 
1 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 
0 1 0 0 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 0 
1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 0 
1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 0 
1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 
0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 
0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 
0 0 1 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 1 
1 0 1 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 
1 0 1 0 1 1 1 0 0 1 0 1 0 1 0 0 0 0 0 1 
0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 
0 0 0 1 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 1 
1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 0 0 0 1 
1 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 1 
0 0 0 0 0 0 1 0 1 1 1 1 1 0 1 0 0 0 0 1 
0 1 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 0 1 
0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 1 
0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 
1 1 0 0 0 1 1 1 0 0 1 0 1 1 0 1 0 0 0 1 
1 1 1 0 1 1 1 0 0 0 0 1 1 1 0 1 0 0 0 1 
0 1 0 1 0 1 1 0 1 0 0 1 0 0 1 1 0 0 0 1 
0 0 1 0 0 1 0 0 0 0 0 1 0 1 1 1 0 0 0 1 
0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 
0 1 0 0 1 1 1 0 1 0 0 0 0 0 0 0 1 0 0 1 
1 1 1 1 0 1 1 0 0 1 0 1 1 0 0 0 1 0 0 1 
1 0 0 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 0 1 
0 1 0 1 1 0 0 0 1 0 1 1 1 1 1 0 1 0 0 1 
0 1 0 1 0 1 0 0 0 0 1 1 0 0 0 1 1 0 0 1 
0 1 0 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 1 
0 0 0 1 0 0 0 1 1 1 0 1 1 1 0 1 1 0 0 1 
0 0 1 0 0 0 0 1 1 0 1 1 0 0 1 1 1 0 0 1 
0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 1 0 0 1 
1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 0 1 0 1 
0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 1 0 1 
0 0 0 1 0 1 1 0 1 0 1 0 0 0 0 0 0 1 0 1 
0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 
1 0 1 0 1 1 0 0 1 0 0 1 0 0 0 0 0 1 0 1 
1 0 1 1 0 1 1 0 1 0 0 1 0 0 0 0 0 1 0 1 
0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 0 1 1 0 1 0 0 1 0 1 
0 0 0 0 1 1 1 0 0 0 1 1 0 0 0 0 1 1 0 1 
0 1 0 1 0 1 1 0 0 0 1 0 0 1 0 0 1 1 0 1 
0 0 0 1 0 1 1 0 0 0 0 0 0 0 1 0 1 1 0 1 
1 0 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 1 0 1 
0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 1 1 1 0 1 
0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 
1 0 0 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 0 1 
0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 
1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 1 1 
1 0 1 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 1 1 
1 0 0 0 1 1 1 0 0 1 0 1 0 0 0 0 0 0 1 1 
1 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1 
1 1 0 1 1 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 
0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 
1 1 0 0 1 1 1 0 1 0 0 0 1 1 0 0 0 0 1 1 
1 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 1 
1 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 0 1 1 
1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 0 0 1 1 
0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 1 0 0 1 1 
0 1 0 1 0 1 0 0 1 1 1 0 0 0 0 1 0 0 1 1 
0 1 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 1 1 
1 1 1 0 1 1 0 1 1 1 1 0 1 0 1 1 0 0 1 1 
1 1 1 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 1 1 
1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 
1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 
1 0 1 1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1 
1 1 1 1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1 
1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 0 1 1 1 
1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 
1 1 0 1 1 1 1 1 0 0 1 0 0 1 0 1 0 1 1 1 
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 
1 1 1 1 0 1 0 1 1 0 1 0 1 0 0 0 1 1 1 1 
1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 0 1 1 1 1 
1 1 0 0 0 1 1 0 1 1 0 1 0 1 1 0 1 1 1 1 
1 1 0 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 
1 1 0 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 
1 1 1 1 1 1 0 0 0 1 0 1 1 0 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 
1 0 1 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
