#####TASK#####
## name
elevators_inst_mdp__4
## horizon
40
## discount factor
1
## number of action fluents
4
## number of det state fluents
8
## number of prob state fluents
4
## number of preconds
0
## number of actions
5
## number of hashing functions
13
## initial state
1 0 0 0 1 1 0 0 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
44933
## number of unique states that were encountered during task analysis
807
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
close-door(e0)
## number of values
2
## values
0 false
1 true

## index
1
## name
move-current-dir(e0)
## number of values
2
## values
0 false
1 true

## index
2
## name
open-door-going-down(e0)
## number of values
2
## values
0 false
1 true

## index
3
## name
open-door-going-up(e0)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
elevator-at-floor(e0, f0)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(4)) ~($a(1))) : $s(0)) (and($a(1) ~($s(5)) $s(1)) : $c(1)) (and($a(1) $s(5) ~($s(0))) : $s(0)) (and($a(1) ~($s(5))) : $s(0)) ($c(1) : $c(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 1
3 1
4 0
5 0
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 1
19 1
20 0
21 0
22 1
23 1
24 0
25 0
26 1
27 0
28 0
29 0
30 1
31 0
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
1
## name
elevator-at-floor(e0, f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(4)) ~($a(1))) : $s(1)) (and($a(1) $s(5) $s(0)) : $c(1)) (and($a(1) ~($s(5)) $s(2)) : $c(1)) (and($a(1) $s(5) ~($s(1))) : $s(1)) (and($a(1) ~($s(5)) ~($s(1))) : $s(1)) ($c(1) : $c(0)) )
## hash index
1
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
2
## name
elevator-at-floor(e0, f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(4)) ~($a(1))) : $s(2)) (and($a(1) $s(5) $s(1)) : $c(1)) (and($a(1) ~($s(5)) $s(3)) : $c(1)) (and($a(1) $s(5) ~($s(2))) : $s(2)) (and($a(1) ~($s(5)) ~($s(2))) : $s(2)) ($c(1) : $c(0)) )
## hash index
2
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
3
## name
elevator-at-floor(e0, f3)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(4)) ~($a(1))) : $s(3)) (and($a(1) $s(5) $s(2)) : $c(1)) (and($a(1) $s(5)) : $s(3)) (and($a(1) ~($s(5)) ~($s(3))) : $s(3)) ($c(1) : $c(0)) )
## hash index
3
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 0
25 0
26 0
27 1
28 1
29 1
30 1
31 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
4
## name
elevator-closed(e0)
## number of values
2
## values
0 false
1 true
## formula
or(and($s(4) ~($a(3)) ~($a(2))) $a(0))
## hash index
4
## caching type 
VECTOR
## precomputed results
8
0 0
1 0
2 0
3 1
4 1
5 0
6 0
7 1
## kleene caching type
VECTOR
## kleene caching vec size
12
## action hash keys
0 0
1 1
2 2
3 0
4 3

## index
5
## name
elevator-dir-up(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(3) : $c(1)) ($a(2) : $c(0)) ($c(1) : $s(5)) )
## hash index
5
## caching type 
VECTOR
## precomputed results
6
0 0
1 1
2 0
3 1
4 1
5 0
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 1
2 2
3 0
4 0

## index
6
## name
person-in-elevator-going-down(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(6) : ~($s(0))) ($c(1) : or(and($s(1) ~($s(5)) ~($s(4)) $s(8)) and($s(2) ~($s(5)) ~($s(4)) $s(9)))) )
## hash index
6
## caching type 
VECTOR
## precomputed results
256
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 0
34 1
35 0
36 1
37 0
38 1
39 0
40 1
41 0
42 1
43 0
44 1
45 0
46 1
47 0
48 1
49 0
50 1
51 0
52 1
53 0
54 1
55 0
56 1
57 0
58 1
59 0
60 1
61 0
62 1
63 0
64 0
65 0
66 1
67 1
68 0
69 0
70 1
71 1
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 0
82 0
83 0
84 0
85 0
86 0
87 0
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 0
98 1
99 0
100 1
101 0
102 1
103 0
104 1
105 0
106 1
107 0
108 1
109 0
110 1
111 0
112 1
113 0
114 1
115 0
116 1
117 0
118 1
119 0
120 1
121 0
122 1
123 0
124 1
125 0
126 1
127 0
128 0
129 0
130 0
131 0
132 1
133 1
134 1
135 1
136 0
137 0
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 0
147 0
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
160 1
161 0
162 1
163 0
164 1
165 0
166 1
167 0
168 1
169 0
170 1
171 0
172 1
173 0
174 1
175 0
176 1
177 0
178 1
179 0
180 1
181 0
182 1
183 0
184 1
185 0
186 1
187 0
188 1
189 0
190 1
191 0
192 0
193 0
194 1
195 1
196 1
197 1
198 1
199 1
200 0
201 0
202 0
203 0
204 0
205 0
206 0
207 0
208 0
209 0
210 0
211 0
212 0
213 0
214 0
215 0
216 0
217 0
218 0
219 0
220 0
221 0
222 0
223 0
224 1
225 0
226 1
227 0
228 1
229 0
230 1
231 0
232 1
233 0
234 1
235 0
236 1
237 0
238 1
239 0
240 1
241 0
242 1
243 0
244 1
245 0
246 1
247 0
248 1
249 0
250 1
251 0
252 1
253 0
254 1
255 0
## kleene caching type
VECTOR
## kleene caching vec size
6561
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
7
## name
person-in-elevator-going-up(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(7) : ~($s(3))) ($c(1) : or(and($s(1) $s(5) ~($s(4)) $s(10)) and($s(2) $s(5) ~($s(4)) $s(11)))) )
## hash index
7
## caching type 
VECTOR
## precomputed results
256
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 1
34 1
35 1
36 0
37 0
38 0
39 0
40 1
41 1
42 1
43 1
44 0
45 0
46 0
47 0
48 1
49 1
50 1
51 1
52 0
53 0
54 0
55 0
56 1
57 1
58 1
59 1
60 0
61 0
62 0
63 0
64 0
65 0
66 0
67 0
68 0
69 0
70 0
71 0
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 0
81 1
82 0
83 1
84 0
85 1
86 0
87 1
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 1
98 1
99 1
100 0
101 0
102 0
103 0
104 1
105 1
106 1
107 1
108 0
109 0
110 0
111 0
112 1
113 1
114 1
115 1
116 0
117 0
118 0
119 0
120 1
121 1
122 1
123 1
124 0
125 0
126 0
127 0
128 0
129 0
130 0
131 0
132 0
133 0
134 0
135 0
136 0
137 0
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 1
147 1
148 0
149 0
150 1
151 1
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
160 1
161 1
162 1
163 1
164 0
165 0
166 0
167 0
168 1
169 1
170 1
171 1
172 0
173 0
174 0
175 0
176 1
177 1
178 1
179 1
180 0
181 0
182 0
183 0
184 1
185 1
186 1
187 1
188 0
189 0
190 0
191 0
192 0
193 0
194 0
195 0
196 0
197 0
198 0
199 0
200 0
201 0
202 0
203 0
204 0
205 0
206 0
207 0
208 0
209 1
210 1
211 1
212 0
213 1
214 1
215 1
216 0
217 0
218 0
219 0
220 0
221 0
222 0
223 0
224 1
225 1
226 1
227 1
228 0
229 0
230 0
231 0
232 1
233 1
234 1
235 1
236 0
237 0
238 0
239 0
240 1
241 1
242 1
243 1
244 0
245 0
246 0
247 0
248 1
249 1
250 1
251 1
252 0
253 0
254 0
255 0
## kleene caching type
VECTOR
## kleene caching vec size
6561
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
person-waiting-down(f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(8) ~(and($s(1) ~($s(5)) ~($s(4))))) : $c(1)) ($c(1) : Bernoulli($c(0.051886387))) )
## determinized formula
and($s(8) ~(and($s(1) ~($s(5)) ~($s(4)))))
## hash index
8
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.948113613 1 0.051886387
1 0 2 0 0.948113613 1 0.051886387
2 0 2 0 0.948113613 1 0.051886387
3 0 2 0 0.948113613 1 0.051886387
4 0 2 0 0.948113613 1 0.051886387
5 0 2 0 0.948113613 1 0.051886387
6 0 2 0 0.948113613 1 0.051886387
7 0 2 0 0.948113613 1 0.051886387
8 1 1 1 1
9 0 2 0 0.948113613 1 0.051886387
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
1
## name
person-waiting-down(f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(9) ~(and($s(2) ~($s(5)) ~($s(4))))) : $c(1)) ($c(1) : Bernoulli($c(0.070308864))) )
## determinized formula
and($s(9) ~(and($s(2) ~($s(5)) ~($s(4)))))
## hash index
9
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.929691136 1 0.070308864
1 0 2 0 0.929691136 1 0.070308864
2 0 2 0 0.929691136 1 0.070308864
3 0 2 0 0.929691136 1 0.070308864
4 0 2 0 0.929691136 1 0.070308864
5 0 2 0 0.929691136 1 0.070308864
6 0 2 0 0.929691136 1 0.070308864
7 0 2 0 0.929691136 1 0.070308864
8 1 1 1 1
9 0 2 0 0.929691136 1 0.070308864
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
2
## name
person-waiting-up(f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(10) ~(and($s(1) $s(5) ~($s(4))))) : $c(1)) ($c(1) : Bernoulli($c(0.051886387))) )
## determinized formula
and($s(10) ~(and($s(1) $s(5) ~($s(4)))))
## hash index
10
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.948113613 1 0.051886387
1 0 2 0 0.948113613 1 0.051886387
2 0 2 0 0.948113613 1 0.051886387
3 0 2 0 0.948113613 1 0.051886387
4 0 2 0 0.948113613 1 0.051886387
5 0 2 0 0.948113613 1 0.051886387
6 0 2 0 0.948113613 1 0.051886387
7 0 2 0 0.948113613 1 0.051886387
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 0 2 0 0.948113613 1 0.051886387
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
3
## name
person-waiting-up(f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(11) ~(and($s(2) $s(5) ~($s(4))))) : $c(1)) ($c(1) : Bernoulli($c(0.070308864))) )
## determinized formula
and($s(11) ~(and($s(2) $s(5) ~($s(4)))))
## hash index
11
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.929691136 1 0.070308864
1 0 2 0 0.929691136 1 0.070308864
2 0 2 0 0.929691136 1 0.070308864
3 0 2 0 0.929691136 1 0.070308864
4 0 2 0 0.929691136 1 0.070308864
5 0 2 0 0.929691136 1 0.070308864
6 0 2 0 0.929691136 1 0.070308864
7 0 2 0 0.929691136 1 0.070308864
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 0 2 0 0.929691136 1 0.070308864
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####REWARD#####
## formula
+(*(and($s(7) $s(5)) $c(-0.75)) *(and($s(6) ~($s(5))) $c(-0.75)) *(and($s(7) ~($s(5))) $c(-3)) *(and($s(6) $s(5)) $c(-3)) -(-($c(0) $s(10)) $s(8)) -(-($c(0) $s(11)) $s(9)))
## min
-7.75
## max
0
## independent from actions
1
## hash index
12
## caching type
VECTOR
## precomputed results
128
0 0
1 0
2 -0.75
3 -3
4 -3
5 -0.75
6 -3.75
7 -3.75
8 -1
9 -1
10 -1.75
11 -4
12 -4
13 -1.75
14 -4.75
15 -4.75
16 -1
17 -1
18 -1.75
19 -4
20 -4
21 -1.75
22 -4.75
23 -4.75
24 -2
25 -2
26 -2.75
27 -5
28 -5
29 -2.75
30 -5.75
31 -5.75
32 -1
33 -1
34 -1.75
35 -4
36 -4
37 -1.75
38 -4.75
39 -4.75
40 -2
41 -2
42 -2.75
43 -5
44 -5
45 -2.75
46 -5.75
47 -5.75
48 -2
49 -2
50 -2.75
51 -5
52 -5
53 -2.75
54 -5.75
55 -5.75
56 -3
57 -3
58 -3.75
59 -6
60 -6
61 -3.75
62 -6.75
63 -6.75
64 -1
65 -1
66 -1.75
67 -4
68 -4
69 -1.75
70 -4.75
71 -4.75
72 -2
73 -2
74 -2.75
75 -5
76 -5
77 -2.75
78 -5.75
79 -5.75
80 -2
81 -2
82 -2.75
83 -5
84 -5
85 -2.75
86 -5.75
87 -5.75
88 -3
89 -3
90 -3.75
91 -6
92 -6
93 -3.75
94 -6.75
95 -6.75
96 -2
97 -2
98 -2.75
99 -5
100 -5
101 -2.75
102 -5.75
103 -5.75
104 -3
105 -3
106 -3.75
107 -6
108 -6
109 -3.75
110 -6.75
111 -6.75
112 -3
113 -3
114 -3.75
115 -6
116 -6
117 -3.75
118 -6.75
119 -6.75
120 -4
121 -4
122 -4.75
123 -7
124 -7
125 -4.75
126 -7.75
127 -7.75
## kleene caching type
VECTOR
## kleene caching vec size
2187
## action hash keys
0 0
1 0
2 0
3 0
4 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 1 0 0 
## relevant preconditions
0


## index
4
## state
1 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
3
0 2
1 2
6 1
## kleene state fluent hash keys (first line is the number of keys)
3
0 2
1 2
6 1

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
7
0 4
1 4
2 2
6 2
7 1
8 1
10 1
## kleene state fluent hash keys (first line is the number of keys)
7
0 6
1 6
2 2
6 3
7 1
8 1
10 1

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
7
1 8
2 4
3 2
6 4
7 2
9 1
11 1
## kleene state fluent hash keys (first line is the number of keys)
7
1 18
2 6
3 2
6 9
7 3
9 1
11 1

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
3
2 8
3 4
7 4
## kleene state fluent hash keys (first line is the number of keys)
3
2 18
3 6
7 9

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
11
0 8
1 16
2 16
3 8
4 4
6 8
7 8
8 2
9 2
10 2
11 2
## kleene state fluent hash keys (first line is the number of keys)
11
0 18
1 54
2 54
3 18
4 4
6 27
7 27
8 3
9 3
10 3
11 3

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
12
0 16
1 32
2 32
3 16
5 3
6 16
7 16
8 4
9 4
10 4
11 4
12 1
## kleene state fluent hash keys (first line is the number of keys)
12
0 54
1 162
2 162
3 54
5 3
6 81
7 81
8 9
9 9
10 9
11 9
12 1

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
2
6 32
12 2
## kleene state fluent hash keys (first line is the number of keys)
2
6 243
12 3

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
2
7 32
12 4
## kleene state fluent hash keys (first line is the number of keys)
2
7 243
12 9


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
3
6 64
8 8
12 8
## kleene state fluent hash keys (first line is the number of keys)
3
6 729
8 27
12 27

## index
1
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
3
6 128
9 8
12 16
## kleene state fluent hash keys (first line is the number of keys)
3
6 2187
9 27
12 81

## index
2
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
3
7 64
10 8
12 32
## kleene state fluent hash keys (first line is the number of keys)
3
7 729
10 27
12 243

## index
3
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
3
7 128
11 8
12 64
## kleene state fluent hash keys (first line is the number of keys)
3
7 2187
11 27
12 729



#####TRAINING SET#####
200
0 1 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 1 0 0 0 0 0 0 
1 0 0 0 1 1 0 0 0 0 0 0 
0 1 0 0 1 1 0 0 0 0 0 0 
0 0 0 1 0 0 1 0 0 0 0 0 
1 0 0 0 1 0 1 1 0 0 0 0 
0 0 0 1 1 1 1 1 0 0 0 0 
0 1 0 0 0 0 0 0 1 0 0 0 
0 0 0 1 0 0 0 0 1 0 0 0 
0 1 0 0 1 0 0 0 1 0 0 0 
0 1 0 0 1 1 0 0 1 0 0 0 
0 0 0 1 0 0 1 0 1 0 0 0 
0 1 0 0 1 0 1 0 1 0 0 0 
0 0 1 0 1 0 1 0 1 0 0 0 
0 0 1 0 1 0 0 1 1 0 0 0 
0 1 0 0 1 1 0 1 1 0 0 0 
1 0 0 0 1 0 1 1 1 0 0 0 
0 1 0 0 1 1 1 1 1 0 0 0 
0 0 1 0 0 0 0 0 0 1 0 0 
0 1 0 0 0 1 0 0 0 1 0 0 
0 0 1 0 0 1 0 0 0 1 0 0 
0 0 1 0 0 0 1 0 0 1 0 0 
0 0 0 1 0 0 1 0 0 1 0 0 
0 1 0 0 1 1 1 0 0 1 0 0 
1 0 0 0 1 1 0 1 0 1 0 0 
0 1 0 0 1 1 0 1 0 1 0 0 
0 1 0 0 0 0 1 1 0 1 0 0 
0 1 0 0 1 0 1 1 0 1 0 0 
0 1 0 0 0 1 1 1 0 1 0 0 
0 1 0 0 1 1 1 1 0 1 0 0 
0 0 0 1 1 1 1 1 0 1 0 0 
1 0 0 0 0 0 0 0 1 1 0 0 
0 0 0 1 0 0 0 0 1 1 0 0 
0 1 0 0 1 0 0 0 1 1 0 0 
0 0 0 1 1 0 0 0 1 1 0 0 
1 0 0 0 0 1 0 0 1 1 0 0 
0 0 1 0 1 1 0 0 1 1 0 0 
0 0 1 0 0 0 1 0 1 1 0 0 
0 1 0 0 1 0 1 0 1 1 0 0 
0 0 0 1 1 0 1 0 1 1 0 0 
0 1 0 0 0 0 0 1 1 1 0 0 
0 0 0 1 1 1 0 1 1 1 0 0 
0 0 1 0 0 1 1 1 1 1 0 0 
1 0 0 0 0 0 0 0 0 0 1 0 
1 0 0 0 1 1 0 0 0 0 1 0 
0 1 0 0 1 1 0 0 0 0 1 0 
0 1 0 0 1 0 1 0 0 0 1 0 
0 0 1 0 0 1 1 0 0 0 1 0 
0 0 0 1 0 1 1 0 0 0 1 0 
0 0 1 0 0 0 0 1 0 0 1 0 
0 1 0 0 1 0 0 1 0 0 1 0 
0 0 1 0 0 1 0 1 0 0 1 0 
0 1 0 0 1 0 1 1 0 0 1 0 
0 0 1 0 1 0 1 1 0 0 1 0 
0 0 1 0 1 1 1 1 0 0 1 0 
0 1 0 0 0 0 0 0 1 0 1 0 
0 0 0 1 0 0 0 0 1 0 1 0 
0 1 0 0 1 0 0 0 1 0 1 0 
0 0 1 0 0 1 0 0 1 0 1 0 
0 1 0 0 1 1 0 0 1 0 1 0 
0 0 1 0 1 1 0 0 1 0 1 0 
0 1 0 0 1 0 1 0 1 0 1 0 
0 0 1 0 1 0 1 0 1 0 1 0 
0 0 1 0 1 1 1 0 1 0 1 0 
1 0 0 0 0 1 0 1 1 0 1 0 
0 1 0 0 0 0 1 1 1 0 1 0 
0 1 0 0 0 1 1 1 1 0 1 0 
0 0 1 0 1 1 1 1 1 0 1 0 
1 0 0 0 1 0 0 0 0 1 1 0 
0 0 1 0 1 0 0 0 0 1 1 0 
0 1 0 0 1 1 0 0 0 1 1 0 
0 0 1 0 1 1 0 0 0 1 1 0 
0 1 0 0 0 1 1 0 0 1 1 0 
1 0 0 0 0 0 0 1 0 1 1 0 
0 1 0 0 0 1 0 1 0 1 1 0 
0 0 1 0 0 1 0 1 0 1 1 0 
1 0 0 0 1 1 0 1 0 1 1 0 
0 0 0 1 1 1 0 1 0 1 1 0 
0 1 0 0 0 0 1 1 0 1 1 0 
0 0 1 0 1 1 1 1 0 1 1 0 
0 1 0 0 0 0 0 0 1 1 1 0 
0 0 1 0 1 0 0 0 1 1 1 0 
0 1 0 0 0 1 0 0 1 1 1 0 
0 0 1 0 0 1 0 0 1 1 1 0 
0 1 0 0 1 1 0 0 1 1 1 0 
0 0 1 0 1 1 0 0 1 1 1 0 
0 1 0 0 0 0 1 0 1 1 1 0 
0 0 1 0 0 1 1 0 1 1 1 0 
0 0 1 0 1 0 0 1 1 1 1 0 
0 1 0 0 1 1 0 1 1 1 1 0 
0 1 0 0 1 0 1 1 1 1 1 0 
0 1 0 0 1 1 1 1 1 1 1 0 
0 0 0 1 1 1 1 1 1 1 1 0 
1 0 0 0 0 0 0 0 0 0 0 1 
0 1 0 0 0 0 0 0 0 0 0 1 
0 0 1 0 0 0 0 0 0 0 0 1 
0 0 0 1 0 0 0 0 0 0 0 1 
1 0 0 0 1 0 0 0 0 0 0 1 
0 1 0 0 1 0 0 0 0 0 0 1 
0 0 0 1 0 1 0 0 0 0 0 1 
0 0 0 1 1 1 0 0 0 0 0 1 
0 1 0 0 0 1 1 0 0 0 0 1 
0 0 0 1 0 1 1 0 0 0 0 1 
1 0 0 0 0 0 0 1 0 0 0 1 
0 1 0 0 0 1 0 1 0 0 0 1 
0 1 0 0 1 1 0 1 0 0 0 1 
0 0 0 1 1 1 0 1 0 0 0 1 
0 1 0 0 1 0 1 1 0 0 0 1 
0 1 0 0 0 1 1 1 0 0 0 1 
0 1 0 0 1 1 1 1 0 0 0 1 
0 1 0 0 1 0 0 0 1 0 0 1 
0 1 0 0 0 1 0 0 1 0 0 1 
0 1 0 0 0 0 1 0 1 0 0 1 
0 0 1 0 0 0 1 0 1 0 0 1 
0 1 0 0 1 0 1 0 1 0 0 1 
0 0 1 0 1 0 1 0 1 0 0 1 
0 0 0 1 1 0 1 0 1 0 0 1 
0 0 1 0 1 1 1 0 1 0 0 1 
1 0 0 0 0 0 0 1 1 0 0 1 
1 0 0 0 1 0 0 1 1 0 0 1 
0 1 0 0 0 0 1 1 1 0 0 1 
0 0 0 1 1 1 1 1 1 0 0 1 
0 0 1 0 0 0 0 0 0 1 0 1 
0 0 0 1 0 0 0 0 0 1 0 1 
1 0 0 0 1 0 0 0 0 1 0 1 
0 0 0 1 1 0 0 0 0 1 0 1 
1 0 0 0 0 1 0 0 0 1 0 1 
0 1 0 0 0 1 0 0 0 1 0 1 
0 1 0 0 1 0 1 0 0 1 0 1 
0 0 1 0 0 1 1 0 0 1 0 1 
0 0 0 1 0 1 1 0 0 1 0 1 
0 0 0 1 1 1 1 0 0 1 0 1 
1 0 0 0 0 1 0 1 0 1 0 1 
0 1 0 0 0 0 1 1 0 1 0 1 
0 1 0 0 1 0 1 1 0 1 0 1 
1 0 0 0 0 0 0 0 1 1 0 1 
0 0 1 0 0 0 0 0 1 1 0 1 
1 0 0 0 1 0 0 0 1 1 0 1 
0 0 0 1 1 0 0 0 1 1 0 1 
0 1 0 0 0 1 0 0 1 1 0 1 
0 1 0 0 1 1 0 0 1 1 0 1 
0 1 0 0 1 0 1 0 1 1 0 1 
0 0 1 0 1 0 1 0 1 1 0 1 
0 0 0 1 0 1 1 0 1 1 0 1 
0 0 1 0 0 1 0 1 1 1 0 1 
0 0 1 0 1 1 0 1 1 1 0 1 
0 1 0 0 0 0 1 1 1 1 0 1 
0 1 0 0 0 1 1 1 1 1 0 1 
0 1 0 0 0 0 0 0 0 0 1 1 
0 0 0 1 0 0 0 0 0 0 1 1 
0 1 0 0 0 1 0 0 0 0 1 1 
1 0 0 0 1 1 0 0 0 0 1 1 
0 0 1 0 1 1 0 0 0 0 1 1 
0 0 0 1 0 0 1 0 0 0 1 1 
0 1 0 0 1 0 1 0 0 0 1 1 
0 0 0 1 1 0 1 0 0 0 1 1 
0 0 0 1 0 1 1 0 0 0 1 1 
0 1 0 0 1 1 1 0 0 0 1 1 
1 0 0 0 1 0 0 1 0 0 1 1 
0 0 1 0 1 1 0 1 0 0 1 1 
0 1 0 0 0 1 1 1 0 0 1 1 
0 1 0 0 1 1 1 1 0 0 1 1 
0 0 1 0 1 1 1 1 0 0 1 1 
0 0 0 1 1 1 1 1 0 0 1 1 
0 0 1 0 0 0 0 0 1 0 1 1 
1 0 0 0 0 1 0 0 1 0 1 1 
0 0 0 1 0 1 0 0 1 0 1 1 
0 0 1 0 0 0 1 0 1 0 1 1 
0 0 1 0 1 0 1 0 1 0 1 1 
0 0 1 0 0 1 1 0 1 0 1 1 
0 0 0 1 0 1 1 0 1 0 1 1 
1 0 0 0 0 0 0 1 1 0 1 1 
0 0 1 0 0 0 0 1 1 0 1 1 
1 0 0 0 1 0 0 1 1 0 1 1 
0 1 0 0 0 0 1 1 1 0 1 1 
0 0 1 0 0 0 1 1 1 0 1 1 
1 0 0 0 1 0 1 1 1 0 1 1 
0 1 0 0 1 0 1 1 1 0 1 1 
0 0 1 0 1 0 1 1 1 0 1 1 
0 0 0 1 0 0 0 0 0 1 1 1 
0 0 0 1 1 0 0 0 0 1 1 1 
0 1 0 0 0 0 1 0 0 1 1 1 
1 0 0 0 1 0 1 0 0 1 1 1 
0 0 1 0 1 1 1 0 0 1 1 1 
0 1 0 0 1 0 0 1 0 1 1 1 
0 0 1 0 1 1 0 1 0 1 1 1 
0 1 0 0 0 0 0 0 1 1 1 1 
0 0 0 1 0 0 0 0 1 1 1 1 
1 0 0 0 1 0 0 0 1 1 1 1 
0 0 1 0 1 0 0 0 1 1 1 1 
0 0 0 1 0 0 1 0 1 1 1 1 
0 0 1 0 1 0 1 0 1 1 1 1 
0 0 0 1 1 0 1 0 1 1 1 1 
0 1 0 0 1 1 1 0 1 1 1 1 
1 0 0 0 1 0 0 1 1 1 1 1 
0 0 1 0 1 0 0 1 1 1 1 1 
0 0 1 0 0 1 0 1 1 1 1 1 
0 0 1 0 1 1 0 1 1 1 1 1 
0 0 1 0 0 0 1 1 1 1 1 1 
0 0 1 0 1 0 1 1 1 1 1 1 
