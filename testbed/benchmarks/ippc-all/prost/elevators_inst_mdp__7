#####TASK#####
## name
elevators_inst_mdp__7
## horizon
40
## discount factor
1
## number of action fluents
4
## number of det state fluents
9
## number of prob state fluents
6
## number of preconds
0
## number of actions
5
## number of hashing functions
16
## initial state
1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
35754
## number of unique states that were encountered during task analysis
3341
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
close-door(e0)
## number of values
2
## values
0 false
1 true

## index
1
## name
move-current-dir(e0)
## number of values
2
## values
0 false
1 true

## index
2
## name
open-door-going-down(e0)
## number of values
2
## values
0 false
1 true

## index
3
## name
open-door-going-up(e0)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
elevator-at-floor(e0, f0)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(5)) ~($a(1))) : $s(0)) (and($a(1) ~($s(6)) $s(1)) : $c(1)) (and($a(1) $s(6) ~($s(0))) : $s(0)) (and($a(1) ~($s(6))) : $s(0)) ($c(1) : $c(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 1
3 1
4 0
5 0
6 1
7 1
8 0
9 0
10 1
11 1
12 0
13 1
14 1
15 1
16 0
17 0
18 1
19 1
20 0
21 0
22 1
23 1
24 0
25 0
26 1
27 0
28 0
29 0
30 1
31 0
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
1
## name
elevator-at-floor(e0, f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(5)) ~($a(1))) : $s(1)) (and($a(1) $s(6) $s(0)) : $c(1)) (and($a(1) ~($s(6)) $s(2)) : $c(1)) (and($a(1) $s(6) ~($s(1))) : $s(1)) (and($a(1) ~($s(6)) ~($s(1))) : $s(1)) ($c(1) : $c(0)) )
## hash index
1
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
2
## name
elevator-at-floor(e0, f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(5)) ~($a(1))) : $s(2)) (and($a(1) $s(6) $s(1)) : $c(1)) (and($a(1) ~($s(6)) $s(3)) : $c(1)) (and($a(1) $s(6) ~($s(2))) : $s(2)) (and($a(1) ~($s(6)) ~($s(2))) : $s(2)) ($c(1) : $c(0)) )
## hash index
2
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
3
## name
elevator-at-floor(e0, f3)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(5)) ~($a(1))) : $s(3)) (and($a(1) $s(6) $s(2)) : $c(1)) (and($a(1) ~($s(6)) $s(4)) : $c(1)) (and($a(1) $s(6) ~($s(3))) : $s(3)) (and($a(1) ~($s(6)) ~($s(3))) : $s(3)) ($c(1) : $c(0)) )
## hash index
3
## caching type 
VECTOR
## precomputed results
64
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 1
14 1
15 1
16 0
17 0
18 0
19 0
20 1
21 0
22 1
23 0
24 0
25 1
26 0
27 1
28 1
29 1
30 1
31 1
32 0
33 0
34 0
35 0
36 1
37 1
38 1
39 1
40 0
41 0
42 0
43 0
44 1
45 1
46 1
47 1
48 0
49 0
50 0
51 1
52 1
53 0
54 1
55 1
56 0
57 0
58 0
59 1
60 1
61 0
62 1
63 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
4
## name
elevator-at-floor(e0, f4)
## number of values
2
## values
0 false
1 true
## formula
switch( (or(~($s(5)) ~($a(1))) : $s(4)) (and($a(1) $s(6) $s(3)) : $c(1)) (and($a(1) $s(6)) : $s(4)) (and($a(1) ~($s(6)) ~($s(4))) : $s(4)) ($c(1) : $c(0)) )
## hash index
4
## caching type 
VECTOR
## precomputed results
32
0 0
1 0
2 0
3 0
4 1
5 1
6 1
7 1
8 0
9 0
10 0
11 0
12 1
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 1
21 1
22 1
23 1
24 0
25 0
26 0
27 1
28 1
29 1
30 1
31 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 1
4 0

## index
5
## name
elevator-closed(e0)
## number of values
2
## values
0 false
1 true
## formula
or(and($s(5) ~($a(3)) ~($a(2))) $a(0))
## hash index
5
## caching type 
VECTOR
## precomputed results
8
0 0
1 0
2 0
3 1
4 1
5 0
6 0
7 1
## kleene caching type
VECTOR
## kleene caching vec size
12
## action hash keys
0 0
1 1
2 2
3 0
4 3

## index
6
## name
elevator-dir-up(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(3) : $c(1)) ($a(2) : $c(0)) ($c(1) : $s(6)) )
## hash index
6
## caching type 
VECTOR
## precomputed results
6
0 0
1 1
2 0
3 1
4 1
5 0
## kleene caching type
VECTOR
## kleene caching vec size
9
## action hash keys
0 0
1 1
2 2
3 0
4 0

## index
7
## name
person-in-elevator-going-down(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(7) : ~($s(0))) ($c(1) : or(and($s(1) ~($s(6)) ~($s(5)) $s(9)) and($s(2) ~($s(6)) ~($s(5)) $s(10)) and($s(3) ~($s(6)) ~($s(5)) $s(11)))) )
## hash index
7
## caching type 
VECTOR
## precomputed results
1024
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 0
42 0
43 0
44 0
45 0
46 0
47 0
48 0
49 0
50 0
51 0
52 0
53 0
54 0
55 0
56 0
57 0
58 0
59 0
60 0
61 0
62 0
63 0
64 1
65 0
66 1
67 0
68 1
69 0
70 1
71 0
72 1
73 0
74 1
75 0
76 1
77 0
78 1
79 0
80 1
81 0
82 1
83 0
84 1
85 0
86 1
87 0
88 1
89 0
90 1
91 0
92 1
93 0
94 1
95 0
96 1
97 0
98 1
99 0
100 1
101 0
102 1
103 0
104 1
105 0
106 1
107 0
108 1
109 0
110 1
111 0
112 1
113 0
114 1
115 0
116 1
117 0
118 1
119 0
120 1
121 0
122 1
123 0
124 1
125 0
126 1
127 0
128 0
129 0
130 1
131 1
132 0
133 0
134 1
135 1
136 0
137 0
138 1
139 1
140 0
141 0
142 1
143 1
144 0
145 0
146 0
147 0
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
160 0
161 0
162 0
163 0
164 0
165 0
166 0
167 0
168 0
169 0
170 0
171 0
172 0
173 0
174 0
175 0
176 0
177 0
178 0
179 0
180 0
181 0
182 0
183 0
184 0
185 0
186 0
187 0
188 0
189 0
190 0
191 0
192 1
193 0
194 1
195 0
196 1
197 0
198 1
199 0
200 1
201 0
202 1
203 0
204 1
205 0
206 1
207 0
208 1
209 0
210 1
211 0
212 1
213 0
214 1
215 0
216 1
217 0
218 1
219 0
220 1
221 0
222 1
223 0
224 1
225 0
226 1
227 0
228 1
229 0
230 1
231 0
232 1
233 0
234 1
235 0
236 1
237 0
238 1
239 0
240 1
241 0
242 1
243 0
244 1
245 0
246 1
247 0
248 1
249 0
250 1
251 0
252 1
253 0
254 1
255 0
256 0
257 0
258 0
259 0
260 1
261 1
262 1
263 1
264 0
265 0
266 0
267 0
268 1
269 1
270 1
271 1
272 0
273 0
274 0
275 0
276 0
277 0
278 0
279 0
280 0
281 0
282 0
283 0
284 0
285 0
286 0
287 0
288 0
289 0
290 0
291 0
292 0
293 0
294 0
295 0
296 0
297 0
298 0
299 0
300 0
301 0
302 0
303 0
304 0
305 0
306 0
307 0
308 0
309 0
310 0
311 0
312 0
313 0
314 0
315 0
316 0
317 0
318 0
319 0
320 1
321 0
322 1
323 0
324 1
325 0
326 1
327 0
328 1
329 0
330 1
331 0
332 1
333 0
334 1
335 0
336 1
337 0
338 1
339 0
340 1
341 0
342 1
343 0
344 1
345 0
346 1
347 0
348 1
349 0
350 1
351 0
352 1
353 0
354 1
355 0
356 1
357 0
358 1
359 0
360 1
361 0
362 1
363 0
364 1
365 0
366 1
367 0
368 1
369 0
370 1
371 0
372 1
373 0
374 1
375 0
376 1
377 0
378 1
379 0
380 1
381 0
382 1
383 0
384 0
385 0
386 1
387 1
388 1
389 1
390 1
391 1
392 0
393 0
394 1
395 1
396 1
397 1
398 1
399 1
400 0
401 0
402 0
403 0
404 0
405 0
406 0
407 0
408 0
409 0
410 0
411 0
412 0
413 0
414 0
415 0
416 0
417 0
418 0
419 0
420 0
421 0
422 0
423 0
424 0
425 0
426 0
427 0
428 0
429 0
430 0
431 0
432 0
433 0
434 0
435 0
436 0
437 0
438 0
439 0
440 0
441 0
442 0
443 0
444 0
445 0
446 0
447 0
448 1
449 0
450 1
451 0
452 1
453 0
454 1
455 0
456 1
457 0
458 1
459 0
460 1
461 0
462 1
463 0
464 1
465 0
466 1
467 0
468 1
469 0
470 1
471 0
472 1
473 0
474 1
475 0
476 1
477 0
478 1
479 0
480 1
481 0
482 1
483 0
484 1
485 0
486 1
487 0
488 1
489 0
490 1
491 0
492 1
493 0
494 1
495 0
496 1
497 0
498 1
499 0
500 1
501 0
502 1
503 0
504 1
505 0
506 1
507 0
508 1
509 0
510 1
511 0
512 0
513 0
514 0
515 0
516 0
517 0
518 0
519 0
520 1
521 1
522 1
523 1
524 1
525 1
526 1
527 1
528 0
529 0
530 0
531 0
532 0
533 0
534 0
535 0
536 0
537 0
538 0
539 0
540 0
541 0
542 0
543 0
544 0
545 0
546 0
547 0
548 0
549 0
550 0
551 0
552 0
553 0
554 0
555 0
556 0
557 0
558 0
559 0
560 0
561 0
562 0
563 0
564 0
565 0
566 0
567 0
568 0
569 0
570 0
571 0
572 0
573 0
574 0
575 0
576 1
577 0
578 1
579 0
580 1
581 0
582 1
583 0
584 1
585 0
586 1
587 0
588 1
589 0
590 1
591 0
592 1
593 0
594 1
595 0
596 1
597 0
598 1
599 0
600 1
601 0
602 1
603 0
604 1
605 0
606 1
607 0
608 1
609 0
610 1
611 0
612 1
613 0
614 1
615 0
616 1
617 0
618 1
619 0
620 1
621 0
622 1
623 0
624 1
625 0
626 1
627 0
628 1
629 0
630 1
631 0
632 1
633 0
634 1
635 0
636 1
637 0
638 1
639 0
640 0
641 0
642 1
643 1
644 0
645 0
646 1
647 1
648 1
649 1
650 1
651 1
652 1
653 1
654 1
655 1
656 0
657 0
658 0
659 0
660 0
661 0
662 0
663 0
664 0
665 0
666 0
667 0
668 0
669 0
670 0
671 0
672 0
673 0
674 0
675 0
676 0
677 0
678 0
679 0
680 0
681 0
682 0
683 0
684 0
685 0
686 0
687 0
688 0
689 0
690 0
691 0
692 0
693 0
694 0
695 0
696 0
697 0
698 0
699 0
700 0
701 0
702 0
703 0
704 1
705 0
706 1
707 0
708 1
709 0
710 1
711 0
712 1
713 0
714 1
715 0
716 1
717 0
718 1
719 0
720 1
721 0
722 1
723 0
724 1
725 0
726 1
727 0
728 1
729 0
730 1
731 0
732 1
733 0
734 1
735 0
736 1
737 0
738 1
739 0
740 1
741 0
742 1
743 0
744 1
745 0
746 1
747 0
748 1
749 0
750 1
751 0
752 1
753 0
754 1
755 0
756 1
757 0
758 1
759 0
760 1
761 0
762 1
763 0
764 1
765 0
766 1
767 0
768 0
769 0
770 0
771 0
772 1
773 1
774 1
775 1
776 1
777 1
778 1
779 1
780 1
781 1
782 1
783 1
784 0
785 0
786 0
787 0
788 0
789 0
790 0
791 0
792 0
793 0
794 0
795 0
796 0
797 0
798 0
799 0
800 0
801 0
802 0
803 0
804 0
805 0
806 0
807 0
808 0
809 0
810 0
811 0
812 0
813 0
814 0
815 0
816 0
817 0
818 0
819 0
820 0
821 0
822 0
823 0
824 0
825 0
826 0
827 0
828 0
829 0
830 0
831 0
832 1
833 0
834 1
835 0
836 1
837 0
838 1
839 0
840 1
841 0
842 1
843 0
844 1
845 0
846 1
847 0
848 1
849 0
850 1
851 0
852 1
853 0
854 1
855 0
856 1
857 0
858 1
859 0
860 1
861 0
862 1
863 0
864 1
865 0
866 1
867 0
868 1
869 0
870 1
871 0
872 1
873 0
874 1
875 0
876 1
877 0
878 1
879 0
880 1
881 0
882 1
883 0
884 1
885 0
886 1
887 0
888 1
889 0
890 1
891 0
892 1
893 0
894 1
895 0
896 0
897 0
898 1
899 1
900 1
901 1
902 1
903 1
904 1
905 1
906 1
907 1
908 1
909 1
910 1
911 1
912 0
913 0
914 0
915 0
916 0
917 0
918 0
919 0
920 0
921 0
922 0
923 0
924 0
925 0
926 0
927 0
928 0
929 0
930 0
931 0
932 0
933 0
934 0
935 0
936 0
937 0
938 0
939 0
940 0
941 0
942 0
943 0
944 0
945 0
946 0
947 0
948 0
949 0
950 0
951 0
952 0
953 0
954 0
955 0
956 0
957 0
958 0
959 0
960 1
961 0
962 1
963 0
964 1
965 0
966 1
967 0
968 1
969 0
970 1
971 0
972 1
973 0
974 1
975 0
976 1
977 0
978 1
979 0
980 1
981 0
982 1
983 0
984 1
985 0
986 1
987 0
988 1
989 0
990 1
991 0
992 1
993 0
994 1
995 0
996 1
997 0
998 1
999 0
1000 1
1001 0
1002 1
1003 0
1004 1
1005 0
1006 1
1007 0
1008 1
1009 0
1010 1
1011 0
1012 1
1013 0
1014 1
1015 0
1016 1
1017 0
1018 1
1019 0
1020 1
1021 0
1022 1
1023 0
## kleene caching type
VECTOR
## kleene caching vec size
59049
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
8
## name
person-in-elevator-going-up(e0)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(8) : ~($s(4))) ($c(1) : or(and($s(1) $s(6) ~($s(5)) $s(12)) and($s(2) $s(6) ~($s(5)) $s(13)) and($s(3) $s(6) ~($s(5)) $s(14)))) )
## hash index
8
## caching type 
VECTOR
## precomputed results
1024
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0
41 0
42 0
43 0
44 0
45 0
46 0
47 0
48 0
49 0
50 0
51 0
52 0
53 0
54 0
55 0
56 0
57 0
58 0
59 0
60 0
61 0
62 0
63 0
64 1
65 1
66 1
67 1
68 1
69 1
70 1
71 1
72 0
73 0
74 0
75 0
76 0
77 0
78 0
79 0
80 1
81 1
82 1
83 1
84 1
85 1
86 1
87 1
88 0
89 0
90 0
91 0
92 0
93 0
94 0
95 0
96 1
97 1
98 1
99 1
100 1
101 1
102 1
103 1
104 0
105 0
106 0
107 0
108 0
109 0
110 0
111 0
112 1
113 1
114 1
115 1
116 1
117 1
118 1
119 1
120 0
121 0
122 0
123 0
124 0
125 0
126 0
127 0
128 0
129 0
130 0
131 0
132 0
133 0
134 0
135 0
136 0
137 0
138 0
139 0
140 0
141 0
142 0
143 0
144 0
145 0
146 0
147 0
148 0
149 0
150 0
151 0
152 0
153 0
154 0
155 0
156 0
157 0
158 0
159 0
160 0
161 1
162 0
163 1
164 0
165 1
166 0
167 1
168 0
169 1
170 0
171 1
172 0
173 1
174 0
175 1
176 0
177 0
178 0
179 0
180 0
181 0
182 0
183 0
184 0
185 0
186 0
187 0
188 0
189 0
190 0
191 0
192 1
193 1
194 1
195 1
196 1
197 1
198 1
199 1
200 0
201 0
202 0
203 0
204 0
205 0
206 0
207 0
208 1
209 1
210 1
211 1
212 1
213 1
214 1
215 1
216 0
217 0
218 0
219 0
220 0
221 0
222 0
223 0
224 1
225 1
226 1
227 1
228 1
229 1
230 1
231 1
232 0
233 0
234 0
235 0
236 0
237 0
238 0
239 0
240 1
241 1
242 1
243 1
244 1
245 1
246 1
247 1
248 0
249 0
250 0
251 0
252 0
253 0
254 0
255 0
256 0
257 0
258 0
259 0
260 0
261 0
262 0
263 0
264 0
265 0
266 0
267 0
268 0
269 0
270 0
271 0
272 0
273 0
274 0
275 0
276 0
277 0
278 0
279 0
280 0
281 0
282 0
283 0
284 0
285 0
286 0
287 0
288 0
289 0
290 1
291 1
292 0
293 0
294 1
295 1
296 0
297 0
298 1
299 1
300 0
301 0
302 1
303 1
304 0
305 0
306 0
307 0
308 0
309 0
310 0
311 0
312 0
313 0
314 0
315 0
316 0
317 0
318 0
319 0
320 1
321 1
322 1
323 1
324 1
325 1
326 1
327 1
328 0
329 0
330 0
331 0
332 0
333 0
334 0
335 0
336 1
337 1
338 1
339 1
340 1
341 1
342 1
343 1
344 0
345 0
346 0
347 0
348 0
349 0
350 0
351 0
352 1
353 1
354 1
355 1
356 1
357 1
358 1
359 1
360 0
361 0
362 0
363 0
364 0
365 0
366 0
367 0
368 1
369 1
370 1
371 1
372 1
373 1
374 1
375 1
376 0
377 0
378 0
379 0
380 0
381 0
382 0
383 0
384 0
385 0
386 0
387 0
388 0
389 0
390 0
391 0
392 0
393 0
394 0
395 0
396 0
397 0
398 0
399 0
400 0
401 0
402 0
403 0
404 0
405 0
406 0
407 0
408 0
409 0
410 0
411 0
412 0
413 0
414 0
415 0
416 0
417 1
418 1
419 1
420 0
421 1
422 1
423 1
424 0
425 1
426 1
427 1
428 0
429 1
430 1
431 1
432 0
433 0
434 0
435 0
436 0
437 0
438 0
439 0
440 0
441 0
442 0
443 0
444 0
445 0
446 0
447 0
448 1
449 1
450 1
451 1
452 1
453 1
454 1
455 1
456 0
457 0
458 0
459 0
460 0
461 0
462 0
463 0
464 1
465 1
466 1
467 1
468 1
469 1
470 1
471 1
472 0
473 0
474 0
475 0
476 0
477 0
478 0
479 0
480 1
481 1
482 1
483 1
484 1
485 1
486 1
487 1
488 0
489 0
490 0
491 0
492 0
493 0
494 0
495 0
496 1
497 1
498 1
499 1
500 1
501 1
502 1
503 1
504 0
505 0
506 0
507 0
508 0
509 0
510 0
511 0
512 0
513 0
514 0
515 0
516 0
517 0
518 0
519 0
520 0
521 0
522 0
523 0
524 0
525 0
526 0
527 0
528 0
529 0
530 0
531 0
532 0
533 0
534 0
535 0
536 0
537 0
538 0
539 0
540 0
541 0
542 0
543 0
544 0
545 0
546 0
547 0
548 1
549 1
550 1
551 1
552 0
553 0
554 0
555 0
556 1
557 1
558 1
559 1
560 0
561 0
562 0
563 0
564 0
565 0
566 0
567 0
568 0
569 0
570 0
571 0
572 0
573 0
574 0
575 0
576 1
577 1
578 1
579 1
580 1
581 1
582 1
583 1
584 0
585 0
586 0
587 0
588 0
589 0
590 0
591 0
592 1
593 1
594 1
595 1
596 1
597 1
598 1
599 1
600 0
601 0
602 0
603 0
604 0
605 0
606 0
607 0
608 1
609 1
610 1
611 1
612 1
613 1
614 1
615 1
616 0
617 0
618 0
619 0
620 0
621 0
622 0
623 0
624 1
625 1
626 1
627 1
628 1
629 1
630 1
631 1
632 0
633 0
634 0
635 0
636 0
637 0
638 0
639 0
640 0
641 0
642 0
643 0
644 0
645 0
646 0
647 0
648 0
649 0
650 0
651 0
652 0
653 0
654 0
655 0
656 0
657 0
658 0
659 0
660 0
661 0
662 0
663 0
664 0
665 0
666 0
667 0
668 0
669 0
670 0
671 0
672 0
673 1
674 0
675 1
676 1
677 1
678 1
679 1
680 0
681 1
682 0
683 1
684 1
685 1
686 1
687 1
688 0
689 0
690 0
691 0
692 0
693 0
694 0
695 0
696 0
697 0
698 0
699 0
700 0
701 0
702 0
703 0
704 1
705 1
706 1
707 1
708 1
709 1
710 1
711 1
712 0
713 0
714 0
715 0
716 0
717 0
718 0
719 0
720 1
721 1
722 1
723 1
724 1
725 1
726 1
727 1
728 0
729 0
730 0
731 0
732 0
733 0
734 0
735 0
736 1
737 1
738 1
739 1
740 1
741 1
742 1
743 1
744 0
745 0
746 0
747 0
748 0
749 0
750 0
751 0
752 1
753 1
754 1
755 1
756 1
757 1
758 1
759 1
760 0
761 0
762 0
763 0
764 0
765 0
766 0
767 0
768 0
769 0
770 0
771 0
772 0
773 0
774 0
775 0
776 0
777 0
778 0
779 0
780 0
781 0
782 0
783 0
784 0
785 0
786 0
787 0
788 0
789 0
790 0
791 0
792 0
793 0
794 0
795 0
796 0
797 0
798 0
799 0
800 0
801 0
802 1
803 1
804 1
805 1
806 1
807 1
808 0
809 0
810 1
811 1
812 1
813 1
814 1
815 1
816 0
817 0
818 0
819 0
820 0
821 0
822 0
823 0
824 0
825 0
826 0
827 0
828 0
829 0
830 0
831 0
832 1
833 1
834 1
835 1
836 1
837 1
838 1
839 1
840 0
841 0
842 0
843 0
844 0
845 0
846 0
847 0
848 1
849 1
850 1
851 1
852 1
853 1
854 1
855 1
856 0
857 0
858 0
859 0
860 0
861 0
862 0
863 0
864 1
865 1
866 1
867 1
868 1
869 1
870 1
871 1
872 0
873 0
874 0
875 0
876 0
877 0
878 0
879 0
880 1
881 1
882 1
883 1
884 1
885 1
886 1
887 1
888 0
889 0
890 0
891 0
892 0
893 0
894 0
895 0
896 0
897 0
898 0
899 0
900 0
901 0
902 0
903 0
904 0
905 0
906 0
907 0
908 0
909 0
910 0
911 0
912 0
913 0
914 0
915 0
916 0
917 0
918 0
919 0
920 0
921 0
922 0
923 0
924 0
925 0
926 0
927 0
928 0
929 1
930 1
931 1
932 1
933 1
934 1
935 1
936 0
937 1
938 1
939 1
940 1
941 1
942 1
943 1
944 0
945 0
946 0
947 0
948 0
949 0
950 0
951 0
952 0
953 0
954 0
955 0
956 0
957 0
958 0
959 0
960 1
961 1
962 1
963 1
964 1
965 1
966 1
967 1
968 0
969 0
970 0
971 0
972 0
973 0
974 0
975 0
976 1
977 1
978 1
979 1
980 1
981 1
982 1
983 1
984 0
985 0
986 0
987 0
988 0
989 0
990 0
991 0
992 1
993 1
994 1
995 1
996 1
997 1
998 1
999 1
1000 0
1001 0
1002 0
1003 0
1004 0
1005 0
1006 0
1007 0
1008 1
1009 1
1010 1
1011 1
1012 1
1013 1
1014 1
1015 1
1016 0
1017 0
1018 0
1019 0
1020 0
1021 0
1022 0
1023 0
## kleene caching type
VECTOR
## kleene caching vec size
59049
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
person-waiting-down(f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(9) ~(and($s(1) ~($s(6)) ~($s(5))))) : $c(1)) ($c(1) : Bernoulli($c(0.057459753))) )
## determinized formula
and($s(9) ~(and($s(1) ~($s(6)) ~($s(5)))))
## hash index
9
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.942540247 1 0.057459753
1 0 2 0 0.942540247 1 0.057459753
2 0 2 0 0.942540247 1 0.057459753
3 0 2 0 0.942540247 1 0.057459753
4 0 2 0 0.942540247 1 0.057459753
5 0 2 0 0.942540247 1 0.057459753
6 0 2 0 0.942540247 1 0.057459753
7 0 2 0 0.942540247 1 0.057459753
8 1 1 1 1
9 0 2 0 0.942540247 1 0.057459753
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
1
## name
person-waiting-down(f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(10) ~(and($s(2) ~($s(6)) ~($s(5))))) : $c(1)) ($c(1) : Bernoulli($c(0.04761868))) )
## determinized formula
and($s(10) ~(and($s(2) ~($s(6)) ~($s(5)))))
## hash index
10
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.95238132 1 0.04761868
1 0 2 0 0.95238132 1 0.04761868
2 0 2 0 0.95238132 1 0.04761868
3 0 2 0 0.95238132 1 0.04761868
4 0 2 0 0.95238132 1 0.04761868
5 0 2 0 0.95238132 1 0.04761868
6 0 2 0 0.95238132 1 0.04761868
7 0 2 0 0.95238132 1 0.04761868
8 1 1 1 1
9 0 2 0 0.95238132 1 0.04761868
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
2
## name
person-waiting-down(f3)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(11) ~(and($s(3) ~($s(6)) ~($s(5))))) : $c(1)) ($c(1) : Bernoulli($c(0.041935332))) )
## determinized formula
and($s(11) ~(and($s(3) ~($s(6)) ~($s(5)))))
## hash index
11
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.958064668 1 0.041935332
1 0 2 0 0.958064668 1 0.041935332
2 0 2 0 0.958064668 1 0.041935332
3 0 2 0 0.958064668 1 0.041935332
4 0 2 0 0.958064668 1 0.041935332
5 0 2 0 0.958064668 1 0.041935332
6 0 2 0 0.958064668 1 0.041935332
7 0 2 0 0.958064668 1 0.041935332
8 1 1 1 1
9 0 2 0 0.958064668 1 0.041935332
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
3
## name
person-waiting-up(f1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(12) ~(and($s(1) $s(6) ~($s(5))))) : $c(1)) ($c(1) : Bernoulli($c(0.057459753))) )
## determinized formula
and($s(12) ~(and($s(1) $s(6) ~($s(5)))))
## hash index
12
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.942540247 1 0.057459753
1 0 2 0 0.942540247 1 0.057459753
2 0 2 0 0.942540247 1 0.057459753
3 0 2 0 0.942540247 1 0.057459753
4 0 2 0 0.942540247 1 0.057459753
5 0 2 0 0.942540247 1 0.057459753
6 0 2 0 0.942540247 1 0.057459753
7 0 2 0 0.942540247 1 0.057459753
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 0 2 0 0.942540247 1 0.057459753
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
4
## name
person-waiting-up(f2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(13) ~(and($s(2) $s(6) ~($s(5))))) : $c(1)) ($c(1) : Bernoulli($c(0.04761868))) )
## determinized formula
and($s(13) ~(and($s(2) $s(6) ~($s(5)))))
## hash index
13
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.95238132 1 0.04761868
1 0 2 0 0.95238132 1 0.04761868
2 0 2 0 0.95238132 1 0.04761868
3 0 2 0 0.95238132 1 0.04761868
4 0 2 0 0.95238132 1 0.04761868
5 0 2 0 0.95238132 1 0.04761868
6 0 2 0 0.95238132 1 0.04761868
7 0 2 0 0.95238132 1 0.04761868
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 0 2 0 0.95238132 1 0.04761868
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
5
## name
person-waiting-up(f3)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(14) ~(and($s(3) $s(6) ~($s(5))))) : $c(1)) ($c(1) : Bernoulli($c(0.041935332))) )
## determinized formula
and($s(14) ~(and($s(3) $s(6) ~($s(5)))))
## hash index
14
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.958064668 1 0.041935332
1 0 2 0 0.958064668 1 0.041935332
2 0 2 0 0.958064668 1 0.041935332
3 0 2 0 0.958064668 1 0.041935332
4 0 2 0 0.958064668 1 0.041935332
5 0 2 0 0.958064668 1 0.041935332
6 0 2 0 0.958064668 1 0.041935332
7 0 2 0 0.958064668 1 0.041935332
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 0 2 0 0.958064668 1 0.041935332
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
81
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####REWARD#####
## formula
+(*(and($s(8) $s(6)) $c(-0.75)) *(and($s(7) ~($s(6))) $c(-0.75)) *(and($s(8) ~($s(6))) $c(-3)) *(and($s(7) $s(6)) $c(-3)) -(-($c(0) $s(12)) $s(9)) -(-($c(0) $s(13)) $s(10)) -(-($c(0) $s(14)) $s(11)))
## min
-9.75
## max
0
## independent from actions
1
## hash index
15
## caching type
VECTOR
## precomputed results
512
0 0
1 0
2 -0.75
3 -3
4 -3
5 -0.75
6 -3.75
7 -3.75
8 -1
9 -1
10 -1.75
11 -4
12 -4
13 -1.75
14 -4.75
15 -4.75
16 -1
17 -1
18 -1.75
19 -4
20 -4
21 -1.75
22 -4.75
23 -4.75
24 -2
25 -2
26 -2.75
27 -5
28 -5
29 -2.75
30 -5.75
31 -5.75
32 -1
33 -1
34 -1.75
35 -4
36 -4
37 -1.75
38 -4.75
39 -4.75
40 -2
41 -2
42 -2.75
43 -5
44 -5
45 -2.75
46 -5.75
47 -5.75
48 -2
49 -2
50 -2.75
51 -5
52 -5
53 -2.75
54 -5.75
55 -5.75
56 -3
57 -3
58 -3.75
59 -6
60 -6
61 -3.75
62 -6.75
63 -6.75
64 -1
65 -1
66 -1.75
67 -4
68 -4
69 -1.75
70 -4.75
71 -4.75
72 -2
73 -2
74 -2.75
75 -5
76 -5
77 -2.75
78 -5.75
79 -5.75
80 -2
81 -2
82 -2.75
83 -5
84 -5
85 -2.75
86 -5.75
87 -5.75
88 -3
89 -3
90 -3.75
91 -6
92 -6
93 -3.75
94 -6.75
95 -6.75
96 -2
97 -2
98 -2.75
99 -5
100 -5
101 -2.75
102 -5.75
103 -5.75
104 -3
105 -3
106 -3.75
107 -6
108 -6
109 -3.75
110 -6.75
111 -6.75
112 -3
113 -3
114 -3.75
115 -6
116 -6
117 -3.75
118 -6.75
119 -6.75
120 -4
121 -4
122 -4.75
123 -7
124 -7
125 -4.75
126 -7.75
127 -7.75
128 -1
129 -1
130 -1.75
131 -4
132 -4
133 -1.75
134 -4.75
135 -4.75
136 -2
137 -2
138 -2.75
139 -5
140 -5
141 -2.75
142 -5.75
143 -5.75
144 -2
145 -2
146 -2.75
147 -5
148 -5
149 -2.75
150 -5.75
151 -5.75
152 -3
153 -3
154 -3.75
155 -6
156 -6
157 -3.75
158 -6.75
159 -6.75
160 -2
161 -2
162 -2.75
163 -5
164 -5
165 -2.75
166 -5.75
167 -5.75
168 -3
169 -3
170 -3.75
171 -6
172 -6
173 -3.75
174 -6.75
175 -6.75
176 -3
177 -3
178 -3.75
179 -6
180 -6
181 -3.75
182 -6.75
183 -6.75
184 -4
185 -4
186 -4.75
187 -7
188 -7
189 -4.75
190 -7.75
191 -7.75
192 -2
193 -2
194 -2.75
195 -5
196 -5
197 -2.75
198 -5.75
199 -5.75
200 -3
201 -3
202 -3.75
203 -6
204 -6
205 -3.75
206 -6.75
207 -6.75
208 -3
209 -3
210 -3.75
211 -6
212 -6
213 -3.75
214 -6.75
215 -6.75
216 -4
217 -4
218 -4.75
219 -7
220 -7
221 -4.75
222 -7.75
223 -7.75
224 -3
225 -3
226 -3.75
227 -6
228 -6
229 -3.75
230 -6.75
231 -6.75
232 -4
233 -4
234 -4.75
235 -7
236 -7
237 -4.75
238 -7.75
239 -7.75
240 -4
241 -4
242 -4.75
243 -7
244 -7
245 -4.75
246 -7.75
247 -7.75
248 -5
249 -5
250 -5.75
251 -8
252 -8
253 -5.75
254 -8.75
255 -8.75
256 -1
257 -1
258 -1.75
259 -4
260 -4
261 -1.75
262 -4.75
263 -4.75
264 -2
265 -2
266 -2.75
267 -5
268 -5
269 -2.75
270 -5.75
271 -5.75
272 -2
273 -2
274 -2.75
275 -5
276 -5
277 -2.75
278 -5.75
279 -5.75
280 -3
281 -3
282 -3.75
283 -6
284 -6
285 -3.75
286 -6.75
287 -6.75
288 -2
289 -2
290 -2.75
291 -5
292 -5
293 -2.75
294 -5.75
295 -5.75
296 -3
297 -3
298 -3.75
299 -6
300 -6
301 -3.75
302 -6.75
303 -6.75
304 -3
305 -3
306 -3.75
307 -6
308 -6
309 -3.75
310 -6.75
311 -6.75
312 -4
313 -4
314 -4.75
315 -7
316 -7
317 -4.75
318 -7.75
319 -7.75
320 -2
321 -2
322 -2.75
323 -5
324 -5
325 -2.75
326 -5.75
327 -5.75
328 -3
329 -3
330 -3.75
331 -6
332 -6
333 -3.75
334 -6.75
335 -6.75
336 -3
337 -3
338 -3.75
339 -6
340 -6
341 -3.75
342 -6.75
343 -6.75
344 -4
345 -4
346 -4.75
347 -7
348 -7
349 -4.75
350 -7.75
351 -7.75
352 -3
353 -3
354 -3.75
355 -6
356 -6
357 -3.75
358 -6.75
359 -6.75
360 -4
361 -4
362 -4.75
363 -7
364 -7
365 -4.75
366 -7.75
367 -7.75
368 -4
369 -4
370 -4.75
371 -7
372 -7
373 -4.75
374 -7.75
375 -7.75
376 -5
377 -5
378 -5.75
379 -8
380 -8
381 -5.75
382 -8.75
383 -8.75
384 -2
385 -2
386 -2.75
387 -5
388 -5
389 -2.75
390 -5.75
391 -5.75
392 -3
393 -3
394 -3.75
395 -6
396 -6
397 -3.75
398 -6.75
399 -6.75
400 -3
401 -3
402 -3.75
403 -6
404 -6
405 -3.75
406 -6.75
407 -6.75
408 -4
409 -4
410 -4.75
411 -7
412 -7
413 -4.75
414 -7.75
415 -7.75
416 -3
417 -3
418 -3.75
419 -6
420 -6
421 -3.75
422 -6.75
423 -6.75
424 -4
425 -4
426 -4.75
427 -7
428 -7
429 -4.75
430 -7.75
431 -7.75
432 -4
433 -4
434 -4.75
435 -7
436 -7
437 -4.75
438 -7.75
439 -7.75
440 -5
441 -5
442 -5.75
443 -8
444 -8
445 -5.75
446 -8.75
447 -8.75
448 -3
449 -3
450 -3.75
451 -6
452 -6
453 -3.75
454 -6.75
455 -6.75
456 -4
457 -4
458 -4.75
459 -7
460 -7
461 -4.75
462 -7.75
463 -7.75
464 -4
465 -4
466 -4.75
467 -7
468 -7
469 -4.75
470 -7.75
471 -7.75
472 -5
473 -5
474 -5.75
475 -8
476 -8
477 -5.75
478 -8.75
479 -8.75
480 -4
481 -4
482 -4.75
483 -7
484 -7
485 -4.75
486 -7.75
487 -7.75
488 -5
489 -5
490 -5.75
491 -8
492 -8
493 -5.75
494 -8.75
495 -8.75
496 -5
497 -5
498 -5.75
499 -8
500 -8
501 -5.75
502 -8.75
503 -8.75
504 -6
505 -6
506 -6.75
507 -9
508 -9
509 -6.75
510 -9.75
511 -9.75
## kleene caching type
VECTOR
## kleene caching vec size
19683
## action hash keys
0 0
1 0
2 0
3 0
4 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 1 0 0 
## relevant preconditions
0


## index
4
## state
1 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
3
0 2
1 2
7 1
## kleene state fluent hash keys (first line is the number of keys)
3
0 2
1 2
7 1

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
7
0 4
1 4
2 2
7 2
8 1
9 1
12 1
## kleene state fluent hash keys (first line is the number of keys)
7
0 6
1 6
2 2
7 3
8 1
9 1
12 1

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
7
1 8
2 4
3 2
7 4
8 2
10 1
13 1
## kleene state fluent hash keys (first line is the number of keys)
7
1 18
2 6
3 2
7 9
8 3
10 1
13 1

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
7
2 8
3 4
4 2
7 8
8 4
11 1
14 1
## kleene state fluent hash keys (first line is the number of keys)
7
2 18
3 6
4 2
7 27
8 9
11 1
14 1

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
3
3 8
4 4
8 8
## kleene state fluent hash keys (first line is the number of keys)
3
3 18
4 6
8 27

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
14
0 8
1 16
2 16
3 16
4 8
5 4
7 16
8 16
9 2
10 2
11 2
12 2
13 2
14 2
## kleene state fluent hash keys (first line is the number of keys)
14
0 18
1 54
2 54
3 54
4 18
5 4
7 81
8 81
9 3
10 3
11 3
12 3
13 3
14 3

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
15
0 16
1 32
2 32
3 32
4 16
6 3
7 32
8 32
9 4
10 4
11 4
12 4
13 4
14 4
15 1
## kleene state fluent hash keys (first line is the number of keys)
15
0 54
1 162
2 162
3 162
4 54
6 3
7 243
8 243
9 9
10 9
11 9
12 9
13 9
14 9
15 1

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
2
7 64
15 2
## kleene state fluent hash keys (first line is the number of keys)
2
7 729
15 3

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
2
8 64
15 4
## kleene state fluent hash keys (first line is the number of keys)
2
8 729
15 9


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
3
7 128
9 8
15 8
## kleene state fluent hash keys (first line is the number of keys)
3
7 2187
9 27
15 27

## index
1
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
3
7 256
10 8
15 16
## kleene state fluent hash keys (first line is the number of keys)
3
7 6561
10 27
15 81

## index
2
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
3
7 512
11 8
15 32
## kleene state fluent hash keys (first line is the number of keys)
3
7 19683
11 27
15 243

## index
3
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
531441
## state fluent hash keys (first line is the number of keys)
3
8 128
12 8
15 64
## kleene state fluent hash keys (first line is the number of keys)
3
8 2187
12 27
15 729

## index
4
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
1594323
## state fluent hash keys (first line is the number of keys)
3
8 256
13 8
15 128
## kleene state fluent hash keys (first line is the number of keys)
3
8 6561
13 27
15 2187

## index
5
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
4782969
## state fluent hash keys (first line is the number of keys)
3
8 512
14 8
15 256
## kleene state fluent hash keys (first line is the number of keys)
3
8 19683
14 27
15 6561



#####TRAINING SET#####
200
1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 
0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 
0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 
0 0 1 0 0 1 0 1 1 0 0 0 0 0 0 
0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 
0 0 0 0 1 1 0 1 0 1 0 0 0 0 0 
0 0 1 0 0 1 1 1 0 1 0 0 0 0 0 
0 1 0 0 0 1 1 0 1 1 0 0 0 0 0 
1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 
0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 
0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 
0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 
0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 
0 0 0 1 0 1 1 0 0 1 1 0 0 0 0 
0 1 0 0 0 0 0 0 1 1 1 0 0 0 0 
0 0 0 1 0 0 1 0 1 1 1 0 0 0 0 
0 1 0 0 0 1 0 1 1 1 1 0 0 0 0 
0 1 0 0 0 1 1 0 0 0 0 1 0 0 0 
0 1 0 0 0 0 1 0 1 0 0 1 0 0 0 
0 1 0 0 0 1 1 0 1 0 0 1 0 0 0 
0 0 0 1 0 1 1 0 1 0 0 1 0 0 0 
0 0 0 1 0 0 0 1 1 0 0 1 0 0 0 
0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 
0 1 0 0 0 0 0 1 1 1 0 1 0 0 0 
0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 
0 0 0 1 0 1 0 1 0 1 1 1 0 0 0 
0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 
0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 
0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 
0 0 0 0 1 0 0 1 0 1 0 0 1 0 0 
0 1 0 0 0 1 0 1 1 1 0 0 1 0 0 
0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 
0 0 0 1 0 1 1 1 1 0 1 0 1 0 0 
0 1 0 0 0 0 0 0 0 1 1 0 1 0 0 
0 0 0 0 1 1 0 0 0 1 1 0 1 0 0 
0 1 0 0 0 0 0 0 1 1 1 0 1 0 0 
0 0 1 0 0 1 1 0 1 1 1 0 1 0 0 
0 0 0 1 0 1 1 0 1 1 1 0 1 0 0 
1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 
0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 
0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 
0 0 0 0 1 1 1 0 0 0 0 1 1 0 0 
0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 
0 0 0 1 0 0 0 1 1 0 0 1 1 0 0 
0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 
0 1 0 0 0 0 1 0 0 1 0 1 1 0 0 
0 0 1 0 0 1 0 1 0 1 0 1 1 0 0 
1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 
0 0 0 1 0 0 1 0 0 0 1 1 1 0 0 
0 1 0 0 0 0 0 1 0 0 1 1 1 0 0 
0 0 1 0 0 0 0 0 1 0 1 1 1 0 0 
0 0 0 1 0 1 0 0 0 1 1 1 1 0 0 
1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 
0 0 0 0 1 1 1 0 1 1 1 1 1 0 0 
0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 
1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 
0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 
0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 
0 0 0 1 0 0 0 0 1 0 1 0 0 1 0 
1 0 0 0 0 1 0 1 1 0 1 0 0 1 0 
0 0 1 0 0 0 1 0 0 0 0 1 0 1 0 
0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 
0 0 0 1 0 1 1 1 0 0 0 1 0 1 0 
1 0 0 0 0 1 0 0 0 1 0 1 0 1 0 
0 0 0 0 1 1 1 1 0 1 0 1 0 1 0 
0 0 1 0 0 0 1 0 1 1 0 1 0 1 0 
0 1 0 0 0 1 1 1 1 1 0 1 0 1 0 
0 1 0 0 0 0 1 1 0 0 1 1 0 1 0 
0 0 1 0 0 1 1 1 0 0 1 1 0 1 0 
0 0 0 0 1 1 1 1 0 0 1 1 0 1 0 
0 1 0 0 0 1 0 1 1 0 1 1 0 1 0 
0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 
0 0 0 1 0 0 0 1 1 1 1 1 0 1 0 
1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 
0 0 0 0 1 1 1 0 0 0 0 0 1 1 0 
0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 
0 0 0 1 0 1 1 0 0 1 0 0 1 1 0 
0 0 1 0 0 1 0 1 0 1 0 0 1 1 0 
0 1 0 0 0 0 0 0 0 0 1 0 1 1 0 
0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 
0 1 0 0 0 1 0 1 0 0 1 0 1 1 0 
0 0 0 0 1 0 0 0 0 1 1 0 1 1 0 
0 0 0 0 1 0 0 1 0 1 1 0 1 1 0 
0 0 1 0 0 1 0 1 0 1 1 0 1 1 0 
0 0 0 0 1 1 1 1 0 1 1 0 1 1 0 
0 0 1 0 0 0 0 0 1 1 1 0 1 1 0 
0 0 1 0 0 1 0 0 1 1 1 0 1 1 0 
0 0 0 1 0 0 1 1 1 1 1 0 1 1 0 
0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 
0 0 1 0 0 1 0 1 1 0 0 1 1 1 0 
0 0 0 1 0 1 1 0 0 1 0 1 1 1 0 
0 1 0 0 0 1 0 1 0 1 0 1 1 1 0 
1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 
0 1 0 0 0 0 1 0 1 1 0 1 1 1 0 
0 1 0 0 0 1 0 1 1 1 0 1 1 1 0 
0 0 0 1 0 1 0 1 1 1 0 1 1 1 0 
0 0 1 0 0 0 1 1 1 1 0 1 1 1 0 
0 0 1 0 0 0 0 0 0 0 1 1 1 1 0 
0 0 0 0 1 1 1 1 1 0 1 1 1 1 0 
0 0 0 1 0 0 1 0 0 1 1 1 1 1 0 
0 0 0 1 0 0 0 1 0 1 1 1 1 1 0 
0 0 0 1 0 0 1 1 0 1 1 1 1 1 0 
0 1 0 0 0 0 1 0 1 1 1 1 1 1 0 
0 0 0 1 0 0 1 0 1 1 1 1 1 1 0 
0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 
0 1 0 0 0 1 0 0 1 0 0 0 0 0 1 
0 0 0 0 1 1 1 0 1 0 0 0 0 0 1 
0 0 1 0 0 0 0 1 0 1 0 0 0 0 1 
0 0 0 1 0 1 0 1 0 1 0 0 0 0 1 
1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 
0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 
0 0 1 0 0 1 1 1 1 0 1 0 0 0 1 
0 1 0 0 0 0 0 0 0 1 1 0 0 0 1 
0 0 1 0 0 0 1 1 0 1 1 0 0 0 1 
0 0 1 0 0 0 1 0 1 1 1 0 0 0 1 
0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 
0 0 0 1 0 1 1 1 1 1 1 0 0 0 1 
0 0 1 0 0 1 0 0 0 0 0 1 0 0 1 
0 1 0 0 0 1 0 1 0 0 0 1 0 0 1 
0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 
0 0 1 0 0 0 0 1 1 0 0 1 0 0 1 
0 0 1 0 0 0 1 0 0 1 0 1 0 0 1 
0 0 0 0 1 1 0 1 0 1 0 1 0 0 1 
0 1 0 0 0 0 1 1 0 1 0 1 0 0 1 
0 0 0 0 1 1 1 1 0 1 0 1 0 0 1 
0 1 0 0 0 0 0 1 1 1 0 1 0 0 1 
0 0 1 0 0 0 0 0 1 0 1 1 0 0 1 
0 0 0 0 1 0 1 0 0 1 1 1 0 0 1 
0 0 1 0 0 0 1 0 1 1 1 1 0 0 1 
0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 
0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 
0 1 0 0 0 0 1 0 1 0 0 0 1 0 1 
0 0 0 1 0 0 1 1 0 1 0 0 1 0 1 
0 0 0 1 0 1 1 0 0 0 1 0 1 0 1 
0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 
0 1 0 0 0 0 1 1 1 0 1 0 1 0 1 
0 0 0 1 0 0 0 0 0 1 1 0 1 0 1 
1 0 0 0 0 1 0 0 0 1 1 0 1 0 1 
0 1 0 0 0 0 1 0 0 1 1 0 1 0 1 
0 1 0 0 0 1 1 0 0 1 1 0 1 0 1 
0 0 1 0 0 1 1 0 1 1 1 0 1 0 1 
1 0 0 0 0 0 0 0 0 1 0 1 1 0 1 
0 0 1 0 0 1 0 1 0 1 0 1 1 0 1 
0 0 0 0 1 1 1 1 0 1 0 1 1 0 1 
0 1 0 0 0 0 1 0 1 1 0 1 1 0 1 
0 0 1 0 0 0 1 1 1 1 0 1 1 0 1 
0 0 0 0 1 1 1 1 1 1 0 1 1 0 1 
0 0 0 0 1 0 0 0 0 0 1 1 1 0 1 
0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 
0 0 0 0 1 1 0 0 0 0 1 1 1 0 1 
0 0 1 0 0 0 0 1 0 0 1 1 1 0 1 
0 1 0 0 0 1 0 1 0 0 1 1 1 0 1 
0 0 0 0 1 1 1 0 0 1 1 1 1 0 1 
1 0 0 0 0 1 1 0 1 1 1 1 1 0 1 
0 1 0 0 0 0 1 1 1 1 1 1 1 0 1 
0 0 0 1 0 1 1 1 1 1 1 1 1 0 1 
0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 
0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 
1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 
1 0 0 0 0 1 1 0 1 0 0 0 0 1 1 
0 1 0 0 0 1 1 1 0 1 0 0 0 1 1 
0 1 0 0 0 0 0 0 1 1 0 0 0 1 1 
0 1 0 0 0 0 1 0 1 1 0 0 0 1 1 
0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 
0 0 0 0 1 0 0 0 0 1 1 0 0 1 1 
0 0 1 0 0 0 1 0 0 0 0 1 0 1 1 
0 0 0 0 1 1 1 0 0 0 0 1 0 1 1 
0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 
0 0 1 0 0 0 1 1 1 0 0 1 0 1 1 
0 0 1 0 0 1 0 0 1 1 0 1 0 1 1 
1 0 0 0 0 1 1 0 1 1 0 1 0 1 1 
0 0 1 0 0 0 0 1 1 1 0 1 0 1 1 
0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 
0 1 0 0 0 0 1 1 0 0 1 1 0 1 1 
0 0 1 0 0 1 1 1 0 0 1 1 0 1 1 
0 1 0 0 0 1 1 0 1 0 1 1 0 1 1 
0 0 0 1 0 1 1 0 1 0 1 1 0 1 1 
0 0 1 0 0 0 0 1 1 0 1 1 0 1 1 
1 0 0 0 0 1 0 0 0 1 1 1 0 1 1 
0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 
0 0 1 0 0 1 0 1 1 0 0 0 1 1 1 
0 0 0 1 0 0 1 1 1 0 0 0 1 1 1 
0 1 0 0 0 0 1 1 0 1 0 0 1 1 1 
0 0 0 1 0 1 1 1 0 1 0 0 1 1 1 
0 0 0 1 0 0 0 1 1 1 0 0 1 1 1 
1 0 0 0 0 0 0 0 0 0 1 0 1 1 1 
0 0 1 0 0 1 0 0 0 0 1 0 1 1 1 
0 1 0 0 0 1 1 0 1 0 1 0 1 1 1 
0 1 0 0 0 0 1 1 1 0 1 0 1 1 1 
1 0 0 0 0 1 0 0 0 1 1 0 1 1 1 
0 0 1 0 0 1 0 0 1 1 1 0 1 1 1 
0 1 0 0 0 0 1 1 1 1 1 0 1 1 1 
1 0 0 0 0 1 0 1 1 0 0 1 1 1 1 
0 0 0 1 0 1 0 1 0 1 0 1 1 1 1 
1 0 0 0 0 1 1 0 1 1 0 1 1 1 1 
1 0 0 0 0 1 0 0 0 1 1 1 1 1 1 
1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 
0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 
