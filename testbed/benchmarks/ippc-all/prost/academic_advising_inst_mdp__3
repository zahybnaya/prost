#####TASK#####
## name
academic_advising_inst_mdp__3
## horizon
40
## discount factor
1
## number of action fluents
15
## number of det state fluents
15
## number of prob state fluents
15
## number of preconds
0
## number of actions
16
## number of hashing functions
31
## initial state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
1
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
10104
## number of unique states that were encountered during task analysis
4694
## number of states with only one applicable reasonable action that were encountered during task analysis
1528
## number of unique states with only one applicable reasonable action that were encountered during task analysis
1


#####ACTION FLUENTS#####
## index
0
## name
takeCourse(CS11)
## number of values
2
## values
0 false
1 true

## index
1
## name
takeCourse(CS12)
## number of values
2
## values
0 false
1 true

## index
2
## name
takeCourse(CS13)
## number of values
2
## values
0 false
1 true

## index
3
## name
takeCourse(CS21)
## number of values
2
## values
0 false
1 true

## index
4
## name
takeCourse(CS22)
## number of values
2
## values
0 false
1 true

## index
5
## name
takeCourse(CS23)
## number of values
2
## values
0 false
1 true

## index
6
## name
takeCourse(CS31)
## number of values
2
## values
0 false
1 true

## index
7
## name
takeCourse(CS32)
## number of values
2
## values
0 false
1 true

## index
8
## name
takeCourse(CS33)
## number of values
2
## values
0 false
1 true

## index
9
## name
takeCourse(CS41)
## number of values
2
## values
0 false
1 true

## index
10
## name
takeCourse(CS42)
## number of values
2
## values
0 false
1 true

## index
11
## name
takeCourse(CS43)
## number of values
2
## values
0 false
1 true

## index
12
## name
takeCourse(CS51)
## number of values
2
## values
0 false
1 true

## index
13
## name
takeCourse(CS52)
## number of values
2
## values
0 false
1 true

## index
14
## name
takeCourse(CS53)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
taken(CS11)
## number of values
2
## values
0 false
1 true
## formula
or($s(0) $a(0))
## hash index
0
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1

## index
1
## name
taken(CS12)
## number of values
2
## values
0 false
1 true
## formula
or($s(1) $a(1))
## hash index
1
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 1
15 0

## index
2
## name
taken(CS13)
## number of values
2
## values
0 false
1 true
## formula
or($s(2) $a(2))
## hash index
2
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 0
15 0

## index
3
## name
taken(CS21)
## number of values
2
## values
0 false
1 true
## formula
or($s(3) $a(3))
## hash index
3
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 1
13 0
14 0
15 0

## index
4
## name
taken(CS22)
## number of values
2
## values
0 false
1 true
## formula
or($s(4) $a(4))
## hash index
4
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 1
12 0
13 0
14 0
15 0

## index
5
## name
taken(CS23)
## number of values
2
## values
0 false
1 true
## formula
or($s(5) $a(5))
## hash index
5
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 0
12 0
13 0
14 0
15 0

## index
6
## name
taken(CS31)
## number of values
2
## values
0 false
1 true
## formula
or($s(6) $a(6))
## hash index
6
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 0
11 0
12 0
13 0
14 0
15 0

## index
7
## name
taken(CS32)
## number of values
2
## values
0 false
1 true
## formula
or($s(7) $a(7))
## hash index
7
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
8
## name
taken(CS33)
## number of values
2
## values
0 false
1 true
## formula
or($s(8) $a(8))
## hash index
8
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
9
## name
taken(CS41)
## number of values
2
## values
0 false
1 true
## formula
or($s(9) $a(9))
## hash index
9
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
10
## name
taken(CS42)
## number of values
2
## values
0 false
1 true
## formula
or($s(10) $a(10))
## hash index
10
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
11
## name
taken(CS43)
## number of values
2
## values
0 false
1 true
## formula
or($s(11) $a(11))
## hash index
11
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
12
## name
taken(CS51)
## number of values
2
## values
0 false
1 true
## formula
or($s(12) $a(12))
## hash index
12
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
13
## name
taken(CS52)
## number of values
2
## values
0 false
1 true
## formula
or($s(13) $a(13))
## hash index
13
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
14
## name
taken(CS53)
## number of values
2
## values
0 false
1 true
## formula
or($s(14) $a(14))
## hash index
14
## caching type 
VECTOR
## precomputed results
4
0 0
1 1
2 1
3 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
passed(CS11)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(0) ~($s(15))) : Bernoulli($c(0.8))) ($c(1) : $s(15)) )
## determinized formula
switch( (and($a(0) ~($s(15))) : $c(1)) ($c(1) : $s(15)) )
## hash index
15
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
4
0 0 1 0 1
1 1 2 0 0.2 1 0.8
2 1 1 1 1
3 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1

## index
1
## name
passed(CS12)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(1) ~($s(16))) : Bernoulli($c(0.8))) ($c(1) : $s(16)) )
## determinized formula
switch( (and($a(1) ~($s(16))) : $c(1)) ($c(1) : $s(16)) )
## hash index
16
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
4
0 0 1 0 1
1 1 2 0 0.2 1 0.8
2 1 1 1 1
3 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 1
15 0

## index
2
## name
passed(CS13)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(2) ~($s(17))) : Bernoulli($c(0.8))) ($c(1) : $s(17)) )
## determinized formula
switch( (and($a(2) ~($s(17))) : $c(1)) ($c(1) : $s(17)) )
## hash index
17
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
4
0 0 1 0 1
1 1 2 0 0.2 1 0.8
2 1 1 1 1
3 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 0
15 0

## index
3
## name
passed(CS21)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(3) ~($s(18))) : Bernoulli(+(*(/($s(16) $c(2)) $c(0.8)) $c(0.2)))) ($c(1) : $s(18)) )
## determinized formula
switch( (and($a(3) ~($s(18))) : <=($c(0.5) +(*(/($s(16) $c(2)) $c(0.8)) $c(0.2)))) ($c(1) : $s(18)) )
## hash index
18
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 1 2 0 0.4 1 0.6
4 1 1 1 1
5 1 1 1 1
6 1 1 1 1
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 1
13 0
14 0
15 0

## index
4
## name
passed(CS22)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(4) ~($s(19))) : Bernoulli(+(*(/(+($s(15) $s(17)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(19)) )
## determinized formula
switch( (and($a(4) ~($s(19))) : <=($c(0.5) +(*(/(+($s(15) $s(17)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(19)) )
## hash index
19
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.533333333333333 1 0.466666666666667
4 0 1 0 1
5 0 2 0 0.533333333333333 1 0.466666666666667
6 0 1 0 1
7 1 2 0 0.266666666666667 1 0.733333333333333
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 1
12 0
13 0
14 0
15 0

## index
5
## name
passed(CS23)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(5) ~($s(20))) : Bernoulli(+(*(/(+($s(15) $s(19)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(20)) )
## determinized formula
switch( (and($a(5) ~($s(20))) : <=($c(0.5) +(*(/(+($s(15) $s(19)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(20)) )
## hash index
20
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.533333333333333 1 0.466666666666667
4 0 1 0 1
5 0 2 0 0.533333333333333 1 0.466666666666667
6 0 1 0 1
7 1 2 0 0.266666666666667 1 0.733333333333333
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 0
12 0
13 0
14 0
15 0

## index
6
## name
passed(CS31)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(6) ~($s(21))) : Bernoulli(+(*(/(+($s(15) $s(16)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(21)) )
## determinized formula
switch( (and($a(6) ~($s(21))) : <=($c(0.5) +(*(/(+($s(15) $s(16)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(21)) )
## hash index
21
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.533333333333333 1 0.466666666666667
4 0 1 0 1
5 0 2 0 0.533333333333333 1 0.466666666666667
6 0 1 0 1
7 1 2 0 0.266666666666667 1 0.733333333333333
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 0
11 0
12 0
13 0
14 0
15 0

## index
7
## name
passed(CS32)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(7) ~($s(22))) : Bernoulli(+(*(/(+($s(15) $s(19) $s(20)) $c(4)) $c(0.8)) $c(0.2)))) ($c(1) : $s(22)) )
## determinized formula
switch( (and($a(7) ~($s(22))) : <=($c(0.5) +(*(/(+($s(15) $s(19) $s(20)) $c(4)) $c(0.8)) $c(0.2)))) ($c(1) : $s(22)) )
## hash index
22
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.6 1 0.4
4 0 1 0 1
5 0 2 0 0.6 1 0.4
6 0 1 0 1
7 1 2 0 0.4 1 0.6
8 0 1 0 1
9 0 2 0 0.6 1 0.4
10 0 1 0 1
11 1 2 0 0.4 1 0.6
12 0 1 0 1
13 1 2 0 0.4 1 0.6
14 0 1 0 1
15 1 2 0 0.2 1 0.8
16 1 1 1 1
17 1 1 1 1
18 1 1 1 1
19 1 1 1 1
20 1 1 1 1
21 1 1 1 1
22 1 1 1 1
23 1 1 1 1
24 1 1 1 1
25 1 1 1 1
26 1 1 1 1
27 1 1 1 1
28 1 1 1 1
29 1 1 1 1
30 1 1 1 1
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
8
## name
passed(CS33)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(8) ~($s(23))) : Bernoulli(+(*(/(+($s(15) $s(17)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(23)) )
## determinized formula
switch( (and($a(8) ~($s(23))) : <=($c(0.5) +(*(/(+($s(15) $s(17)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(23)) )
## hash index
23
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.533333333333333 1 0.466666666666667
4 0 1 0 1
5 0 2 0 0.533333333333333 1 0.466666666666667
6 0 1 0 1
7 1 2 0 0.266666666666667 1 0.733333333333333
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
9
## name
passed(CS41)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(9) ~($s(24))) : Bernoulli(+(*(/($s(16) $c(2)) $c(0.8)) $c(0.2)))) ($c(1) : $s(24)) )
## determinized formula
switch( (and($a(9) ~($s(24))) : <=($c(0.5) +(*(/($s(16) $c(2)) $c(0.8)) $c(0.2)))) ($c(1) : $s(24)) )
## hash index
24
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 1 2 0 0.4 1 0.6
4 1 1 1 1
5 1 1 1 1
6 1 1 1 1
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
10
## name
passed(CS42)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(10) ~($s(25))) : Bernoulli(+(*(/(+($s(16) $s(19)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(25)) )
## determinized formula
switch( (and($a(10) ~($s(25))) : <=($c(0.5) +(*(/(+($s(16) $s(19)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(25)) )
## hash index
25
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.533333333333333 1 0.466666666666667
4 0 1 0 1
5 0 2 0 0.533333333333333 1 0.466666666666667
6 0 1 0 1
7 1 2 0 0.266666666666667 1 0.733333333333333
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
11
## name
passed(CS43)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(11) ~($s(26))) : Bernoulli(+(*(/(+($s(15) $s(16) $s(19)) $c(4)) $c(0.8)) $c(0.2)))) ($c(1) : $s(26)) )
## determinized formula
switch( (and($a(11) ~($s(26))) : <=($c(0.5) +(*(/(+($s(15) $s(16) $s(19)) $c(4)) $c(0.8)) $c(0.2)))) ($c(1) : $s(26)) )
## hash index
26
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.6 1 0.4
4 0 1 0 1
5 0 2 0 0.6 1 0.4
6 0 1 0 1
7 1 2 0 0.4 1 0.6
8 0 1 0 1
9 0 2 0 0.6 1 0.4
10 0 1 0 1
11 1 2 0 0.4 1 0.6
12 0 1 0 1
13 1 2 0 0.4 1 0.6
14 0 1 0 1
15 1 2 0 0.2 1 0.8
16 1 1 1 1
17 1 1 1 1
18 1 1 1 1
19 1 1 1 1
20 1 1 1 1
21 1 1 1 1
22 1 1 1 1
23 1 1 1 1
24 1 1 1 1
25 1 1 1 1
26 1 1 1 1
27 1 1 1 1
28 1 1 1 1
29 1 1 1 1
30 1 1 1 1
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
12
## name
passed(CS51)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(12) ~($s(27))) : Bernoulli(+(*(/(+($s(21) $s(23)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(27)) )
## determinized formula
switch( (and($a(12) ~($s(27))) : <=($c(0.5) +(*(/(+($s(21) $s(23)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(27)) )
## hash index
27
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.533333333333333 1 0.466666666666667
4 0 1 0 1
5 0 2 0 0.533333333333333 1 0.466666666666667
6 0 1 0 1
7 1 2 0 0.266666666666667 1 0.733333333333333
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
13
## name
passed(CS52)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(13) ~($s(28))) : Bernoulli(+(*(/($s(25) $c(2)) $c(0.8)) $c(0.2)))) ($c(1) : $s(28)) )
## determinized formula
switch( (and($a(13) ~($s(28))) : <=($c(0.5) +(*(/($s(25) $c(2)) $c(0.8)) $c(0.2)))) ($c(1) : $s(28)) )
## hash index
28
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 1 2 0 0.4 1 0.6
4 1 1 1 1
5 1 1 1 1
6 1 1 1 1
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0

## index
14
## name
passed(CS53)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($a(14) ~($s(29))) : Bernoulli(+(*(/(+($s(23) $s(28)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(29)) )
## determinized formula
switch( (and($a(14) ~($s(29))) : <=($c(0.5) +(*(/(+($s(23) $s(28)) $c(3)) $c(0.8)) $c(0.2)))) ($c(1) : $s(29)) )
## hash index
29
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 1 0 1
1 0 2 0 0.8 1 0.2
2 0 1 0 1
3 0 2 0 0.533333333333333 1 0.466666666666667
4 0 1 0 1
5 0 2 0 0.533333333333333 1 0.466666666666667
6 0 1 0 1
7 1 2 0 0.266666666666667 1 0.733333333333333
8 1 1 1 1
9 1 1 1 1
10 1 1 1 1
11 1 1 1 1
12 1 1 1 1
13 1 1 1 1
14 1 1 1 1
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0



#####REWARD#####
## formula
+(*(and($a(0) ~($s(0))) $c(-1)) *(and($a(1) ~($s(1))) $c(-1)) *(and($a(2) ~($s(2))) $c(-1)) *(and($a(3) ~($s(3))) $c(-1)) *(and($a(4) ~($s(4))) $c(-1)) *(and($a(5) ~($s(5))) $c(-1)) *(and($a(6) ~($s(6))) $c(-1)) *(and($a(7) ~($s(7))) $c(-1)) *(and($a(8) ~($s(8))) $c(-1)) *(and($a(9) ~($s(9))) $c(-1)) *(and($a(10) ~($s(10))) $c(-1)) *(and($a(11) ~($s(11))) $c(-1)) *(and($a(12) ~($s(12))) $c(-1)) *(and($a(13) ~($s(13))) $c(-1)) *(and($a(14) ~($s(14))) $c(-1)) *(and($a(0) $s(0)) $c(-2)) *(and($a(1) $s(1)) $c(-2)) *(and($a(2) $s(2)) $c(-2)) *(and($a(3) $s(3)) $c(-2)) *(and($a(4) $s(4)) $c(-2)) *(and($a(5) $s(5)) $c(-2)) *(and($a(6) $s(6)) $c(-2)) *(and($a(7) $s(7)) $c(-2)) *(and($a(8) $s(8)) $c(-2)) *(and($a(9) $s(9)) $c(-2)) *(and($a(10) $s(10)) $c(-2)) *(and($a(11) $s(11)) $c(-2)) *(and($a(12) $s(12)) $c(-2)) *(and($a(13) $s(13)) $c(-2)) *(and($a(14) $s(14)) $c(-2)) *(~(and($s(16) $s(17) $s(21) $s(24))) $c(-5)))
## min
-8
## max
30
## independent from actions
0
## hash index
30
## caching type
MAP
## kleene caching type
MAP
## action hash keys
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
11 11
12 12
13 13
14 14
15 15


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
4
## state
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
## relevant preconditions
0


## index
5
## state
0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
6
## state
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
## relevant preconditions
0


## index
7
## state
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
## relevant preconditions
0


## index
8
## state
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
9
## state
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
10
## state
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
11
## state
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
12
## state
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
13
## state
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
14
## state
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
15
## state
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
1
## state fluent hash keys (first line is the number of keys)
2
0 2
30 16
## kleene state fluent hash keys (first line is the number of keys)
2
0 2
30 16

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
3
## state fluent hash keys (first line is the number of keys)
2
1 2
30 32
## kleene state fluent hash keys (first line is the number of keys)
2
1 2
30 48

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
9
## state fluent hash keys (first line is the number of keys)
2
2 2
30 64
## kleene state fluent hash keys (first line is the number of keys)
2
2 2
30 144

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
27
## state fluent hash keys (first line is the number of keys)
2
3 2
30 128
## kleene state fluent hash keys (first line is the number of keys)
2
3 2
30 432

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
81
## state fluent hash keys (first line is the number of keys)
2
4 2
30 256
## kleene state fluent hash keys (first line is the number of keys)
2
4 2
30 1296

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
243
## state fluent hash keys (first line is the number of keys)
2
5 2
30 512
## kleene state fluent hash keys (first line is the number of keys)
2
5 2
30 3888

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
729
## state fluent hash keys (first line is the number of keys)
2
6 2
30 1024
## kleene state fluent hash keys (first line is the number of keys)
2
6 2
30 11664

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
2187
## state fluent hash keys (first line is the number of keys)
2
7 2
30 2048
## kleene state fluent hash keys (first line is the number of keys)
2
7 2
30 34992

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
6561
## state fluent hash keys (first line is the number of keys)
2
8 2
30 4096
## kleene state fluent hash keys (first line is the number of keys)
2
8 2
30 104976

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
19683
## state fluent hash keys (first line is the number of keys)
2
9 2
30 8192
## kleene state fluent hash keys (first line is the number of keys)
2
9 2
30 314928

## index
10
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
59049
## state fluent hash keys (first line is the number of keys)
2
10 2
30 16384
## kleene state fluent hash keys (first line is the number of keys)
2
10 2
30 944784

## index
11
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
177147
## state fluent hash keys (first line is the number of keys)
2
11 2
30 32768
## kleene state fluent hash keys (first line is the number of keys)
2
11 2
30 2834352

## index
12
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
531441
## state fluent hash keys (first line is the number of keys)
2
12 2
30 65536
## kleene state fluent hash keys (first line is the number of keys)
2
12 2
30 8503056

## index
13
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
1594323
## state fluent hash keys (first line is the number of keys)
2
13 2
30 131072
## kleene state fluent hash keys (first line is the number of keys)
2
13 2
30 25509168

## index
14
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
4782969
## state fluent hash keys (first line is the number of keys)
2
14 2
30 262144
## kleene state fluent hash keys (first line is the number of keys)
2
14 2
30 76527504


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 32768
## kleene state hash key base
14348907
## state fluent hash keys (first line is the number of keys)
7
15 2
19 2
20 2
21 2
22 2
23 2
26 2
## kleene state fluent hash keys (first line is the number of keys)
7
15 2
19 2
20 2
21 2
22 2
23 2
26 2

## index
1
## state hash key (for each value in the domain)
0 65536
## kleene state hash key base
43046721
## state fluent hash keys (first line is the number of keys)
7
16 2
18 2
21 4
24 2
25 2
26 4
30 524288
## kleene state fluent hash keys (first line is the number of keys)
7
16 2
18 2
21 6
24 2
25 2
26 6
30 229582512

## index
2
## state hash key (for each value in the domain)
0 131072
## kleene state hash key base
129140163
## state fluent hash keys (first line is the number of keys)
4
17 2
19 4
23 4
30 1048576
## kleene state fluent hash keys (first line is the number of keys)
4
17 2
19 6
23 6
30 688747536

## index
3
## state hash key (for each value in the domain)
0 262144
## kleene state hash key base
387420489
## state fluent hash keys (first line is the number of keys)
1
18 4
## kleene state fluent hash keys (first line is the number of keys)
1
18 6

## index
4
## state hash key (for each value in the domain)
0 524288
## kleene state hash key base
1162261467
## state fluent hash keys (first line is the number of keys)
5
19 8
20 4
22 4
25 4
26 8
## kleene state fluent hash keys (first line is the number of keys)
5
19 18
20 6
22 6
25 6
26 18

## index
5
## state hash key (for each value in the domain)
0 1048576
## kleene state hash key base
3486784401
## state fluent hash keys (first line is the number of keys)
2
20 8
22 8
## kleene state fluent hash keys (first line is the number of keys)
2
20 18
22 18

## index
6
## state hash key (for each value in the domain)
0 2097152
## kleene state hash key base
10460353203
## state fluent hash keys (first line is the number of keys)
3
21 8
27 2
30 2097152
## kleene state fluent hash keys (first line is the number of keys)
3
21 18
27 2
30 2066242608

## index
7
## state hash key (for each value in the domain)
0 4194304
## kleene state hash key base
31381059609
## state fluent hash keys (first line is the number of keys)
1
22 16
## kleene state fluent hash keys (first line is the number of keys)
1
22 54

## index
8
## state hash key (for each value in the domain)
0 8388608
## kleene state hash key base
94143178827
## state fluent hash keys (first line is the number of keys)
3
23 8
27 4
29 2
## kleene state fluent hash keys (first line is the number of keys)
3
23 18
27 6
29 2

## index
9
## state hash key (for each value in the domain)
0 16777216
## kleene state hash key base
282429536481
## state fluent hash keys (first line is the number of keys)
2
24 4
30 4194304
## kleene state fluent hash keys (first line is the number of keys)
2
24 6
30 6198727824

## index
10
## state hash key (for each value in the domain)
0 33554432
## kleene state hash key base
847288609443
## state fluent hash keys (first line is the number of keys)
2
25 8
28 2
## kleene state fluent hash keys (first line is the number of keys)
2
25 18
28 2

## index
11
## state hash key (for each value in the domain)
0 67108864
## kleene state hash key base
2541865828329
## state fluent hash keys (first line is the number of keys)
1
26 16
## kleene state fluent hash keys (first line is the number of keys)
1
26 54

## index
12
## state hash key (for each value in the domain)
0 134217728
## kleene state hash key base
7625597484987
## state fluent hash keys (first line is the number of keys)
1
27 8
## kleene state fluent hash keys (first line is the number of keys)
1
27 18

## index
13
## state hash key (for each value in the domain)
0 268435456
## kleene state hash key base
22876792454961
## state fluent hash keys (first line is the number of keys)
2
28 4
29 4
## kleene state fluent hash keys (first line is the number of keys)
2
28 6
29 6

## index
14
## state hash key (for each value in the domain)
0 536870912
## kleene state hash key base
68630377364883
## state fluent hash keys (first line is the number of keys)
1
29 8
## kleene state fluent hash keys (first line is the number of keys)
1
29 18



#####TRAINING SET#####
200
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 1 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 0 0 1 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 0 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 1 0 0 1 1 1 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 1 1 0 0 1 1 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 
1 0 1 1 1 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 
1 1 1 1 0 0 0 0 0 0 0 1 1 1 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
1 0 0 0 1 1 1 0 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
1 1 1 0 1 1 1 0 1 0 1 1 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 
0 1 0 1 0 1 1 1 1 1 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 
1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 
1 1 0 1 1 0 1 1 0 0 0 1 1 0 0 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 
1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 1 1 1 1 0 0 1 0 0 0 0 0 0 0 0 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 0 0 0 0 0 0 
0 1 0 1 1 1 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 
0 0 0 1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 1 0 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 
0 1 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 
0 0 1 0 1 1 0 1 1 1 0 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 
1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 
0 0 1 0 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 
0 1 0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
1 0 1 0 1 1 1 0 1 1 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 
1 1 1 1 1 0 0 1 1 1 0 1 0 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 0 0 
1 1 1 0 1 1 1 0 1 0 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 0 0 0 0 0 
1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 
1 1 1 0 0 0 1 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 
0 1 1 0 1 1 1 0 1 1 0 1 1 0 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 0 
1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 0 0 0 1 0 0 0 0 0 
1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 
1 1 1 1 1 0 1 0 0 1 1 1 1 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 
0 1 1 0 1 1 1 0 1 1 0 1 1 0 0 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 
1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 0 0 0 
0 0 1 0 1 1 0 1 1 1 0 1 0 0 1 0 0 1 0 1 1 0 1 0 1 0 0 0 0 0 
0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
0 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 
0 0 1 0 0 0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 
1 1 1 1 1 0 0 0 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 
1 0 1 1 0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 0 0 0 1 0 0 0 0 
1 1 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 
1 1 1 1 1 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0 1 0 0 1 0 1 0 0 0 0 
0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 1 0 1 0 1 1 0 1 1 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 
1 0 1 0 0 0 0 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 
1 1 1 1 0 1 0 0 0 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 
1 1 0 1 0 0 0 0 0 0 0 1 0 0 1 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 
0 0 1 1 0 1 1 1 0 1 1 1 1 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 0 
0 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 1 1 0 1 1 0 1 0 0 0 1 0 0 0 
1 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 
1 1 1 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 0 1 1 1 0 0 0 1 0 0 0 
1 1 0 1 1 1 1 1 1 0 1 1 1 0 0 1 1 0 1 1 1 1 1 0 0 0 1 0 0 0 
1 1 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 
0 1 1 1 0 0 1 0 1 1 0 1 0 1 0 0 1 1 0 0 0 0 0 1 0 0 1 0 0 0 
1 1 0 1 0 1 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 0 0 0 1 0 1 0 0 0 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 0 0 0 
1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 1 0 1 1 0 0 0 
1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 0 1 1 0 0 0 
0 1 1 1 0 1 1 0 0 1 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 1 0 0 0 
0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 1 1 1 0 0 0 
1 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 
1 1 0 1 1 0 1 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 1 0 1 1 1 1 0 1 1 1 0 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 
1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 
0 0 1 1 0 1 0 1 1 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 
0 0 0 0 1 0 0 1 0 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 
1 0 1 1 0 0 1 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 
1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 1 0 1 1 1 1 0 1 1 0 0 0 1 0 0 
1 1 1 1 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 0 0 1 0 0 1 0 0 
0 0 1 1 0 1 1 0 1 1 1 1 1 0 0 0 0 1 0 0 0 0 0 1 1 0 0 1 0 0 
1 1 0 0 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 
1 1 0 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 0 1 0 0 0 1 0 1 0 0 
1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 0 0 0 1 0 1 0 0 
0 0 1 1 1 1 1 0 0 0 1 1 1 1 0 0 0 1 1 1 0 1 0 0 0 1 0 1 0 0 
1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 0 1 1 0 0 1 1 1 0 1 0 0 
1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 0 1 0 1 1 1 0 1 0 0 
0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 
1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 1 0 0 
1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 0 1 0 0 0 1 1 1 0 0 
1 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 0 0 1 1 1 0 0 
1 1 1 0 1 0 1 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 0 
1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 0 0 
1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 
1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 0 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 
1 1 1 1 0 0 0 0 1 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 
1 1 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 1 0 0 0 1 0 0 0 0 0 0 1 0 
1 0 0 0 1 1 1 0 1 1 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 
0 0 0 1 1 0 0 0 0 1 1 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 
1 0 0 1 1 0 1 0 0 1 1 0 0 1 1 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 
1 0 0 1 1 0 1 1 0 1 1 0 0 1 1 1 0 0 1 0 0 1 1 0 1 0 0 0 1 0 
1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0 0 1 0 
1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 1 0 0 1 1 0 0 1 0 
1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 0 1 1 0 0 1 0 
1 1 1 0 1 1 1 0 1 1 1 0 0 1 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 0 
1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 0 0 0 1 1 1 1 0 0 1 0 
1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 0 
1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 0 1 1 0 1 0 1 0 
0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 0 0 0 1 1 0 1 0 
1 1 1 0 0 0 1 0 0 1 1 1 0 1 0 1 1 1 0 0 0 1 0 0 0 1 1 0 1 0 
1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 0 1 0 
1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 0 
1 1 1 0 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 0 1 0 
1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 
1 1 0 0 1 1 0 0 1 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 0 0 0 1 1 0 
1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 0 0 1 0 0 1 1 0 
0 1 1 0 0 0 1 1 1 1 0 1 1 1 0 0 1 1 0 0 0 1 1 1 1 0 0 1 1 0 
0 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 1 0 1 1 1 1 0 0 1 1 0 
1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 
1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 0 
1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 0 1 1 0 
1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 0 
1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 
0 0 1 0 1 1 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 
1 0 1 0 0 0 0 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 
1 0 1 0 0 0 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 
1 0 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 
1 1 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 1 
0 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 
1 0 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 1 
0 0 1 0 1 1 1 1 0 1 1 1 1 0 1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 1 
0 1 0 1 1 0 0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 1 
0 1 1 0 1 1 1 1 1 1 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0 0 0 1 
0 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0 0 0 1 
1 0 0 1 1 1 0 1 1 1 1 0 0 1 1 1 0 0 0 1 0 0 0 1 0 1 0 0 0 1 
1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 0 1 0 0 0 1 
0 1 0 0 0 0 0 1 0 1 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 1 
1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 1 1 0 0 0 1 
1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 0 1 1 0 0 1 0 0 1 1 1 0 0 0 1 
1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 0 0 0 0 0 1 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 1 
1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 
1 1 1 0 0 1 1 0 0 1 1 1 1 1 1 1 1 1 0 0 1 0 0 0 0 1 1 0 0 1 
1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 1 
1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 0 1 0 1 1 0 0 1 
1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 
1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 0 1 
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 
1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 
1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 0 1 
1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 1 
0 1 0 1 1 1 0 1 0 0 1 1 1 1 1 0 1 0 1 1 0 0 0 0 0 1 1 1 0 1 
1 0 1 0 1 0 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 1 1 0 1 
1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 1 1 0 1 
1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 
1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 1 
1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 0 1 
1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 
0 0 1 0 1 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 0 1 1 
1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 0 1 0 1 1 1 0 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 
1 1 0 0 0 0 1 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 
0 1 1 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 0 0 0 0 0 0 0 1 1 1 
1 0 1 0 0 1 0 1 1 1 1 0 1 1 1 1 0 1 0 0 0 0 1 0 0 0 0 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 0 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 0 1 1 1 
1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 1 0 0 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 
1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 0 0 1 1 1 
1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 0 1 0 0 0 1 0 1 0 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 
1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 0 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 
1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 
1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 0 1 1 1 1 1 1 1 
1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 
