#####TASK#####
## name
sysadmin_inst_mdp__8
## horizon
40
## discount factor
1
## number of action fluents
40
## number of det state fluents
0
## number of prob state fluents
40
## number of preconds
0
## number of actions
41
## number of hashing functions
41
## initial state
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
0
## method to calculate the final reward
NOOP
## 1 if reward formula allows reward lock detection and a reward lock was found during task analysis
0
## 1 if an unreasonable action was detected
0
## 1 if an unreasonable action was detected in the determinization
1
## number of states that were encountered during task analysis
691
## number of unique states that were encountered during task analysis
653
## number of states with only one applicable reasonable action that were encountered during task analysis
0
## number of unique states with only one applicable reasonable action that were encountered during task analysis
0


#####ACTION FLUENTS#####
## index
0
## name
reboot(c1)
## number of values
2
## values
0 false
1 true

## index
1
## name
reboot(c10)
## number of values
2
## values
0 false
1 true

## index
2
## name
reboot(c11)
## number of values
2
## values
0 false
1 true

## index
3
## name
reboot(c12)
## number of values
2
## values
0 false
1 true

## index
4
## name
reboot(c13)
## number of values
2
## values
0 false
1 true

## index
5
## name
reboot(c14)
## number of values
2
## values
0 false
1 true

## index
6
## name
reboot(c15)
## number of values
2
## values
0 false
1 true

## index
7
## name
reboot(c16)
## number of values
2
## values
0 false
1 true

## index
8
## name
reboot(c17)
## number of values
2
## values
0 false
1 true

## index
9
## name
reboot(c18)
## number of values
2
## values
0 false
1 true

## index
10
## name
reboot(c19)
## number of values
2
## values
0 false
1 true

## index
11
## name
reboot(c2)
## number of values
2
## values
0 false
1 true

## index
12
## name
reboot(c20)
## number of values
2
## values
0 false
1 true

## index
13
## name
reboot(c21)
## number of values
2
## values
0 false
1 true

## index
14
## name
reboot(c22)
## number of values
2
## values
0 false
1 true

## index
15
## name
reboot(c23)
## number of values
2
## values
0 false
1 true

## index
16
## name
reboot(c24)
## number of values
2
## values
0 false
1 true

## index
17
## name
reboot(c25)
## number of values
2
## values
0 false
1 true

## index
18
## name
reboot(c26)
## number of values
2
## values
0 false
1 true

## index
19
## name
reboot(c27)
## number of values
2
## values
0 false
1 true

## index
20
## name
reboot(c28)
## number of values
2
## values
0 false
1 true

## index
21
## name
reboot(c29)
## number of values
2
## values
0 false
1 true

## index
22
## name
reboot(c3)
## number of values
2
## values
0 false
1 true

## index
23
## name
reboot(c30)
## number of values
2
## values
0 false
1 true

## index
24
## name
reboot(c31)
## number of values
2
## values
0 false
1 true

## index
25
## name
reboot(c32)
## number of values
2
## values
0 false
1 true

## index
26
## name
reboot(c33)
## number of values
2
## values
0 false
1 true

## index
27
## name
reboot(c34)
## number of values
2
## values
0 false
1 true

## index
28
## name
reboot(c35)
## number of values
2
## values
0 false
1 true

## index
29
## name
reboot(c36)
## number of values
2
## values
0 false
1 true

## index
30
## name
reboot(c37)
## number of values
2
## values
0 false
1 true

## index
31
## name
reboot(c38)
## number of values
2
## values
0 false
1 true

## index
32
## name
reboot(c39)
## number of values
2
## values
0 false
1 true

## index
33
## name
reboot(c4)
## number of values
2
## values
0 false
1 true

## index
34
## name
reboot(c40)
## number of values
2
## values
0 false
1 true

## index
35
## name
reboot(c5)
## number of values
2
## values
0 false
1 true

## index
36
## name
reboot(c6)
## number of values
2
## values
0 false
1 true

## index
37
## name
reboot(c7)
## number of values
2
## values
0 false
1 true

## index
38
## name
reboot(c8)
## number of values
2
## values
0 false
1 true

## index
39
## name
reboot(c9)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####


#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
running(c1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(0) : $c(1)) ($s(0) : Bernoulli(+(/(*(+($s(6) $s(7) $s(17) $s(24) $s(25) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(0) : $c(1)) ($s(0) : <=($c(0.5) +(/(*(+($s(6) $s(7) $s(17) $s(24) $s(25) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
0
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.466666666666667 1 0.533333333333333
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.383333333333333 1 0.616666666666667
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 1 2 0 0.383333333333333 1 0.616666666666667
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 1 2 0 0.3 1 0.7
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 1 2 0 0.383333333333333 1 0.616666666666667
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 1 2 0 0.3 1 0.7
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 1 2 0 0.3 1 0.7
27 1 1 1 1
28 0 2 0 0.98 1 0.02
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 1 2 0 0.383333333333333 1 0.616666666666667
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 1 2 0 0.3 1 0.7
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 1 2 0 0.3 1 0.7
43 1 1 1 1
44 0 2 0 0.98 1 0.02
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 1 2 0 0.3 1 0.7
51 1 1 1 1
52 0 2 0 0.98 1 0.02
53 1 1 1 1
54 1 2 0 0.216666666666667 1 0.783333333333333
55 1 1 1 1
56 0 2 0 0.98 1 0.02
57 1 1 1 1
58 1 2 0 0.216666666666667 1 0.783333333333333
59 1 1 1 1
60 0 2 0 0.98 1 0.02
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.98 1 0.02
65 1 1 1 1
66 1 2 0 0.383333333333333 1 0.616666666666667
67 1 1 1 1
68 0 2 0 0.98 1 0.02
69 1 1 1 1
70 1 2 0 0.3 1 0.7
71 1 1 1 1
72 0 2 0 0.98 1 0.02
73 1 1 1 1
74 1 2 0 0.3 1 0.7
75 1 1 1 1
76 0 2 0 0.98 1 0.02
77 1 1 1 1
78 1 2 0 0.216666666666667 1 0.783333333333333
79 1 1 1 1
80 0 2 0 0.98 1 0.02
81 1 1 1 1
82 1 2 0 0.3 1 0.7
83 1 1 1 1
84 0 2 0 0.98 1 0.02
85 1 1 1 1
86 1 2 0 0.216666666666667 1 0.783333333333333
87 1 1 1 1
88 0 2 0 0.98 1 0.02
89 1 1 1 1
90 1 2 0 0.216666666666667 1 0.783333333333333
91 1 1 1 1
92 0 2 0 0.98 1 0.02
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.98 1 0.02
97 1 1 1 1
98 1 2 0 0.3 1 0.7
99 1 1 1 1
100 0 2 0 0.98 1 0.02
101 1 1 1 1
102 1 2 0 0.216666666666667 1 0.783333333333333
103 1 1 1 1
104 0 2 0 0.98 1 0.02
105 1 1 1 1
106 1 2 0 0.216666666666667 1 0.783333333333333
107 1 1 1 1
108 0 2 0 0.98 1 0.02
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 0 2 0 0.98 1 0.02
113 1 1 1 1
114 1 2 0 0.216666666666667 1 0.783333333333333
115 1 1 1 1
116 0 2 0 0.98 1 0.02
117 1 1 1 1
118 1 2 0 0.133333333333333 1 0.866666666666667
119 1 1 1 1
120 0 2 0 0.98 1 0.02
121 1 1 1 1
122 1 2 0 0.133333333333333 1 0.866666666666667
123 1 1 1 1
124 0 2 0 0.98 1 0.02
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 1

## index
1
## name
running(c10)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(1) : $c(1)) ($s(1) : Bernoulli(+(/(*(+($s(0) $s(11) $s(33) $s(16) $s(27) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(1) : $c(1)) ($s(1) : <=($c(0.5) +(/(*(+($s(0) $s(11) $s(33) $s(16) $s(27) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
1
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.466666666666667 1 0.533333333333333
5 1 1 1 1
6 1 2 0 0.383333333333333 1 0.616666666666667
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 1 2 0 0.383333333333333 1 0.616666666666667
13 1 1 1 1
14 1 2 0 0.3 1 0.7
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 1 2 0 0.383333333333333 1 0.616666666666667
21 1 1 1 1
22 1 2 0 0.3 1 0.7
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 0 2 0 0.98 1 0.02
27 1 1 1 1
28 1 2 0 0.3 1 0.7
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 1 2 0 0.383333333333333 1 0.616666666666667
37 1 1 1 1
38 1 2 0 0.3 1 0.7
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 0 2 0 0.98 1 0.02
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 0 2 0 0.98 1 0.02
51 1 1 1 1
52 1 2 0 0.3 1 0.7
53 1 1 1 1
54 1 2 0 0.216666666666667 1 0.783333333333333
55 1 1 1 1
56 0 2 0 0.98 1 0.02
57 1 1 1 1
58 0 2 0 0.98 1 0.02
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.98 1 0.02
65 1 1 1 1
66 0 2 0 0.98 1 0.02
67 1 1 1 1
68 1 2 0 0.383333333333333 1 0.616666666666667
69 1 1 1 1
70 1 2 0 0.3 1 0.7
71 1 1 1 1
72 0 2 0 0.98 1 0.02
73 1 1 1 1
74 0 2 0 0.98 1 0.02
75 1 1 1 1
76 1 2 0 0.3 1 0.7
77 1 1 1 1
78 1 2 0 0.216666666666667 1 0.783333333333333
79 1 1 1 1
80 0 2 0 0.98 1 0.02
81 1 1 1 1
82 0 2 0 0.98 1 0.02
83 1 1 1 1
84 1 2 0 0.3 1 0.7
85 1 1 1 1
86 1 2 0 0.216666666666667 1 0.783333333333333
87 1 1 1 1
88 0 2 0 0.98 1 0.02
89 1 1 1 1
90 0 2 0 0.98 1 0.02
91 1 1 1 1
92 1 2 0 0.216666666666667 1 0.783333333333333
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.98 1 0.02
97 1 1 1 1
98 0 2 0 0.98 1 0.02
99 1 1 1 1
100 1 2 0 0.3 1 0.7
101 1 1 1 1
102 1 2 0 0.216666666666667 1 0.783333333333333
103 1 1 1 1
104 0 2 0 0.98 1 0.02
105 1 1 1 1
106 0 2 0 0.98 1 0.02
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 0 2 0 0.98 1 0.02
113 1 1 1 1
114 0 2 0 0.98 1 0.02
115 1 1 1 1
116 1 2 0 0.216666666666667 1 0.783333333333333
117 1 1 1 1
118 1 2 0 0.133333333333333 1 0.866666666666667
119 1 1 1 1
120 0 2 0 0.98 1 0.02
121 1 1 1 1
122 0 2 0 0.98 1 0.02
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 1
40 0

## index
2
## name
running(c11)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(2) : $c(1)) ($s(2) : Bernoulli(+(/(*(+($s(36) $s(4) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(2) : $c(1)) ($s(2) : <=($c(0.5) +(/(*(+($s(36) $s(4) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
2
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.383333333333333 1 0.616666666666667
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 1
39 0
40 0

## index
3
## name
running(c12)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(3) : $c(1)) ($s(3) : Bernoulli(+(/(*(+($s(10) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(3) : $c(1)) ($s(3) : <=($c(0.5) +(/(*(+($s(10) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
3
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 1
38 0
39 0
40 0

## index
4
## name
running(c13)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(4) : $c(1)) ($s(4) : Bernoulli(+(/(*(+($s(16) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(4) : $c(1)) ($s(4) : <=($c(0.5) +(/(*(+($s(16) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
4
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 1
37 0
38 0
39 0
40 0

## index
5
## name
running(c14)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(5) : $c(1)) ($s(5) : Bernoulli(+(/(*(+($s(37) $s(17) $s(21) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(5) : $c(1)) ($s(5) : <=($c(0.5) +(/(*(+($s(37) $s(17) $s(21) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
5
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.425 1 0.575
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 0 2 0 0.98 1 0.02
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 1
36 0
37 0
38 0
39 0
40 0

## index
6
## name
running(c15)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(6) : $c(1)) ($s(6) : Bernoulli(+(/(*(+($s(20) $s(21) $s(28) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(6) : $c(1)) ($s(6) : <=($c(0.5) +(/(*(+($s(20) $s(21) $s(28) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
6
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.425 1 0.575
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 0 2 0 0.98 1 0.02
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 1
35 0
36 0
37 0
38 0
39 0
40 0

## index
7
## name
running(c16)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(7) : $c(1)) ($s(7) : Bernoulli(+(/(*(+($s(33) $s(37) $s(5) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(7) : $c(1)) ($s(7) : <=($c(0.5) +(/(*(+($s(33) $s(37) $s(5) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
7
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.425 1 0.575
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 1 2 0 0.3 1 0.7
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 1 2 0 0.3 1 0.7
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 0 2 0 0.98 1 0.02
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 1
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
8
## name
running(c17)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(8) : $c(1)) ($s(8) : Bernoulli(+(/(*(+($s(2) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(8) : $c(1)) ($s(8) : <=($c(0.5) +(/(*(+($s(2) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
8
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 1
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
9
## name
running(c18)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(9) : $c(1)) ($s(9) : Bernoulli($c(0.95))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(9) : $c(1)) ($s(9) : $c(1)) ($c(1) : $c(0)) )
## hash index
9
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
4
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.05 1 0.95
3 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
6
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 1
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
10
## name
running(c19)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(10) : $c(1)) ($s(10) : Bernoulli(+(/(*(+($s(35) $s(1) $s(23) $s(29) $s(34) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(10) : $c(1)) ($s(10) : <=($c(0.5) +(/(*(+($s(35) $s(1) $s(23) $s(29) $s(34) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
10
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.466666666666667 1 0.533333333333333
5 1 1 1 1
6 1 2 0 0.383333333333333 1 0.616666666666667
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 1 2 0 0.383333333333333 1 0.616666666666667
13 1 1 1 1
14 1 2 0 0.3 1 0.7
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 1 2 0 0.383333333333333 1 0.616666666666667
21 1 1 1 1
22 1 2 0 0.3 1 0.7
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 0 2 0 0.98 1 0.02
27 1 1 1 1
28 1 2 0 0.3 1 0.7
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 1 2 0 0.383333333333333 1 0.616666666666667
37 1 1 1 1
38 1 2 0 0.3 1 0.7
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 0 2 0 0.98 1 0.02
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 0 2 0 0.98 1 0.02
51 1 1 1 1
52 1 2 0 0.3 1 0.7
53 1 1 1 1
54 1 2 0 0.216666666666667 1 0.783333333333333
55 1 1 1 1
56 0 2 0 0.98 1 0.02
57 1 1 1 1
58 0 2 0 0.98 1 0.02
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.98 1 0.02
65 1 1 1 1
66 0 2 0 0.98 1 0.02
67 1 1 1 1
68 1 2 0 0.383333333333333 1 0.616666666666667
69 1 1 1 1
70 1 2 0 0.3 1 0.7
71 1 1 1 1
72 0 2 0 0.98 1 0.02
73 1 1 1 1
74 0 2 0 0.98 1 0.02
75 1 1 1 1
76 1 2 0 0.3 1 0.7
77 1 1 1 1
78 1 2 0 0.216666666666667 1 0.783333333333333
79 1 1 1 1
80 0 2 0 0.98 1 0.02
81 1 1 1 1
82 0 2 0 0.98 1 0.02
83 1 1 1 1
84 1 2 0 0.3 1 0.7
85 1 1 1 1
86 1 2 0 0.216666666666667 1 0.783333333333333
87 1 1 1 1
88 0 2 0 0.98 1 0.02
89 1 1 1 1
90 0 2 0 0.98 1 0.02
91 1 1 1 1
92 1 2 0 0.216666666666667 1 0.783333333333333
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.98 1 0.02
97 1 1 1 1
98 0 2 0 0.98 1 0.02
99 1 1 1 1
100 1 2 0 0.3 1 0.7
101 1 1 1 1
102 1 2 0 0.216666666666667 1 0.783333333333333
103 1 1 1 1
104 0 2 0 0.98 1 0.02
105 1 1 1 1
106 0 2 0 0.98 1 0.02
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 0 2 0 0.98 1 0.02
113 1 1 1 1
114 0 2 0 0.98 1 0.02
115 1 1 1 1
116 1 2 0 0.216666666666667 1 0.783333333333333
117 1 1 1 1
118 1 2 0 0.133333333333333 1 0.866666666666667
119 1 1 1 1
120 0 2 0 0.98 1 0.02
121 1 1 1 1
122 0 2 0 0.98 1 0.02
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 1
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
11
## name
running(c2)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(11) : $c(1)) ($s(11) : Bernoulli(+(/(*(+($s(4) $s(9) $s(14) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(11) : $c(1)) ($s(11) : <=($c(0.5) +(/(*(+($s(4) $s(9) $s(14) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
11
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.425 1 0.575
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 1 2 0 0.3 1 0.7
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 0 2 0 0.98 1 0.02
23 1 1 1 1
24 1 2 0 0.3 1 0.7
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 1
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
12
## name
running(c20)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(12) : $c(1)) ($s(12) : Bernoulli(+(/(*(+($s(39) $s(3) $s(6) $s(27) $s(29) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(12) : $c(1)) ($s(12) : <=($c(0.5) +(/(*(+($s(39) $s(3) $s(6) $s(27) $s(29) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
12
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.466666666666667 1 0.533333333333333
9 1 1 1 1
10 1 2 0 0.383333333333333 1 0.616666666666667
11 1 1 1 1
12 1 2 0 0.383333333333333 1 0.616666666666667
13 1 1 1 1
14 1 2 0 0.3 1 0.7
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 0 2 0 0.98 1 0.02
23 1 1 1 1
24 1 2 0 0.383333333333333 1 0.616666666666667
25 1 1 1 1
26 1 2 0 0.3 1 0.7
27 1 1 1 1
28 1 2 0 0.3 1 0.7
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 0 2 0 0.98 1 0.02
39 1 1 1 1
40 1 2 0 0.383333333333333 1 0.616666666666667
41 1 1 1 1
42 1 2 0 0.3 1 0.7
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 0 2 0 0.98 1 0.02
51 1 1 1 1
52 0 2 0 0.98 1 0.02
53 1 1 1 1
54 0 2 0 0.98 1 0.02
55 1 1 1 1
56 1 2 0 0.3 1 0.7
57 1 1 1 1
58 1 2 0 0.216666666666667 1 0.783333333333333
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.98 1 0.02
65 1 1 1 1
66 0 2 0 0.98 1 0.02
67 1 1 1 1
68 0 2 0 0.98 1 0.02
69 1 1 1 1
70 0 2 0 0.98 1 0.02
71 1 1 1 1
72 1 2 0 0.383333333333333 1 0.616666666666667
73 1 1 1 1
74 1 2 0 0.3 1 0.7
75 1 1 1 1
76 1 2 0 0.3 1 0.7
77 1 1 1 1
78 1 2 0 0.216666666666667 1 0.783333333333333
79 1 1 1 1
80 0 2 0 0.98 1 0.02
81 1 1 1 1
82 0 2 0 0.98 1 0.02
83 1 1 1 1
84 0 2 0 0.98 1 0.02
85 1 1 1 1
86 0 2 0 0.98 1 0.02
87 1 1 1 1
88 1 2 0 0.3 1 0.7
89 1 1 1 1
90 1 2 0 0.216666666666667 1 0.783333333333333
91 1 1 1 1
92 1 2 0 0.216666666666667 1 0.783333333333333
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.98 1 0.02
97 1 1 1 1
98 0 2 0 0.98 1 0.02
99 1 1 1 1
100 0 2 0 0.98 1 0.02
101 1 1 1 1
102 0 2 0 0.98 1 0.02
103 1 1 1 1
104 1 2 0 0.3 1 0.7
105 1 1 1 1
106 1 2 0 0.216666666666667 1 0.783333333333333
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 0 2 0 0.98 1 0.02
113 1 1 1 1
114 0 2 0 0.98 1 0.02
115 1 1 1 1
116 0 2 0 0.98 1 0.02
117 1 1 1 1
118 0 2 0 0.98 1 0.02
119 1 1 1 1
120 1 2 0 0.216666666666667 1 0.783333333333333
121 1 1 1 1
122 1 2 0 0.133333333333333 1 0.866666666666667
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 1
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
13
## name
running(c21)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(13) : $c(1)) ($s(13) : Bernoulli(+(/(*(+($s(38) $s(3) $s(8) $s(24) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(13) : $c(1)) ($s(13) : <=($c(0.5) +(/(*(+($s(38) $s(3) $s(8) $s(24) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
13
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.45 1 0.55
9 1 1 1 1
10 1 2 0 0.35 1 0.65
11 1 1 1 1
12 1 2 0 0.35 1 0.65
13 1 1 1 1
14 1 2 0 0.25 1 0.75
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 0 2 0 0.98 1 0.02
23 1 1 1 1
24 1 2 0 0.35 1 0.65
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 0 2 0 0.98 1 0.02
39 1 1 1 1
40 1 2 0 0.35 1 0.65
41 1 1 1 1
42 1 2 0 0.25 1 0.75
43 1 1 1 1
44 1 2 0 0.25 1 0.75
45 1 1 1 1
46 1 2 0 0.15 1 0.85
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 0 2 0 0.98 1 0.02
51 1 1 1 1
52 0 2 0 0.98 1 0.02
53 1 1 1 1
54 0 2 0 0.98 1 0.02
55 1 1 1 1
56 1 2 0 0.25 1 0.75
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 1
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
14
## name
running(c22)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(14) : $c(1)) ($s(14) : Bernoulli(+(/(*(+($s(15) $s(18) $s(23) $s(26) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(14) : $c(1)) ($s(14) : <=($c(0.5) +(/(*(+($s(15) $s(18) $s(23) $s(26) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
14
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.45 1 0.55
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.35 1 0.65
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 1 2 0 0.35 1 0.65
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 1 2 0 0.25 1 0.75
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 1 2 0 0.35 1 0.65
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 0 2 0 0.98 1 0.02
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 1 2 0 0.35 1 0.65
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 1 2 0 0.25 1 0.75
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 1 2 0 0.25 1 0.75
43 1 1 1 1
44 0 2 0 0.98 1 0.02
45 1 1 1 1
46 1 2 0 0.15 1 0.85
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 1 2 0 0.25 1 0.75
51 1 1 1 1
52 0 2 0 0.98 1 0.02
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 0 2 0 0.98 1 0.02
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 0 2 0 0.98 1 0.02
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 1
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
15
## name
running(c23)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(15) : $c(1)) ($s(15) : Bernoulli(+(/(*(+($s(37) $s(20) $s(31) $s(32) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(15) : $c(1)) ($s(15) : <=($c(0.5) +(/(*(+($s(37) $s(20) $s(31) $s(32) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
15
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.45 1 0.55
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.35 1 0.65
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 1 2 0 0.35 1 0.65
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 1 2 0 0.25 1 0.75
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 1 2 0 0.35 1 0.65
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 0 2 0 0.98 1 0.02
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 1 2 0 0.35 1 0.65
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 1 2 0 0.25 1 0.75
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 1 2 0 0.25 1 0.75
43 1 1 1 1
44 0 2 0 0.98 1 0.02
45 1 1 1 1
46 1 2 0 0.15 1 0.85
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 1 2 0 0.25 1 0.75
51 1 1 1 1
52 0 2 0 0.98 1 0.02
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 0 2 0 0.98 1 0.02
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 0 2 0 0.98 1 0.02
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 1
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
16
## name
running(c24)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(16) : $c(1)) ($s(16) : Bernoulli(+(/(*(+($s(35) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(16) : $c(1)) ($s(16) : <=($c(0.5) +(/(*(+($s(35) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
16
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 1
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
17
## name
running(c25)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(17) : $c(1)) ($s(17) : Bernoulli(+(/(*(+($s(23) $s(30) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(17) : $c(1)) ($s(17) : <=($c(0.5) +(/(*(+($s(23) $s(30) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
17
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.383333333333333 1 0.616666666666667
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 1
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
18
## name
running(c26)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(18) : $c(1)) ($s(18) : Bernoulli(+(/(*(+($s(11) $s(25) $s(29) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(18) : $c(1)) ($s(18) : <=($c(0.5) +(/(*(+($s(11) $s(25) $s(29) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
18
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.425 1 0.575
5 1 1 1 1
6 1 2 0 0.3 1 0.7
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 1 2 0 0.3 1 0.7
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 1 2 0 0.3 1 0.7
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 0 2 0 0.98 1 0.02
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 1
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
19
## name
running(c27)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(19) : $c(1)) ($s(19) : Bernoulli(+(/(*(+($s(26) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(19) : $c(1)) ($s(19) : <=($c(0.5) +(/(*(+($s(26) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
19
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 1 2 0 0.3 1 0.7
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 1
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
20
## name
running(c28)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(20) : $c(1)) ($s(20) : Bernoulli(+(/(*(+($s(35) $s(6) $s(17) $s(32) $s(34) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(20) : $c(1)) ($s(20) : <=($c(0.5) +(/(*(+($s(35) $s(6) $s(17) $s(32) $s(34) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
20
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.466666666666667 1 0.533333333333333
9 1 1 1 1
10 1 2 0 0.383333333333333 1 0.616666666666667
11 1 1 1 1
12 1 2 0 0.383333333333333 1 0.616666666666667
13 1 1 1 1
14 1 2 0 0.3 1 0.7
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 0 2 0 0.98 1 0.02
23 1 1 1 1
24 1 2 0 0.383333333333333 1 0.616666666666667
25 1 1 1 1
26 1 2 0 0.3 1 0.7
27 1 1 1 1
28 1 2 0 0.3 1 0.7
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 0 2 0 0.98 1 0.02
39 1 1 1 1
40 1 2 0 0.383333333333333 1 0.616666666666667
41 1 1 1 1
42 1 2 0 0.3 1 0.7
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 0 2 0 0.98 1 0.02
51 1 1 1 1
52 0 2 0 0.98 1 0.02
53 1 1 1 1
54 0 2 0 0.98 1 0.02
55 1 1 1 1
56 1 2 0 0.3 1 0.7
57 1 1 1 1
58 1 2 0 0.216666666666667 1 0.783333333333333
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.98 1 0.02
65 1 1 1 1
66 0 2 0 0.98 1 0.02
67 1 1 1 1
68 0 2 0 0.98 1 0.02
69 1 1 1 1
70 0 2 0 0.98 1 0.02
71 1 1 1 1
72 1 2 0 0.383333333333333 1 0.616666666666667
73 1 1 1 1
74 1 2 0 0.3 1 0.7
75 1 1 1 1
76 1 2 0 0.3 1 0.7
77 1 1 1 1
78 1 2 0 0.216666666666667 1 0.783333333333333
79 1 1 1 1
80 0 2 0 0.98 1 0.02
81 1 1 1 1
82 0 2 0 0.98 1 0.02
83 1 1 1 1
84 0 2 0 0.98 1 0.02
85 1 1 1 1
86 0 2 0 0.98 1 0.02
87 1 1 1 1
88 1 2 0 0.3 1 0.7
89 1 1 1 1
90 1 2 0 0.216666666666667 1 0.783333333333333
91 1 1 1 1
92 1 2 0 0.216666666666667 1 0.783333333333333
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.98 1 0.02
97 1 1 1 1
98 0 2 0 0.98 1 0.02
99 1 1 1 1
100 0 2 0 0.98 1 0.02
101 1 1 1 1
102 0 2 0 0.98 1 0.02
103 1 1 1 1
104 1 2 0 0.3 1 0.7
105 1 1 1 1
106 1 2 0 0.216666666666667 1 0.783333333333333
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 0 2 0 0.98 1 0.02
113 1 1 1 1
114 0 2 0 0.98 1 0.02
115 1 1 1 1
116 0 2 0 0.98 1 0.02
117 1 1 1 1
118 0 2 0 0.98 1 0.02
119 1 1 1 1
120 1 2 0 0.216666666666667 1 0.783333333333333
121 1 1 1 1
122 1 2 0 0.133333333333333 1 0.866666666666667
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 1
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
21
## name
running(c29)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(21) : $c(1)) ($s(21) : Bernoulli(+(/(*(+($s(12) $s(14) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(21) : $c(1)) ($s(21) : <=($c(0.5) +(/(*(+($s(12) $s(14) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
21
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 1
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
22
## name
running(c3)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(22) : $c(1)) ($s(22) : Bernoulli(+(/(*(+($s(11) $s(2) $s(9) $s(12) $s(25) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(22) : $c(1)) ($s(22) : <=($c(0.5) +(/(*(+($s(11) $s(2) $s(9) $s(12) $s(25) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
22
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 0 2 0 0.98 1 0.02
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 0 2 0 0.98 1 0.02
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 0 2 0 0.98 1 0.02
27 1 1 1 1
28 0 2 0 0.98 1 0.02
29 1 1 1 1
30 0 2 0 0.98 1 0.02
31 1 1 1 1
32 1 2 0 0.466666666666667 1 0.533333333333333
33 1 1 1 1
34 1 2 0 0.383333333333333 1 0.616666666666667
35 1 1 1 1
36 1 2 0 0.383333333333333 1 0.616666666666667
37 1 1 1 1
38 1 2 0 0.3 1 0.7
39 1 1 1 1
40 1 2 0 0.383333333333333 1 0.616666666666667
41 1 1 1 1
42 1 2 0 0.3 1 0.7
43 1 1 1 1
44 1 2 0 0.3 1 0.7
45 1 1 1 1
46 1 2 0 0.216666666666667 1 0.783333333333333
47 1 1 1 1
48 1 2 0 0.383333333333333 1 0.616666666666667
49 1 1 1 1
50 1 2 0 0.3 1 0.7
51 1 1 1 1
52 1 2 0 0.3 1 0.7
53 1 1 1 1
54 1 2 0 0.216666666666667 1 0.783333333333333
55 1 1 1 1
56 1 2 0 0.3 1 0.7
57 1 1 1 1
58 1 2 0 0.216666666666667 1 0.783333333333333
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.98 1 0.02
65 1 1 1 1
66 0 2 0 0.98 1 0.02
67 1 1 1 1
68 0 2 0 0.98 1 0.02
69 1 1 1 1
70 0 2 0 0.98 1 0.02
71 1 1 1 1
72 0 2 0 0.98 1 0.02
73 1 1 1 1
74 0 2 0 0.98 1 0.02
75 1 1 1 1
76 0 2 0 0.98 1 0.02
77 1 1 1 1
78 0 2 0 0.98 1 0.02
79 1 1 1 1
80 0 2 0 0.98 1 0.02
81 1 1 1 1
82 0 2 0 0.98 1 0.02
83 1 1 1 1
84 0 2 0 0.98 1 0.02
85 1 1 1 1
86 0 2 0 0.98 1 0.02
87 1 1 1 1
88 0 2 0 0.98 1 0.02
89 1 1 1 1
90 0 2 0 0.98 1 0.02
91 1 1 1 1
92 0 2 0 0.98 1 0.02
93 1 1 1 1
94 0 2 0 0.98 1 0.02
95 1 1 1 1
96 1 2 0 0.383333333333333 1 0.616666666666667
97 1 1 1 1
98 1 2 0 0.3 1 0.7
99 1 1 1 1
100 1 2 0 0.3 1 0.7
101 1 1 1 1
102 1 2 0 0.216666666666667 1 0.783333333333333
103 1 1 1 1
104 1 2 0 0.3 1 0.7
105 1 1 1 1
106 1 2 0 0.216666666666667 1 0.783333333333333
107 1 1 1 1
108 1 2 0 0.216666666666667 1 0.783333333333333
109 1 1 1 1
110 1 2 0 0.133333333333333 1 0.866666666666667
111 1 1 1 1
112 1 2 0 0.3 1 0.7
113 1 1 1 1
114 1 2 0 0.216666666666667 1 0.783333333333333
115 1 1 1 1
116 1 2 0 0.216666666666667 1 0.783333333333333
117 1 1 1 1
118 1 2 0 0.133333333333333 1 0.866666666666667
119 1 1 1 1
120 1 2 0 0.216666666666667 1 0.783333333333333
121 1 1 1 1
122 1 2 0 0.133333333333333 1 0.866666666666667
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 1
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
23
## name
running(c30)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(23) : $c(1)) ($s(23) : Bernoulli(+(/(*(+($s(33) $s(8) $s(9) $s(10) $s(28) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(23) : $c(1)) ($s(23) : <=($c(0.5) +(/(*(+($s(33) $s(8) $s(9) $s(10) $s(28) $c(1)) $c(0.5)) $c(6)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
23
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
128
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 0 2 0 0.98 1 0.02
15 1 1 1 1
16 1 2 0 0.466666666666667 1 0.533333333333333
17 1 1 1 1
18 1 2 0 0.383333333333333 1 0.616666666666667
19 1 1 1 1
20 1 2 0 0.383333333333333 1 0.616666666666667
21 1 1 1 1
22 1 2 0 0.3 1 0.7
23 1 1 1 1
24 1 2 0 0.383333333333333 1 0.616666666666667
25 1 1 1 1
26 1 2 0 0.3 1 0.7
27 1 1 1 1
28 1 2 0 0.3 1 0.7
29 1 1 1 1
30 1 2 0 0.216666666666667 1 0.783333333333333
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 0 2 0 0.98 1 0.02
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 0 2 0 0.98 1 0.02
43 1 1 1 1
44 0 2 0 0.98 1 0.02
45 1 1 1 1
46 0 2 0 0.98 1 0.02
47 1 1 1 1
48 1 2 0 0.383333333333333 1 0.616666666666667
49 1 1 1 1
50 1 2 0 0.3 1 0.7
51 1 1 1 1
52 1 2 0 0.3 1 0.7
53 1 1 1 1
54 1 2 0 0.216666666666667 1 0.783333333333333
55 1 1 1 1
56 1 2 0 0.3 1 0.7
57 1 1 1 1
58 1 2 0 0.216666666666667 1 0.783333333333333
59 1 1 1 1
60 1 2 0 0.216666666666667 1 0.783333333333333
61 1 1 1 1
62 1 2 0 0.133333333333333 1 0.866666666666667
63 1 1 1 1
64 0 2 0 0.98 1 0.02
65 1 1 1 1
66 0 2 0 0.98 1 0.02
67 1 1 1 1
68 0 2 0 0.98 1 0.02
69 1 1 1 1
70 0 2 0 0.98 1 0.02
71 1 1 1 1
72 0 2 0 0.98 1 0.02
73 1 1 1 1
74 0 2 0 0.98 1 0.02
75 1 1 1 1
76 0 2 0 0.98 1 0.02
77 1 1 1 1
78 0 2 0 0.98 1 0.02
79 1 1 1 1
80 1 2 0 0.383333333333333 1 0.616666666666667
81 1 1 1 1
82 1 2 0 0.3 1 0.7
83 1 1 1 1
84 1 2 0 0.3 1 0.7
85 1 1 1 1
86 1 2 0 0.216666666666667 1 0.783333333333333
87 1 1 1 1
88 1 2 0 0.3 1 0.7
89 1 1 1 1
90 1 2 0 0.216666666666667 1 0.783333333333333
91 1 1 1 1
92 1 2 0 0.216666666666667 1 0.783333333333333
93 1 1 1 1
94 1 2 0 0.133333333333333 1 0.866666666666667
95 1 1 1 1
96 0 2 0 0.98 1 0.02
97 1 1 1 1
98 0 2 0 0.98 1 0.02
99 1 1 1 1
100 0 2 0 0.98 1 0.02
101 1 1 1 1
102 0 2 0 0.98 1 0.02
103 1 1 1 1
104 0 2 0 0.98 1 0.02
105 1 1 1 1
106 0 2 0 0.98 1 0.02
107 1 1 1 1
108 0 2 0 0.98 1 0.02
109 1 1 1 1
110 0 2 0 0.98 1 0.02
111 1 1 1 1
112 1 2 0 0.3 1 0.7
113 1 1 1 1
114 1 2 0 0.216666666666667 1 0.783333333333333
115 1 1 1 1
116 1 2 0 0.216666666666667 1 0.783333333333333
117 1 1 1 1
118 1 2 0 0.133333333333333 1 0.866666666666667
119 1 1 1 1
120 1 2 0 0.216666666666667 1 0.783333333333333
121 1 1 1 1
122 1 2 0 0.133333333333333 1 0.866666666666667
123 1 1 1 1
124 1 2 0 0.133333333333333 1 0.866666666666667
125 1 1 1 1
126 1 2 0 0.05 1 0.95
127 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
1458
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 1
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
24
## name
running(c31)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(24) : $c(1)) ($s(24) : Bernoulli(+(/(*(+($s(38) $s(7) $s(31) $s(32) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(24) : $c(1)) ($s(24) : <=($c(0.5) +(/(*(+($s(38) $s(7) $s(31) $s(32) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
24
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.45 1 0.55
5 1 1 1 1
6 1 2 0 0.35 1 0.65
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 1 2 0 0.35 1 0.65
13 1 1 1 1
14 1 2 0 0.25 1 0.75
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 1 2 0 0.35 1 0.65
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 0 2 0 0.98 1 0.02
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 1 2 0 0.35 1 0.65
37 1 1 1 1
38 1 2 0 0.25 1 0.75
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 0 2 0 0.98 1 0.02
43 1 1 1 1
44 1 2 0 0.25 1 0.75
45 1 1 1 1
46 1 2 0 0.15 1 0.85
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 0 2 0 0.98 1 0.02
51 1 1 1 1
52 1 2 0 0.25 1 0.75
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 0 2 0 0.98 1 0.02
57 1 1 1 1
58 0 2 0 0.98 1 0.02
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 1
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
25
## name
running(c32)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(25) : $c(1)) ($s(25) : Bernoulli(+(/(*(+($s(19) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(25) : $c(1)) ($s(25) : <=($c(0.5) +(/(*(+($s(19) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
25
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 1
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
26
## name
running(c33)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(26) : $c(1)) ($s(26) : Bernoulli(+(/(*(+($s(2) $s(3) $s(14) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(26) : $c(1)) ($s(26) : <=($c(0.5) +(/(*(+($s(2) $s(3) $s(14) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
26
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 0 2 0 0.98 1 0.02
15 1 1 1 1
16 1 2 0 0.425 1 0.575
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 1 2 0 0.3 1 0.7
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 1 2 0 0.3 1 0.7
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 1
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
27
## name
running(c34)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(27) : $c(1)) ($s(27) : Bernoulli(+(/(*(+($s(18) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(27) : $c(1)) ($s(27) : <=($c(0.5) +(/(*(+($s(18) $c(1)) $c(0.5)) $c(2)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
27
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
8
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.3 1 0.7
5 1 1 1 1
6 1 2 0 0.05 1 0.95
7 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
18
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 1
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
28
## name
running(c35)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(28) : $c(1)) ($s(28) : Bernoulli(+(/(*(+($s(0) $s(5) $s(19) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(28) : $c(1)) ($s(28) : <=($c(0.5) +(/(*(+($s(0) $s(5) $s(19) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
28
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 0 2 0 0.98 1 0.02
15 1 1 1 1
16 1 2 0 0.425 1 0.575
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 1 2 0 0.3 1 0.7
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 1 2 0 0.3 1 0.7
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 1
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
29
## name
running(c36)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(29) : $c(1)) ($s(29) : Bernoulli(+(/(*(+($s(0) $s(22) $s(36) $s(13) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(29) : $c(1)) ($s(29) : <=($c(0.5) +(/(*(+($s(0) $s(22) $s(36) $s(13) $c(1)) $c(0.5)) $c(5)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
29
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
64
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 0 2 0 0.98 1 0.02
15 1 1 1 1
16 1 2 0 0.45 1 0.55
17 1 1 1 1
18 1 2 0 0.35 1 0.65
19 1 1 1 1
20 1 2 0 0.35 1 0.65
21 1 1 1 1
22 1 2 0 0.25 1 0.75
23 1 1 1 1
24 1 2 0 0.35 1 0.65
25 1 1 1 1
26 1 2 0 0.25 1 0.75
27 1 1 1 1
28 1 2 0 0.25 1 0.75
29 1 1 1 1
30 1 2 0 0.15 1 0.85
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 0 2 0 0.98 1 0.02
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 0 2 0 0.98 1 0.02
43 1 1 1 1
44 0 2 0 0.98 1 0.02
45 1 1 1 1
46 0 2 0 0.98 1 0.02
47 1 1 1 1
48 1 2 0 0.35 1 0.65
49 1 1 1 1
50 1 2 0 0.25 1 0.75
51 1 1 1 1
52 1 2 0 0.25 1 0.75
53 1 1 1 1
54 1 2 0 0.15 1 0.85
55 1 1 1 1
56 1 2 0 0.25 1 0.75
57 1 1 1 1
58 1 2 0 0.15 1 0.85
59 1 1 1 1
60 1 2 0 0.15 1 0.85
61 1 1 1 1
62 1 2 0 0.05 1 0.95
63 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
486
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 1
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
30
## name
running(c37)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(30) : $c(1)) ($s(30) : Bernoulli(+(/(*(+($s(39) $s(5) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(30) : $c(1)) ($s(30) : <=($c(0.5) +(/(*(+($s(39) $s(5) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
30
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.383333333333333 1 0.616666666666667
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 1
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
31
## name
running(c38)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(31) : $c(1)) ($s(31) : Bernoulli(+(/(*(+($s(7) $s(16) $s(20) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(31) : $c(1)) ($s(31) : <=($c(0.5) +(/(*(+($s(7) $s(16) $s(20) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
31
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 0 2 0 0.98 1 0.02
15 1 1 1 1
16 1 2 0 0.425 1 0.575
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 1 2 0 0.3 1 0.7
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 1 2 0 0.3 1 0.7
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 1
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
32
## name
running(c39)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(32) : $c(1)) ($s(32) : Bernoulli(+(/(*(+($s(39) $s(8) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(32) : $c(1)) ($s(32) : <=($c(0.5) +(/(*(+($s(39) $s(8) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
32
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 1 2 0 0.383333333333333 1 0.616666666666667
5 1 1 1 1
6 1 2 0 0.216666666666667 1 0.783333333333333
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
33
## name
running(c4)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(33) : $c(1)) ($s(33) : Bernoulli(+(/(*(+($s(22) $s(36) $s(1) $s(27) $s(30) $s(31) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(33) : $c(1)) ($s(33) : <=($c(0.5) +(/(*(+($s(22) $s(36) $s(1) $s(27) $s(30) $s(31) $c(1)) $c(0.5)) $c(7)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
33
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
256
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 0 2 0 0.98 1 0.02
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 0 2 0 0.98 1 0.02
23 1 1 1 1
24 0 2 0 0.98 1 0.02
25 1 1 1 1
26 0 2 0 0.98 1 0.02
27 1 1 1 1
28 0 2 0 0.98 1 0.02
29 1 1 1 1
30 0 2 0 0.98 1 0.02
31 1 1 1 1
32 0 2 0 0.98 1 0.02
33 1 1 1 1
34 0 2 0 0.98 1 0.02
35 1 1 1 1
36 0 2 0 0.98 1 0.02
37 1 1 1 1
38 0 2 0 0.98 1 0.02
39 1 1 1 1
40 0 2 0 0.98 1 0.02
41 1 1 1 1
42 0 2 0 0.98 1 0.02
43 1 1 1 1
44 0 2 0 0.98 1 0.02
45 1 1 1 1
46 0 2 0 0.98 1 0.02
47 1 1 1 1
48 0 2 0 0.98 1 0.02
49 1 1 1 1
50 0 2 0 0.98 1 0.02
51 1 1 1 1
52 0 2 0 0.98 1 0.02
53 1 1 1 1
54 0 2 0 0.98 1 0.02
55 1 1 1 1
56 0 2 0 0.98 1 0.02
57 1 1 1 1
58 0 2 0 0.98 1 0.02
59 1 1 1 1
60 0 2 0 0.98 1 0.02
61 1 1 1 1
62 0 2 0 0.98 1 0.02
63 1 1 1 1
64 1 2 0 0.478571428571429 1 0.521428571428571
65 1 1 1 1
66 1 2 0 0.407142857142857 1 0.592857142857143
67 1 1 1 1
68 1 2 0 0.407142857142857 1 0.592857142857143
69 1 1 1 1
70 1 2 0 0.335714285714286 1 0.664285714285714
71 1 1 1 1
72 1 2 0 0.407142857142857 1 0.592857142857143
73 1 1 1 1
74 1 2 0 0.335714285714286 1 0.664285714285714
75 1 1 1 1
76 1 2 0 0.335714285714286 1 0.664285714285714
77 1 1 1 1
78 1 2 0 0.264285714285714 1 0.735714285714286
79 1 1 1 1
80 1 2 0 0.407142857142857 1 0.592857142857143
81 1 1 1 1
82 1 2 0 0.335714285714286 1 0.664285714285714
83 1 1 1 1
84 1 2 0 0.335714285714286 1 0.664285714285714
85 1 1 1 1
86 1 2 0 0.264285714285714 1 0.735714285714286
87 1 1 1 1
88 1 2 0 0.335714285714286 1 0.664285714285714
89 1 1 1 1
90 1 2 0 0.264285714285714 1 0.735714285714286
91 1 1 1 1
92 1 2 0 0.264285714285714 1 0.735714285714286
93 1 1 1 1
94 1 2 0 0.192857142857143 1 0.807142857142857
95 1 1 1 1
96 1 2 0 0.407142857142857 1 0.592857142857143
97 1 1 1 1
98 1 2 0 0.335714285714286 1 0.664285714285714
99 1 1 1 1
100 1 2 0 0.335714285714286 1 0.664285714285714
101 1 1 1 1
102 1 2 0 0.264285714285714 1 0.735714285714286
103 1 1 1 1
104 1 2 0 0.335714285714286 1 0.664285714285714
105 1 1 1 1
106 1 2 0 0.264285714285714 1 0.735714285714286
107 1 1 1 1
108 1 2 0 0.264285714285714 1 0.735714285714286
109 1 1 1 1
110 1 2 0 0.192857142857143 1 0.807142857142857
111 1 1 1 1
112 1 2 0 0.335714285714286 1 0.664285714285714
113 1 1 1 1
114 1 2 0 0.264285714285714 1 0.735714285714286
115 1 1 1 1
116 1 2 0 0.264285714285714 1 0.735714285714286
117 1 1 1 1
118 1 2 0 0.192857142857143 1 0.807142857142857
119 1 1 1 1
120 1 2 0 0.264285714285714 1 0.735714285714286
121 1 1 1 1
122 1 2 0 0.192857142857143 1 0.807142857142857
123 1 1 1 1
124 1 2 0 0.192857142857143 1 0.807142857142857
125 1 1 1 1
126 1 2 0 0.121428571428571 1 0.878571428571429
127 1 1 1 1
128 0 2 0 0.98 1 0.02
129 1 1 1 1
130 0 2 0 0.98 1 0.02
131 1 1 1 1
132 0 2 0 0.98 1 0.02
133 1 1 1 1
134 0 2 0 0.98 1 0.02
135 1 1 1 1
136 0 2 0 0.98 1 0.02
137 1 1 1 1
138 0 2 0 0.98 1 0.02
139 1 1 1 1
140 0 2 0 0.98 1 0.02
141 1 1 1 1
142 0 2 0 0.98 1 0.02
143 1 1 1 1
144 0 2 0 0.98 1 0.02
145 1 1 1 1
146 0 2 0 0.98 1 0.02
147 1 1 1 1
148 0 2 0 0.98 1 0.02
149 1 1 1 1
150 0 2 0 0.98 1 0.02
151 1 1 1 1
152 0 2 0 0.98 1 0.02
153 1 1 1 1
154 0 2 0 0.98 1 0.02
155 1 1 1 1
156 0 2 0 0.98 1 0.02
157 1 1 1 1
158 0 2 0 0.98 1 0.02
159 1 1 1 1
160 0 2 0 0.98 1 0.02
161 1 1 1 1
162 0 2 0 0.98 1 0.02
163 1 1 1 1
164 0 2 0 0.98 1 0.02
165 1 1 1 1
166 0 2 0 0.98 1 0.02
167 1 1 1 1
168 0 2 0 0.98 1 0.02
169 1 1 1 1
170 0 2 0 0.98 1 0.02
171 1 1 1 1
172 0 2 0 0.98 1 0.02
173 1 1 1 1
174 0 2 0 0.98 1 0.02
175 1 1 1 1
176 0 2 0 0.98 1 0.02
177 1 1 1 1
178 0 2 0 0.98 1 0.02
179 1 1 1 1
180 0 2 0 0.98 1 0.02
181 1 1 1 1
182 0 2 0 0.98 1 0.02
183 1 1 1 1
184 0 2 0 0.98 1 0.02
185 1 1 1 1
186 0 2 0 0.98 1 0.02
187 1 1 1 1
188 0 2 0 0.98 1 0.02
189 1 1 1 1
190 0 2 0 0.98 1 0.02
191 1 1 1 1
192 1 2 0 0.407142857142857 1 0.592857142857143
193 1 1 1 1
194 1 2 0 0.335714285714286 1 0.664285714285714
195 1 1 1 1
196 1 2 0 0.335714285714286 1 0.664285714285714
197 1 1 1 1
198 1 2 0 0.264285714285714 1 0.735714285714286
199 1 1 1 1
200 1 2 0 0.335714285714286 1 0.664285714285714
201 1 1 1 1
202 1 2 0 0.264285714285714 1 0.735714285714286
203 1 1 1 1
204 1 2 0 0.264285714285714 1 0.735714285714286
205 1 1 1 1
206 1 2 0 0.192857142857143 1 0.807142857142857
207 1 1 1 1
208 1 2 0 0.335714285714286 1 0.664285714285714
209 1 1 1 1
210 1 2 0 0.264285714285714 1 0.735714285714286
211 1 1 1 1
212 1 2 0 0.264285714285714 1 0.735714285714286
213 1 1 1 1
214 1 2 0 0.192857142857143 1 0.807142857142857
215 1 1 1 1
216 1 2 0 0.264285714285714 1 0.735714285714286
217 1 1 1 1
218 1 2 0 0.192857142857143 1 0.807142857142857
219 1 1 1 1
220 1 2 0 0.192857142857143 1 0.807142857142857
221 1 1 1 1
222 1 2 0 0.121428571428571 1 0.878571428571429
223 1 1 1 1
224 1 2 0 0.335714285714286 1 0.664285714285714
225 1 1 1 1
226 1 2 0 0.264285714285714 1 0.735714285714286
227 1 1 1 1
228 1 2 0 0.264285714285714 1 0.735714285714286
229 1 1 1 1
230 1 2 0 0.192857142857143 1 0.807142857142857
231 1 1 1 1
232 1 2 0 0.264285714285714 1 0.735714285714286
233 1 1 1 1
234 1 2 0 0.192857142857143 1 0.807142857142857
235 1 1 1 1
236 1 2 0 0.192857142857143 1 0.807142857142857
237 1 1 1 1
238 1 2 0 0.121428571428571 1 0.878571428571429
239 1 1 1 1
240 1 2 0 0.264285714285714 1 0.735714285714286
241 1 1 1 1
242 1 2 0 0.192857142857143 1 0.807142857142857
243 1 1 1 1
244 1 2 0 0.192857142857143 1 0.807142857142857
245 1 1 1 1
246 1 2 0 0.121428571428571 1 0.878571428571429
247 1 1 1 1
248 1 2 0 0.192857142857143 1 0.807142857142857
249 1 1 1 1
250 1 2 0 0.121428571428571 1 0.878571428571429
251 1 1 1 1
252 1 2 0 0.121428571428571 1 0.878571428571429
253 1 1 1 1
254 1 2 0 0.05 1 0.95
255 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
4374
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
34
## name
running(c40)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(34) : $c(1)) ($s(34) : Bernoulli(+(/(*(+($s(15) $s(24) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(34) : $c(1)) ($s(34) : <=($c(0.5) +(/(*(+($s(15) $s(24) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
34
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
35
## name
running(c5)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(35) : $c(1)) ($s(35) : Bernoulli(+(/(*(+($s(10) $s(26) $s(28) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(35) : $c(1)) ($s(35) : <=($c(0.5) +(/(*(+($s(10) $s(26) $s(28) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
35
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 0 2 0 0.98 1 0.02
9 1 1 1 1
10 0 2 0 0.98 1 0.02
11 1 1 1 1
12 0 2 0 0.98 1 0.02
13 1 1 1 1
14 0 2 0 0.98 1 0.02
15 1 1 1 1
16 1 2 0 0.425 1 0.575
17 1 1 1 1
18 1 2 0 0.3 1 0.7
19 1 1 1 1
20 1 2 0 0.3 1 0.7
21 1 1 1 1
22 1 2 0 0.175 1 0.825
23 1 1 1 1
24 1 2 0 0.3 1 0.7
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
36
## name
running(c6)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(36) : $c(1)) ($s(36) : Bernoulli(+(/(*(+($s(38) $s(13) $s(30) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(36) : $c(1)) ($s(36) : <=($c(0.5) +(/(*(+($s(38) $s(13) $s(30) $c(1)) $c(0.5)) $c(4)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
36
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
32
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.425 1 0.575
9 1 1 1 1
10 1 2 0 0.3 1 0.7
11 1 1 1 1
12 1 2 0 0.3 1 0.7
13 1 1 1 1
14 1 2 0 0.175 1 0.825
15 1 1 1 1
16 0 2 0 0.98 1 0.02
17 1 1 1 1
18 0 2 0 0.98 1 0.02
19 1 1 1 1
20 0 2 0 0.98 1 0.02
21 1 1 1 1
22 0 2 0 0.98 1 0.02
23 1 1 1 1
24 1 2 0 0.3 1 0.7
25 1 1 1 1
26 1 2 0 0.175 1 0.825
27 1 1 1 1
28 1 2 0 0.175 1 0.825
29 1 1 1 1
30 1 2 0 0.05 1 0.95
31 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
162
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
37
## name
running(c7)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(37) : $c(1)) ($s(37) : Bernoulli(+(/(*(+($s(12) $s(15) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(37) : $c(1)) ($s(37) : <=($c(0.5) +(/(*(+($s(12) $s(15) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
37
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
38
## name
running(c8)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(38) : $c(1)) ($s(38) : Bernoulli(+(/(*(+($s(18) $s(19) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(38) : $c(1)) ($s(38) : <=($c(0.5) +(/(*(+($s(18) $s(19) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
38
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0

## index
39
## name
running(c9)
## number of values
2
## values
0 false
1 true
## formula
switch( ($a(39) : $c(1)) ($s(39) : Bernoulli(+(/(*(+($s(1) $s(34) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : Bernoulli($c(0.02))) )
## determinized formula
switch( ($a(39) : $c(1)) ($s(39) : <=($c(0.5) +(/(*(+($s(1) $s(34) $c(1)) $c(0.5)) $c(3)) $c(0.45)))) ($c(1) : $c(0)) )
## hash index
39
## caching type 
VECTOR
## precomputed results (key - determinization - size of distribution - value-probability pairs)
16
0 0 2 0 0.98 1 0.02
1 1 1 1 1
2 0 2 0 0.98 1 0.02
3 1 1 1 1
4 0 2 0 0.98 1 0.02
5 1 1 1 1
6 0 2 0 0.98 1 0.02
7 1 1 1 1
8 1 2 0 0.383333333333333 1 0.616666666666667
9 1 1 1 1
10 1 2 0 0.216666666666667 1 0.783333333333333
11 1 1 1 1
12 1 2 0 0.216666666666667 1 0.783333333333333
13 1 1 1 1
14 1 2 0 0.05 1 0.95
15 1 1 1 1
## kleene caching type
VECTOR
## kleene caching vec size
54
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
11 0
12 0
13 0
14 0
15 0
16 0
17 0
18 0
19 0
20 0
21 0
22 0
23 0
24 0
25 0
26 0
27 0
28 0
29 0
30 0
31 0
32 0
33 0
34 0
35 0
36 0
37 0
38 0
39 0
40 0



#####REWARD#####
## formula
+(-($s(0) *($a(0) $c(0.75))) -($s(11) *($a(11) $c(0.75))) -($s(22) *($a(22) $c(0.75))) -($s(33) *($a(33) $c(0.75))) -($s(35) *($a(35) $c(0.75))) -($s(36) *($a(36) $c(0.75))) -($s(37) *($a(37) $c(0.75))) -($s(38) *($a(38) $c(0.75))) -($s(39) *($a(39) $c(0.75))) -($s(1) *($a(1) $c(0.75))) -($s(2) *($a(2) $c(0.75))) -($s(3) *($a(3) $c(0.75))) -($s(4) *($a(4) $c(0.75))) -($s(5) *($a(5) $c(0.75))) -($s(6) *($a(6) $c(0.75))) -($s(7) *($a(7) $c(0.75))) -($s(8) *($a(8) $c(0.75))) -($s(9) *($a(9) $c(0.75))) -($s(10) *($a(10) $c(0.75))) -($s(12) *($a(12) $c(0.75))) -($s(13) *($a(13) $c(0.75))) -($s(14) *($a(14) $c(0.75))) -($s(15) *($a(15) $c(0.75))) -($s(16) *($a(16) $c(0.75))) -($s(17) *($a(17) $c(0.75))) -($s(18) *($a(18) $c(0.75))) -($s(19) *($a(19) $c(0.75))) -($s(20) *($a(20) $c(0.75))) -($s(21) *($a(21) $c(0.75))) -($s(23) *($a(23) $c(0.75))) -($s(24) *($a(24) $c(0.75))) -($s(25) *($a(25) $c(0.75))) -($s(26) *($a(26) $c(0.75))) -($s(27) *($a(27) $c(0.75))) -($s(28) *($a(28) $c(0.75))) -($s(29) *($a(29) $c(0.75))) -($s(30) *($a(30) $c(0.75))) -($s(31) *($a(31) $c(0.75))) -($s(32) *($a(32) $c(0.75))) -($s(34) *($a(34) $c(0.75))))
## min
-0.75
## max
40
## independent from actions
0
## hash index
40
## caching type
MAP
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
11 11
12 12
13 13
14 14
15 15
16 16
17 17
18 18
19 19
20 20
21 21
22 22
23 23
24 24
25 25
26 26
27 27
28 28
29 29
30 30
31 31
32 32
33 33
34 34
35 35
36 36
37 37
38 38
39 39
40 40


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
4
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
## relevant preconditions
0


## index
5
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
6
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
## relevant preconditions
0


## index
7
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
## relevant preconditions
0


## index
8
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
9
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
10
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
11
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
12
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
13
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
14
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
15
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
16
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
17
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
18
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
19
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
20
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
21
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
22
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
23
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
24
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
25
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
26
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
27
## state
0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
28
## state
0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
29
## state
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
30
## state
0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
31
## state
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
32
## state
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
33
## state
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
34
## state
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
35
## state
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
36
## state
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
37
## state
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
38
## state
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
39
## state
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
40
## state
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####

#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## state fluent hash keys (first line is the number of keys)
5
0 2
1 2
28 2
29 2
40 41
## kleene state fluent hash keys (first line is the number of keys)
4
0 2
1 2
28 2
29 2

## index
1
## state hash key (for each value in the domain)
0 2
## state fluent hash keys (first line is the number of keys)
5
1 4
10 2
33 2
39 2
40 82
## kleene state fluent hash keys (first line is the number of keys)
4
1 6
10 2
33 2
39 2

## index
2
## state hash key (for each value in the domain)
0 4
## state fluent hash keys (first line is the number of keys)
5
2 2
8 2
22 2
26 2
40 164
## kleene state fluent hash keys (first line is the number of keys)
4
2 2
8 2
22 2
26 2

## index
3
## state hash key (for each value in the domain)
0 8
## state fluent hash keys (first line is the number of keys)
5
3 2
12 2
13 2
26 4
40 328
## kleene state fluent hash keys (first line is the number of keys)
4
3 2
12 2
13 2
26 6

## index
4
## state hash key (for each value in the domain)
0 16
## state fluent hash keys (first line is the number of keys)
4
2 4
4 2
11 2
40 656
## kleene state fluent hash keys (first line is the number of keys)
3
2 6
4 2
11 2

## index
5
## state hash key (for each value in the domain)
0 32
## state fluent hash keys (first line is the number of keys)
5
5 2
7 2
28 4
30 2
40 1312
## kleene state fluent hash keys (first line is the number of keys)
4
5 2
7 2
28 6
30 2

## index
6
## state hash key (for each value in the domain)
0 64
## state fluent hash keys (first line is the number of keys)
5
0 4
6 2
12 4
20 2
40 2624
## kleene state fluent hash keys (first line is the number of keys)
4
0 6
6 2
12 6
20 2

## index
7
## state hash key (for each value in the domain)
0 128
## state fluent hash keys (first line is the number of keys)
5
0 8
7 4
24 2
31 2
40 5248
## kleene state fluent hash keys (first line is the number of keys)
4
0 18
7 6
24 2
31 2

## index
8
## state hash key (for each value in the domain)
0 256
## state fluent hash keys (first line is the number of keys)
5
8 4
13 4
23 2
32 2
40 10496
## kleene state fluent hash keys (first line is the number of keys)
4
8 6
13 6
23 2
32 2

## index
9
## state hash key (for each value in the domain)
0 512
## state fluent hash keys (first line is the number of keys)
5
9 2
11 4
22 4
23 4
40 20992
## kleene state fluent hash keys (first line is the number of keys)
4
9 2
11 6
22 6
23 6

## index
10
## state hash key (for each value in the domain)
0 1024
## state fluent hash keys (first line is the number of keys)
5
3 4
10 4
23 8
35 2
40 41984
## kleene state fluent hash keys (first line is the number of keys)
4
3 6
10 6
23 18
35 2

## index
11
## state hash key (for each value in the domain)
0 2048
## state fluent hash keys (first line is the number of keys)
5
1 8
11 8
18 2
22 8
40 83968
## kleene state fluent hash keys (first line is the number of keys)
4
1 18
11 18
18 2
22 18

## index
12
## state hash key (for each value in the domain)
0 4096
## state fluent hash keys (first line is the number of keys)
5
12 8
21 2
22 16
37 2
40 167936
## kleene state fluent hash keys (first line is the number of keys)
4
12 18
21 2
22 54
37 2

## index
13
## state hash key (for each value in the domain)
0 8192
## state fluent hash keys (first line is the number of keys)
4
13 8
29 4
36 2
40 335872
## kleene state fluent hash keys (first line is the number of keys)
3
13 18
29 6
36 2

## index
14
## state hash key (for each value in the domain)
0 16384
## state fluent hash keys (first line is the number of keys)
5
11 16
14 2
21 4
26 8
40 671744
## kleene state fluent hash keys (first line is the number of keys)
4
11 54
14 2
21 6
26 18

## index
15
## state hash key (for each value in the domain)
0 32768
## state fluent hash keys (first line is the number of keys)
5
14 4
15 2
34 2
37 4
40 1343488
## kleene state fluent hash keys (first line is the number of keys)
4
14 6
15 2
34 2
37 6

## index
16
## state hash key (for each value in the domain)
0 65536
## state fluent hash keys (first line is the number of keys)
5
1 16
4 4
16 2
31 4
40 2686976
## kleene state fluent hash keys (first line is the number of keys)
4
1 54
4 6
16 2
31 6

## index
17
## state hash key (for each value in the domain)
0 131072
## state fluent hash keys (first line is the number of keys)
5
0 16
5 4
17 2
20 4
40 5373952
## kleene state fluent hash keys (first line is the number of keys)
4
0 54
5 6
17 2
20 6

## index
18
## state hash key (for each value in the domain)
0 262144
## state fluent hash keys (first line is the number of keys)
5
14 8
18 4
27 2
38 2
40 10747904
## kleene state fluent hash keys (first line is the number of keys)
4
14 18
18 6
27 2
38 2

## index
19
## state hash key (for each value in the domain)
0 524288
## state fluent hash keys (first line is the number of keys)
5
19 2
25 2
28 8
38 4
40 21495808
## kleene state fluent hash keys (first line is the number of keys)
4
19 2
25 2
28 18
38 6

## index
20
## state hash key (for each value in the domain)
0 1048576
## state fluent hash keys (first line is the number of keys)
5
6 4
15 4
20 8
31 8
40 42991616
## kleene state fluent hash keys (first line is the number of keys)
4
6 6
15 6
20 18
31 18

## index
21
## state hash key (for each value in the domain)
0 2097152
## state fluent hash keys (first line is the number of keys)
4
5 8
6 8
21 8
40 85983232
## kleene state fluent hash keys (first line is the number of keys)
3
5 18
6 18
21 18

## index
22
## state hash key (for each value in the domain)
0 4194304
## state fluent hash keys (first line is the number of keys)
4
22 32
29 8
33 4
40 171966464
## kleene state fluent hash keys (first line is the number of keys)
3
22 162
29 18
33 6

## index
23
## state hash key (for each value in the domain)
0 8388608
## state fluent hash keys (first line is the number of keys)
5
10 8
14 16
17 4
23 16
40 343932928
## kleene state fluent hash keys (first line is the number of keys)
4
10 18
14 54
17 6
23 54

## index
24
## state hash key (for each value in the domain)
0 16777216
## state fluent hash keys (first line is the number of keys)
5
0 32
13 16
24 4
34 4
40 687865856
## kleene state fluent hash keys (first line is the number of keys)
4
0 162
13 54
24 6
34 6

## index
25
## state hash key (for each value in the domain)
0 33554432
## state fluent hash keys (first line is the number of keys)
5
0 64
18 8
22 64
25 4
40 1375731712
## kleene state fluent hash keys (first line is the number of keys)
4
0 486
18 18
22 486
25 6

## index
26
## state hash key (for each value in the domain)
0 67108864
## state fluent hash keys (first line is the number of keys)
5
14 32
19 4
26 16
35 4
40 2751463424
## kleene state fluent hash keys (first line is the number of keys)
4
14 162
19 6
26 54
35 6

## index
27
## state hash key (for each value in the domain)
0 134217728
## state fluent hash keys (first line is the number of keys)
5
1 32
12 16
27 4
33 8
40 5502926848
## kleene state fluent hash keys (first line is the number of keys)
4
1 162
12 54
27 6
33 18

## index
28
## state hash key (for each value in the domain)
0 268435456
## state fluent hash keys (first line is the number of keys)
5
6 16
23 32
28 16
35 8
40 11005853696
## kleene state fluent hash keys (first line is the number of keys)
4
6 54
23 162
28 54
35 18

## index
29
## state hash key (for each value in the domain)
0 536870912
## state fluent hash keys (first line is the number of keys)
5
10 16
12 32
18 16
29 16
40 22011707392
## kleene state fluent hash keys (first line is the number of keys)
4
10 54
12 162
18 54
29 54

## index
30
## state hash key (for each value in the domain)
0 1073741824
## state fluent hash keys (first line is the number of keys)
5
17 8
30 4
33 16
36 4
40 44023414784
## kleene state fluent hash keys (first line is the number of keys)
4
17 18
30 6
33 54
36 6

## index
31
## state hash key (for each value in the domain)
0 2147483648
## state fluent hash keys (first line is the number of keys)
5
15 8
24 8
31 16
33 32
40 88046829568
## kleene state fluent hash keys (first line is the number of keys)
4
15 18
24 18
31 54
33 162

## index
32
## state hash key (for each value in the domain)
0 4294967296
## state fluent hash keys (first line is the number of keys)
5
15 16
20 16
24 16
32 4
40 176093659136
## kleene state fluent hash keys (first line is the number of keys)
4
15 54
20 54
24 54
32 6

## index
33
## state hash key (for each value in the domain)
0 8589934592
## state fluent hash keys (first line is the number of keys)
5
1 64
7 8
23 64
33 64
40 352187318272
## kleene state fluent hash keys (first line is the number of keys)
4
1 486
7 18
23 486
33 486

## index
34
## state hash key (for each value in the domain)
0 17179869184
## state fluent hash keys (first line is the number of keys)
5
10 32
20 32
34 8
39 4
40 704374636544
## kleene state fluent hash keys (first line is the number of keys)
4
10 162
20 162
34 18
39 6

## index
35
## state hash key (for each value in the domain)
0 34359738368
## state fluent hash keys (first line is the number of keys)
5
10 64
16 4
20 64
35 16
40 1408749273088
## kleene state fluent hash keys (first line is the number of keys)
4
10 486
16 6
20 486
35 54

## index
36
## state hash key (for each value in the domain)
0 68719476736
## state fluent hash keys (first line is the number of keys)
5
2 8
29 32
33 128
36 8
40 2817498546176
## kleene state fluent hash keys (first line is the number of keys)
4
2 18
29 162
33 1458
36 18

## index
37
## state hash key (for each value in the domain)
0 137438953472
## state fluent hash keys (first line is the number of keys)
5
5 16
7 16
15 32
37 8
40 5634997092352
## kleene state fluent hash keys (first line is the number of keys)
4
5 54
7 54
15 162
37 18

## index
38
## state hash key (for each value in the domain)
0 274877906944
## state fluent hash keys (first line is the number of keys)
5
13 32
24 32
36 16
38 8
40 11269994184704
## kleene state fluent hash keys (first line is the number of keys)
4
13 162
24 162
36 54
38 18

## index
39
## state hash key (for each value in the domain)
0 549755813888
## state fluent hash keys (first line is the number of keys)
5
12 64
30 8
32 8
39 8
40 22539988369408
## kleene state fluent hash keys (first line is the number of keys)
4
12 486
30 18
32 18
39 18



#####TRAINING SET#####
200
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 1 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 1 0 0 0 1 0 0 0 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 
0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 
1 0 1 0 0 0 1 0 0 1 0 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 0 0 0 0 0 
0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 
1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 
1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 
1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 
0 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 
1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 
0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 
0 1 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 
0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 
0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 
1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 
0 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 
0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 
0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 
0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 
0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 
0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 
1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 1 0 
0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 
1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 
0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 1 0 
0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 
0 1 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 0 1 0 
1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 1 0 
0 1 1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 
0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 1 0 0 0 0 1 0 0 1 0 
0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 
0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 
0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 
0 0 0 0 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 
0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 
0 1 1 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 0 1 0 1 0 
1 0 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 1 0 0 1 0 1 0 1 0 1 0 
1 1 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 0 0 0 0 1 1 0 1 0 1 0 1 0 
0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 
1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 0 
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 
0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 
0 0 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 
1 0 1 0 1 0 1 0 0 1 0 1 1 1 0 0 0 1 1 0 1 0 0 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 0 1 
0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 
1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 0 0 1 1 0 1 0 1 0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 0 1 
0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 0 1 
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 1 
0 1 1 1 0 0 0 1 0 1 1 0 0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 
0 1 1 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 
0 1 1 1 0 0 0 1 0 1 1 0 0 0 0 1 0 1 0 1 0 0 1 1 1 0 0 0 1 0 1 1 1 0 1 0 0 1 0 1 
0 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 1 0 1 
0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 1 1 0 0 1 0 1 1 0 0 0 0 0 1 1 0 1 0 1 
1 1 1 1 1 1 0 1 0 0 1 0 1 0 0 1 1 1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 0 1 
0 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 1 0 1 1 0 0 0 1 1 0 1 
0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 0 0 0 1 1 1 1 0 1 1 1 0 1 0 1 1 0 1 0 0 1 1 0 1 
0 0 1 1 1 1 0 1 1 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 1 0 1 
1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 0 1 0 1 1 0 1 0 1 1 0 1 
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 1 1 0 1 1 0 1 
0 1 1 1 1 1 0 1 0 1 1 0 0 1 1 1 1 0 0 0 1 0 0 1 0 0 1 1 0 1 0 1 1 1 0 1 1 1 0 1 
0 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1 0 0 1 1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 0 1 
1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 0 1 
0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 
0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 1 
1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 0 0 1 1 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 1 0 1 1 
0 1 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 1 0 0 1 0 1 1 
1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 1 0 1 0 1 0 1 1 
0 0 1 1 1 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 
0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 0 1 1 0 1 1 0 1 0 0 0 0 0 0 1 1 0 1 1 1 
0 1 0 0 0 0 1 0 0 1 0 1 1 0 0 0 0 0 1 0 0 1 1 0 1 1 0 1 0 0 0 0 0 0 1 1 0 1 1 1 
0 1 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 0 1 1 0 1 0 1 1 1 0 0 0 0 1 1 0 1 1 1 
1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 
0 1 1 0 0 1 0 1 0 1 0 1 0 0 1 0 0 1 1 0 0 0 0 1 1 0 0 1 0 1 1 0 0 1 1 1 0 1 1 1 
1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 
1 1 1 0 0 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 
1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 
0 0 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 1 1 1 
0 0 1 0 1 0 0 1 1 1 1 1 1 1 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1 
0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 
0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 
0 0 1 0 0 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 
0 1 0 1 0 0 1 1 0 1 1 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 
1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 
0 0 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 
0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 0 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
