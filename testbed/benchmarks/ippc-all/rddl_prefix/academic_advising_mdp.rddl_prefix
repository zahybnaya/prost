domain academic_advising_mdp {
  requirements = {
  };
  types {
    course : object;
  };
  pvariables {
    PRIOR_PROB_PASS_NO_PREREQ(course) : {non-fluent, real, default = 0.8};
    PRIOR_PROB_PASS(course) : {non-fluent, real, default = 0.2};
    COURSE_COST(course) : {non-fluent, real, default = -1};
    takeCourse(course) : {action-fluent, bool, default = false};
    passed(course) : {state-fluent, bool, default = false};
    PROGRAM_INCOMPLETE_PENALTY : {non-fluent, real, default = -5};
    taken(course) : {state-fluent, bool, default = false};
    COURSE_RETAKE_COST(course) : {non-fluent, real, default = -2};
    PREREQ(course, course) : {non-fluent, bool, default = false};
    PROGRAM_REQUIREMENT(course) : {non-fluent, bool, default = false};
  };
  cpfs {
    (taken' ?c) = (| (taken ?c) (takeCourse ?c) );
    (passed' ?c) = (if (^ (takeCourse ?c) (~ (passed ?c)) ) then (if (~ (exists ( (?c2 : course) ) (PREREQ ?c2 ?c))) then (Bernoulli (PRIOR_PROB_PASS_NO_PREREQ ?c)) else (Bernoulli (+ (PRIOR_PROB_PASS ?c) (* (- 1 (PRIOR_PROB_PASS ?c)) (/ (sum ( (?c2 : course) ) (^ (PREREQ ?c2 ?c) (passed ?c2) )) (+ 1 (sum ( (?c2 : course) ) (PREREQ ?c2 ?c)))))))) else (passed ?c));
  };
  reward = (+ (+ (sum ( (?c : course) ) (* (COURSE_COST ?c) (^ (takeCourse ?c) (~ (taken ?c)) ))) (sum ( (?c : course) ) (* (COURSE_RETAKE_COST ?c) (^ (takeCourse ?c) (taken ?c) )))) (* (PROGRAM_INCOMPLETE_PENALTY) (~ (forall ( (?c : course) ) (=> (PROGRAM_REQUIREMENT ?c) (passed ?c) )))));
}

